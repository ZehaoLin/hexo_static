<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Linzh&#39;s Blog</title>
  <subtitle>Standing on Shoulders of Giants</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://linzhs.cm/"/>
  <updated>2017-05-25T18:17:38.061Z</updated>
  <id>http://linzhs.cm/</id>
  
  <author>
    <name>Linzh</name>
    <email>lzh_547590520@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java随笔 - 泛型</title>
    <link href="http://linzhs.cm/2017/05/26/java-generic/"/>
    <id>http://linzhs.cm/2017/05/26/java-generic/</id>
    <published>2017-05-25T18:17:38.000Z</published>
    <updated>2017-05-25T18:17:38.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java随笔-泛型"><a href="#Java随笔-泛型" class="headerlink" title="Java随笔 - 泛型"></a>Java随笔 - 泛型</h1><h2 id="泛型的基本用法"><a href="#泛型的基本用法" class="headerlink" title="泛型的基本用法"></a>泛型的基本用法</h2><p>泛型类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Pair&lt;T&gt; &#123;</div><div class="line">    private T first;</div><div class="line">    private T second;</div><div class="line">    </div><div class="line">    public T getFirst() &#123;</div><div class="line">        return first;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void setFirst(T t) &#123;</div><div class="line">        this.first = t;W</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Pair&lt;K, V&gt; &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>泛型方法，可以在普通类中存在。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class ArrayAlg &#123;</div><div class="line">    public static &lt;T&gt; T getMiddle(T...a) &#123;</div><div class="line">        return a[a.lenght / 2];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在调用一个泛型方法时，在方法名前的尖括号放入具体的类型，大多数情况下，编译器有能力推导出具体的类型，所以尖括号部分的类型可以省略<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String middle = ArrayAlg.&lt;String&gt;getMiddle(&quot;John&quot;, &quot;Q.&quot;, &quot;Public&quot;);</div><div class="line">String middle = ArrayAlg.getMiddle(&quot;John&quot;, &quot;Q.&quot;, &quot;Public&quot;);</div></pre></td></tr></table></figure></p>
<p>少数情况下会报错的情形如下，参数的类型不对应。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">double middle = ArrayAlg.getMiddle(3.14, 122, 0);</div></pre></td></tr></table></figure></p>
<p>以上例子参数中，参数分别是double和int，编译器会将他们分别打包成Double和Integer，然后生成两种类型的方法，这两个方法都是合法的，但是他们放在一起使用，没有共同的超类型。</p>
<h2 id="类型变量的限定"><a href="#类型变量的限定" class="headerlink" title="类型变量的限定"></a>类型变量的限定</h2><p>单个限定<figure class="highlight plain"><figcaption><span>extends Comparable>```， 多个限定用&做间隔```<t extends="" comparable="" &="" serializable="">```。</t></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">以上例子限定T要去实现相应的接口，用的关键词是extends而不是implements，表示T应该是绑定类型的子类型。T和绑定类型可以是类，也可以是接口，选定extends关键词的原因是其更接近子类的意思。</div><div class="line"></div><div class="line">Java中类是单继承的，所以限定类型为类时，只能是限定列表的第一个。</div><div class="line"></div><div class="line">## 泛型的实现细节</div><div class="line">编译器将代码编译完成后交给虚拟机来运行时，虚拟机中是不存在泛型这种类型对象的，所有泛型的对象都会变成指定类型的普通类对象。也就是说泛型其实是一种类，可以指定为很多种类型变量的类，很多工作都交给了编译器来完成。</div><div class="line"></div><div class="line">### 类型擦除</div><div class="line">为什么在编译过后，运行在虚拟机上的代码是没有泛型类型的，这是因为编译器对泛型做了类型擦除（type erasure）操作。经过类型擦除后，泛型类型都会自动转换为相应的原始类型。原始类型的名字就是删去类型参数后的泛型类型名。</div><div class="line"></div><div class="line">擦除变量有以下两种情况：</div><div class="line">* 无限定类型</div><div class="line"></div><div class="line">此情况下T将被替换成Object类型，并擦除&lt;T&gt;，如下示例：</div></pre></td></tr></table></figure></p>
<p>public class Pair<t> {<br>    private T first;<br>    public T getFirst() {<br>        return first;<br>    }</t></p>
<pre><code>...
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">擦除后 -&gt;</div></pre></td></tr></table></figure></p>
<p>public class Pair {<br>    private Object first;<br>    public Object getFirst() {<br>        return first;<br>    }</p>
<pre><code>...
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; C\++的模板和Java泛型在这一点上的实现有很大的区别，C++的每个模板的实例化产生的类型都是不一样的，这样很容易导致“模板代码膨胀”现象。</div><div class="line"></div><div class="line">* 有限定类型</div><div class="line"></div><div class="line">泛型类型变量若有限定类型，那原始类型用限定表中的第一个类型变量来替换。</div></pre></td></tr></table></figure></p>
<p>public class Interval<t extends="" comparable="" &="" serializable=""> implements Serializable {<br>    private T lower;<br>    private T upper;<br>    …<br>    public Interval(T first, T second) {<br>        if (first.compareTo(second) &gt;= 0) {<br>            lower = first;<br>            upper = second;<br>        } else {<br>            lower = second;<br>            upper = first;<br>        }<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">擦除后 -&gt;</div></pre></td></tr></table></figure></t></p>
<p>public class Interval implements Serializable {<br>    private ComparableComparable lower;<br>    private Comparable upper;<br>    …<br>    public Interval(Comparable first, Comparable second) {<br>        if (first.compareTo(second) &gt;= 0) {<br>            lower = first;<br>            upper = second;<br>        } else {<br>            lower = second;<br>            upper = first;<br>        }<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">T的限定变量书写的顺序并没有严格的要求，也可以写成```class Interval&lt;T extends Serializable &amp; Comparable&gt;```。这样书写，编译器会把T替换成Serializable，而需要用到Comparable时，编译器会在相应的代码中插入强制类型转换。为了提高效率，比较好的习惯是将标签（tagging）接口，也就是没有方法的接口放在限定列表的末尾。</div><div class="line"></div><div class="line">### 翻译泛型表达式</div><div class="line">在T没有限定类型时，调用一个有返回值的泛型方法时，由于类型擦除，返回的是Object类型，所以编译器会在返回值的代码上插入强制类型转换。</div></pre></td></tr></table></figure></p>
<p>Pair<employee> buddies = …;<br>Employee buddy = buddies.getFirst();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">以上代码，翻译成虚拟指令就是：</div><div class="line">* 调用原始方法Pair.getFirst</div><div class="line">* 将返回的Object类型强制转换为Employee类型。</div><div class="line"></div><div class="line">同理，对于泛型的公有域也是如此，但是不推荐有公有泛型域。</div><div class="line"></div><div class="line">### 翻译泛型方法</div><div class="line">泛型方法的翻译要注意的问题是保持多态性。实例分析：</div></pre></td></tr></table></figure></employee></p>
<p>public class DateInterval extends Pair<localdate> {<br>    public void setSecond(LocalDate second) {<br>        if (second.compareTo(getFirst()) &gt;= 0) {<br>            super.setSecond(second);<br>        }<br>    }<br>    …<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">类型擦除后 -&gt;</div></pre></td></tr></table></figure></localdate></p>
<p>public class DateInterval extends Pair {<br>    public void setSecond(LocalDate second) {<br>        …<br>    }<br>    …<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DateInterval继承自Pair，Pair中也有一个setSecond方法，为```public void setSecond(Object second)```，也就是DateInterval被编译器做完类型擦除处理后，内部存在两个setSecond方法:</div></pre></td></tr></table></figure></p>
<p>public void setSecond(LocalDate second);<br>public void setSecond(Object second);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">现在，要使用setSecond方法，</div></pre></td></tr></table></figure></p>
<p>DateInterval interval = new DateInterval(…);<br>Pair<localdate> pair = interval;//super类对象引用子类，多态性<br>pair.setSecond(aDate);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在调用setSecond方法的时候，为了适合多态性，编译器需要给调用的方法选择最合适的实现方法。因为pair应用的是子类DateInterval对象，正常来说调用的应该是DateInterval.setSecond，但是现在由于类型擦除的原因使得与多态性发生了冲突，不能去调用DateInterval.setSecond方法。</div><div class="line"></div><div class="line">要解决此问题，就需要编译器做一些中间工作，那就是z在DataInterval类中生成一个桥方法（bridge method）：</div></pre></td></tr></table></figure></localdate></p>
<p>public void setSecond(Object second) {<br>    setSecond((Date)second);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 泛型的约束和局限性</div><div class="line">&gt; Java中泛型的很多限制其实都来自其底层的实现，就是类型擦除。</div><div class="line"></div><div class="line">### 不能用基本类型实例化类型参数</div><div class="line">没有```Pair&lt;double&gt;```，只有```Pair&lt;Double&gt;```，原因是经过类型擦除后，类型会被替换成Object，double和Object不对应，所以不能存储double值，只有Object类型的域。</div><div class="line"></div><div class="line">### 运行时的类型查询只适用于原始类型</div><div class="line">泛型经过编译器的类型擦除后，虚拟中只剩下一个非泛型类型，比如Pair&lt;T&gt;，类型擦除后，放在虚拟机中运行，只有Pair。</div><div class="line"></div><div class="line">运行时试图查询一个对象是否属于某个泛型类型时，若使用instanceof编译器会报错，若用强制类型转换则会得到一个警告。</div></pre></td></tr></table></figure></p>
<p>if (a instanceof Pair<string>)//error<br>if (a instanceof Pair<t>)//error<br>Pair<string> p = (Pair<string>)a;//warning<br>if (a instanceof Pair)//ok,it is true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">另一个例子：</div></pre></td></tr></table></figure></string></string></t></string></p>
<p>Pair<string> stringPair = …;<br>Pair<employee> employeePair = …;<br>System.out.println(stringPair.getClass() == employeePair.getClass());// print “true”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">比较后的结果是true，因为虚拟机中只有Pair，返回的都是Pair.class。</div><div class="line"></div><div class="line">### 不能创建参数化类型的数组</div><div class="line">可以声明参数类化型的数组，但是不能实例化</div></pre></td></tr></table></figure></employee></string></p>
<p>Pair<string>[] table;//OK<br>table = new Pair<string>[10];//error<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">原因是，经过编译器的类型擦除后，数组会变成Pair[]。</div><div class="line"></div><div class="line">### Varargs警告</div><div class="line">有时候泛型方法的参数是可变的，这时候参数其实是接收了一个参数数组，若这个数组接收的都是泛型，那么就存在上面的问题--不能创建参数化类型的数组。为了能通过编译，可以加入注解（二选一）：</div></pre></td></tr></table></figure></string></string></p>
<p>@SuppressWarnings(“unchecked”)<br>@SafeVarargs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">通过注解可以顺利运行，但是在处理table[0]的时候还是会抛出一个异常。</div><div class="line"></div><div class="line">### 不能实例化类型变量</div><div class="line">不能如此使用类型变量：</div></pre></td></tr></table></figure></p>
<p>new T(…)<br>new T[…]<br>T.calss<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原因是，类型擦除后都会变成Object，但是本意却不是想new  Object()。</div><div class="line"></div><div class="line">### 不能构造泛型数组</div></pre></td></tr></table></figure></p>
<p>public static <t extends="" comparable=""> T[] minmax(T[] a) {<br>    T[] t = new T[2];<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">类型擦除后，得到的数组永远是Comapable[2]。</div><div class="line"></div><div class="line">可以使用强制类型转换，让类型擦除无法察觉，但是运行的时候还是会抛出异常。</div><div class="line"></div><div class="line">### 方形类的静态上下文中类型变量无效</div><div class="line">不能在静态域或者方法中应用类型变量。</div></pre></td></tr></table></figure></t></p>
<p>public class Singleton<t> {<br>    private static T singleInstance;//error</t></p>
<pre><code>public static T getSingleInstance() {//error
    if (singleInstance == null)
        singleInstance = new Singleton&lt;&gt;();
    return singleInstance;
}
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">类型擦除后，只剩下Singleton类，且只包含singleInstance域，不能再被指定泛型并且创建。</div><div class="line"></div><div class="line">### 不能抛出或者捕获泛型类的实例</div><div class="line">不能抛出，也不能捕获泛型类对象，泛型类也不能扩展Throwable。</div></pre></td></tr></table></figure></p>
<p>public class Problem<t> extends Exception {}//error<br>public static <t extends="" throwable=""> void doWork(Class<t> t) {//error<br>    try {</t></t></t></p>
<pre><code>} catch (T e) {

}
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">不过以下例子是允许的:</div></pre></td></tr></table></figure></p>
<p>public static <t extends="" throwable=""> void doWork(T t) throws T {<br>    try {</t></p>
<pre><code>} catch (Throwable e) {
    t.initCause(e);
    throw t;
}
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 可以消除对受查异常的检查</div><div class="line">Java异常处理的一个原则是，对所有受查异常，必须提供一个处理器。若是使用泛型，可以绕开这个原则，然后包装到非受查异常中，就可以欺骗编译器。</div></pre></td></tr></table></figure></p>
<p>@SuppressWarnings(“unchecked”)<br>public static <t extends="" trowable=""> void doWorkAs(Throwable e) throws T {<br>    throw (T) e;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 注意擦除后的冲突</div></pre></td></tr></table></figure></t></p>
<p>public calss Pair<t> {<br>    public boolean equals(T values) {<br>        …<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">泛型类Pair，在类型擦除后，equal方法变成了boolean equals(Object)，这是和Object中的equals方法冲突的。</div><div class="line"></div><div class="line">## 泛型类型的继承规则</div><div class="line">假设Manager是Employee的子类，但是，Pair&lt;Manager&gt;不是Pair&lt;Employee&gt;的子类，两者并没有什么关系，所以不能用Pair&lt;Employee&gt;对象变量引用Pair&lt;Manager&gt;，但是两者都可以用Pair引用，因为两者都继承于Pair。</div></pre></td></tr></table></figure></t></p>
<p>Manager[] m = …;<br>Pair<employee> e = ArraAlg.minmax(m);//error<br>Pair<manager> p = new Pair&lt;&gt;(…);<br> Pair t = p;//ok<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 通配符类型</div><div class="line">通配符类型中，允许类型参数变化，比如：</div></pre></td></tr></table></figure></manager></employee></p>
<p> Pair&lt;? extends Employee&gt;<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">表示任何泛型Pair类型，它的类型参数是Employee的子类，如Pair&lt;Manager&gt;，而Pair&lt;String&gt;就不是。</div><div class="line"></div><div class="line">### 通配符的超类限定</div></pre></td></tr></table></figure></p>
<p> ? super Manager<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这个通配符限定Manger为所有类型的超类。</div><div class="line"></div><div class="line">### 无限定通配符</div></pre></td></tr></table></figure></p>
<p> public class Pair&lt;?&gt; {<br>     ? getFirst() {…}<br>     void setFirst(?) {…}<br> }<br> ```<br> 例子中getFirst的返回值只能赋给一个Object，而setFirst方法不能被调用，甚至不能用Object调用。</p>
<p> Pair&lt;?&gt;和Pair本质的区别在于，可以用任意Object对象调用原始Pair类的setOnjevt方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java随笔-泛型&quot;&gt;&lt;a href=&quot;#Java随笔-泛型&quot; class=&quot;headerlink&quot; title=&quot;Java随笔 - 泛型&quot;&gt;&lt;/a&gt;Java随笔 - 泛型&lt;/h1&gt;&lt;h2 id=&quot;泛型的基本用法&quot;&gt;&lt;a href=&quot;#泛型的基本用法&quot; class
    
    </summary>
    
    
      <category term="Java" scheme="http://linzhs.cm/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android接口定义语言（AIDL）</title>
    <link href="http://linzhs.cm/2017/05/26/android-aidl/"/>
    <id>http://linzhs.cm/2017/05/26/android-aidl/</id>
    <published>2017-05-25T18:16:29.000Z</published>
    <updated>2017-05-25T18:16:29.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-接口定义语言-AIDL"><a href="#Android-接口定义语言-AIDL" class="headerlink" title="Android 接口定义语言 (AIDL)"></a>Android 接口定义语言 (AIDL)</h1><p>AIDL可以定义客户端与服务使用IPC机型互相通信时都认可的编程接口。在Android，进程是fork形式存在的，独自占有一块内存，一个进程无法访问另一个进程的内存。但是，进程需要将其对象分解成操作系统能够识别的原语，并将对象编组成跨越边界的对象。Android使用AIDL来执行这一编组操作的代码繁琐工作。</p>
<blockquote>
<p>注：只有允许不同应用的客户端用IPC方式访问服务，并且想要在服务中处理多线程，才有必要使用AIDL。如果不需要执行跨越不同应用的并发 IPC，就应该通过实现一个 Binder 创建接口；或者，如果想执行 IPC，但根本不需要处理多线程，则使用 Messenger 类来实现接口。</p>
</blockquote>
<h2 id="定义AIDL接口"><a href="#定义AIDL接口" class="headerlink" title="定义AIDL接口"></a>定义AIDL接口</h2><p>Android Studio下新建AIDL文件（基本已经全自动完成了），会默认生成一个aidl文件夹，并把.aidl文件放入这里。Android SDK工具都会生成一个基于该.aidl文件的IBinder接口。并且保存到项目的 gen/ 目录中，生成的文件名与.aidl文件名一致，只是使用了.java（例如：IRemoteService.aidl 生成的文件名是 IRemoteService.java）。服务必须视情况实现IBinder接口，然后客户端应用便可绑定到该服务，并调用IBinder中的方法来执行IPC。</p>
<p>使用AIDL创建绑定服务，执行以下步骤：</p>
<ol>
<li><p>创建.aidl文件</p>
<p> 此文件定义带有方法签名的编程接口。</p>
</li>
<li><p>实现接口</p>
<p> Android SDK工具基于创建的.aidl文件，使用Java编程语言生成一个接口。此接口另有一个名为Stub的内部抽象类，用于拓展Binder类并实现AIDL接口中的方法。必须要拓展Stub类并实现方法。</p>
</li>
<li><p>向客户端公开该接口</p>
<p> 实现 Service 并重写 onBind() 以返回 Stub 类的实现。</p>
</li>
</ol>
<blockquote>
<p>注意：在 AIDL 接口首次发布后对其进行的任何更改都必须保持向后兼容性，以避免中断其他应用对服务的使用。 也就是说，因为必须将自己的 .aidl 文件复制到其他应用，才能让这些应用访问这个服务的接口，因此必须保留对原始接口的支持。</p>
</blockquote>
<h3 id="创建-aidl文件"><a href="#创建-aidl文件" class="headerlink" title="创建.aidl文件"></a>创建.aidl文件</h3><p>AIDL使用简单的语法，这样可以通过可带参数和返回值的一个或多个方法来声明接口。参数和返回值可以是任意类型，甚至可以是其他AIDL生成的接口。</p>
<p>.aidl文件有Java构建，每个.aidl文件都必须定义单个接口，并且只需包含接口声明和方法签名。</p>
<p>默认情况下，AIDL支持以下数据类型：</p>
<ul>
<li>Java支持的所有基本数据类型（int, double, float, boolean, char long等）</li>
<li>String</li>
<li>CharSequence</li>
<li>List</li>
<li>Map</li>
</ul>
<blockquote>
<p>List和Map中的所有元素都必须是以上列表中支持的数据类型，其他AIDL生成的接口或自己声明的可打包的类型。不支持通用 Map（如 Map<string,integer> 形式的 Map）。 另一端实际接收的具体类始终是 HashMap/ArrayList，但生成的方法使用的是 Map/List 接口。</string,integer></p>
</blockquote>
<p>定义服务接口时要注意：</p>
<ul>
<li>方法可带0到多个参数，返回值可以为空</li>
<li>所有非原语参数都需要指示数据走向的方向标记。可以是in、out、inout。原语（基本类型）默认是in，不能是其他方向。应该将方法限定为真正需要的方向，因为编组参数的开销极大。</li>
<li>.aidl文件中包括的所有代码注释都包含在生成的IBinder接口中（import和package语句之前的注释除外）</li>
<li>只支持方法，不能公开AIDL中的静态字段。</li>
</ul>
<p>.aidl demo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// IRemoteService.aidl</div><div class="line">package com.example.android;</div><div class="line"></div><div class="line">// Declare any non-default types here with import statements</div><div class="line"></div><div class="line">/** Example service interface */</div><div class="line">interface IRemoteService &#123;</div><div class="line">    /** Request the process ID of this service, to do evil things with it. */</div><div class="line">    int getPid();</div><div class="line"></div><div class="line">    /** Demonstrates some basic types that you can use as parameters</div><div class="line">     * and return values in AIDL.</div><div class="line">     * 默认生成的方法，告知你可以使用哪些数据类型</div><div class="line">     */</div><div class="line">    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,</div><div class="line">            double aDouble, String aString);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h3><p>创建的AIDL文件会被转换成同名的.java文件，并且内部包含一个Stub子类，这个子类是其父接口（例如：YourInterface.Stub）的抽象实现，用于声明.aidl文件中的所有方法。</p>
<p>要实现.aidl生成的接口，就要拓展生成的Binder接口并实现从.aidl文件继承的方法。</p>
<p>demo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">private final IRemoteService.Stub mBinder = new IRemoteService.Stub() &#123;</div><div class="line">    public int getPid()&#123;</div><div class="line">        return Process.myPid();</div><div class="line">    &#125;</div><div class="line">    public void basicTypes(int anInt, long aLong, boolean aBoolean,</div><div class="line">        float aFloat, double aDouble, String aString) &#123;</div><div class="line">        // Does nothing</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>现在，mBinder 是 Stub 类的一个实例（一个 Binder），用于定义服务的 RPC 接口。 在下一步中，将向客户端公开该实例，以便客户端能与服务进行交互。</p>
<p>在实现 AIDL 接口时应注意遵守以下这几个规则：</p>
<ul>
<li>由于不能保证在主线程上执行传入调用，因此一开始就需要做好多线程处理准备，并将服务正确地编译为线程安全服务。</li>
<li>默认情况下，RPC 调用是同步调用。如果您明知服务完成请求的时间不止几毫秒，就不应该从 Activity 的主线程调用服务，因为这样做可能会使应用挂起（Android 可能会显示“Application is Not Responding”对话框）— 您通常应该从客户端内的单独线程调用服务。</li>
<li>引发的任何异常都不会回传给调用方。</li>
</ul>
<h3 id="向客户端公开该接口"><a href="#向客户端公开该接口" class="headerlink" title="向客户端公开该接口"></a>向客户端公开该接口</h3><p>服务实现该接口后，就需要向客户端公开该接口，以便客户端进行绑定。要为服务公开该接口，需要拓展Service类并且实现onBinder()，以返回一个类实例，这个类实现了生成的Stub。</p>
<p>demo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class RemoteService extends Service &#123;</div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line">        super.onCreate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        // Return the interface</div><div class="line">        return mBinder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private final IRemoteService.Stub mBinder = new IRemoteService.Stub() &#123;</div><div class="line">        public int getPid()&#123;</div><div class="line">            return Process.myPid();</div><div class="line">        &#125;</div><div class="line">        public void basicTypes(int anInt, long aLong, boolean aBoolean,</div><div class="line">            float aFloat, double aDouble, String aString) &#123;</div><div class="line">            // Does nothing</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>客户端还必须具有对 interface 类的访问权限，因此如果客户端和服务在不同的应用内，则客户端的应用 src/ 目录内必须包含 .aidl 文件（它生成 android.os.Binder 接口 — 为客户端提供对 AIDL 方法的访问权限）的副本。</p>
<p>当客户端在 onServiceConnected() 回调中收到 IBinder 时，它必须调用 YourServiceInterface.Stub.asInterface(service) 以将返回的参数转换成 YourServiceInterface 类型。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">IRemoteService mIRemoteService;</div><div class="line">private ServiceConnection mConnection = new ServiceConnection() &#123;</div><div class="line">    // Called when the connection with the service is established</div><div class="line">    public void onServiceConnected(ComponentName className, IBinder service) &#123;</div><div class="line">        // Following the example above for an AIDL interface,</div><div class="line">        // this gets an instance of the IRemoteInterface, which we can use to call on the service</div><div class="line">        mIRemoteService = IRemoteService.Stub.asInterface(service);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Called when the connection with the service disconnects unexpectedly</div><div class="line">    public void onServiceDisconnected(ComponentName className) &#123;</div><div class="line">        Log.e(TAG, &quot;Service has unexpectedly disconnected&quot;);</div><div class="line">        mIRemoteService = null;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="通过IPC传递对象"><a href="#通过IPC传递对象" class="headerlink" title="通过IPC传递对象"></a>通过IPC传递对象</h2><p>通过IPC接口把某个类从一个进程发送到另一进程是可以实现的。不过必须要确保该类的代码对IPC通信的另一端可用，并且该类必须支持Parcelable接口。支持Parcelable接口是很重要的，Android系统可通过它将对象分解成可编组到各进程的原语。</p>
<blockquote>
<p>.aidl与C语言中的头文件类似，编译的时候不用添加.aidl文件，其并未被编译。</p>
</blockquote>
<p>以下这个 Rect.aidl 文件可创建一个可打包的 Rect 类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">package android.graphics;</div><div class="line"></div><div class="line">// Declare Rect so AIDL can find it and knows that it implements</div><div class="line">// the parcelable protocol.</div><div class="line">parcelable Rect;</div></pre></td></tr></table></figure></p>
<p>Rect类实现Parcelable接口实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">import android.os.Parcel;</div><div class="line">import android.os.Parcelable;</div><div class="line"></div><div class="line">public final class Rect implements Parcelable &#123;</div><div class="line">    public int left;</div><div class="line">    public int top;</div><div class="line">    public int right;</div><div class="line">    public int bottom;</div><div class="line"></div><div class="line">    public static final Parcelable.Creator&lt;Rect&gt; CREATOR = new</div><div class="line">Parcelable.Creator&lt;Rect&gt;() &#123;</div><div class="line">        public Rect createFromParcel(Parcel in) &#123;</div><div class="line">            return new Rect(in);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Rect[] newArray(int size) &#123;</div><div class="line">            return new Rect[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    public Rect() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Rect(Parcel in) &#123;</div><div class="line">        readFromParcel(in);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void writeToParcel(Parcel out) &#123;</div><div class="line">        out.writeInt(left);</div><div class="line">        out.writeInt(top);</div><div class="line">        out.writeInt(right);</div><div class="line">        out.writeInt(bottom);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void readFromParcel(Parcel in) &#123;</div><div class="line">        left = in.readInt();</div><div class="line">        top = in.readInt();</div><div class="line">        right = in.readInt();</div><div class="line">        bottom = in.readInt();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="调用IPC方法"><a href="#调用IPC方法" class="headerlink" title="调用IPC方法"></a>调用IPC方法</h2><p>调用类必须执行以下步骤，才能调用使用AIDL定义的远程接口：</p>
<ol>
<li>在项目src/目录中加入.aidl文件（Android Studio已默认创建）。</li>
<li>声明一个IBinder接口实例（基于AIDL生成）。</li>
<li>实现ServiceConnection</li>
<li>调用Context.bindService()，以传入ServiceConnection的实现。</li>
<li>再实现的onServiceConnected()中，将收到一个名为service的IBinder实例。调用YourInt<a href="">erfaceName.Stub.asInterface((IBinder)service)</a>，以将返回的参数转换为 YourInterface 类型。</li>
<li>调用再接口上定义的方法。注意要始终捕获DeadObjectException异常，他们是连接中断时引发的，这也是远程方法引起的唯一异常。</li>
<li>如需断开连接，需要在接口中调用Conext.unBindService()。</li>
</ol>
<p>有关调用 IPC 服务的几点说明：</p>
<ul>
<li>对象是跨进程计数的引用。</li>
<li>可以将匿名对象作为方法参数发送。</li>
</ul>
<p>demo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div></pre></td><td class="code"><pre><div class="line">public static class Binding extends Activity &#123;</div><div class="line">    /** The primary interface we will be calling on the service. */</div><div class="line">    IRemoteService mService = null;</div><div class="line">    /** Another interface we use on the service. */</div><div class="line">    ISecondary mSecondaryService = null;</div><div class="line"></div><div class="line">    Button mKillButton;</div><div class="line">    TextView mCallbackText;</div><div class="line"></div><div class="line">    private boolean mIsBound;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Standard initialization of this activity.  Set up the UI, then wait</div><div class="line">     * for the user to poke it before doing anything.</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        setContentView(R.layout.remote_service_binding);</div><div class="line"></div><div class="line">        // Watch for button clicks.</div><div class="line">        Button button = (Button)findViewById(R.id.bind);</div><div class="line">        button.setOnClickListener(mBindListener);</div><div class="line">        button = (Button)findViewById(R.id.unbind);</div><div class="line">        button.setOnClickListener(mUnbindListener);</div><div class="line">        mKillButton = (Button)findViewById(R.id.kill);</div><div class="line">        mKillButton.setOnClickListener(mKillListener);</div><div class="line">        mKillButton.setEnabled(false);</div><div class="line"></div><div class="line">        mCallbackText = (TextView)findViewById(R.id.callback);</div><div class="line">        mCallbackText.setText(&quot;Not attached.&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Class for interacting with the main interface of the service.</div><div class="line">     */</div><div class="line">    private ServiceConnection mConnection = new ServiceConnection() &#123;</div><div class="line">        public void onServiceConnected(ComponentName className,</div><div class="line">                IBinder service) &#123;</div><div class="line">            // This is called when the connection with the service has been</div><div class="line">            // established, giving us the service object we can use to</div><div class="line">            // interact with the service.  We are communicating with our</div><div class="line">            // service through an IDL interface, so get a client-side</div><div class="line">            // representation of that from the raw service object.</div><div class="line">            mService = IRemoteService.Stub.asInterface(service);</div><div class="line">            mKillButton.setEnabled(true);</div><div class="line">            mCallbackText.setText(&quot;Attached.&quot;);</div><div class="line"></div><div class="line">            // We want to monitor the service for as long as we are</div><div class="line">            // connected to it.</div><div class="line">            try &#123;</div><div class="line">                mService.registerCallback(mCallback);</div><div class="line">            &#125; catch (RemoteException e) &#123;</div><div class="line">                // In this case the service has crashed before we could even</div><div class="line">                // do anything with it; we can count on soon being</div><div class="line">                // disconnected (and then reconnected if it can be restarted)</div><div class="line">                // so there is no need to do anything here.</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // As part of the sample, tell the user what happened.</div><div class="line">            Toast.makeText(Binding.this, R.string.remote_service_connected,</div><div class="line">                    Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void onServiceDisconnected(ComponentName className) &#123;</div><div class="line">            // This is called when the connection with the service has been</div><div class="line">            // unexpectedly disconnected -- that is, its process crashed.</div><div class="line">            mService = null;</div><div class="line">            mKillButton.setEnabled(false);</div><div class="line">            mCallbackText.setText(&quot;Disconnected.&quot;);</div><div class="line"></div><div class="line">            // As part of the sample, tell the user what happened.</div><div class="line">            Toast.makeText(Binding.this, R.string.remote_service_disconnected,</div><div class="line">                    Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Class for interacting with the secondary interface of the service.</div><div class="line">     */</div><div class="line">    private ServiceConnection mSecondaryConnection = new ServiceConnection() &#123;</div><div class="line">        public void onServiceConnected(ComponentName className,</div><div class="line">                IBinder service) &#123;</div><div class="line">            // Connecting to a secondary interface is the same as any</div><div class="line">            // other interface.</div><div class="line">            mSecondaryService = ISecondary.Stub.asInterface(service);</div><div class="line">            mKillButton.setEnabled(true);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void onServiceDisconnected(ComponentName className) &#123;</div><div class="line">            mSecondaryService = null;</div><div class="line">            mKillButton.setEnabled(false);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    private OnClickListener mBindListener = new OnClickListener() &#123;</div><div class="line">        public void onClick(View v) &#123;</div><div class="line">            // Establish a couple connections with the service, binding</div><div class="line">            // by interface names.  This allows other applications to be</div><div class="line">            // installed that replace the remote service by implementing</div><div class="line">            // the same interface.</div><div class="line">            Intent intent = new Intent(Binding.this, RemoteService.class);</div><div class="line">            intent.setAction(IRemoteService.class.getName());</div><div class="line">            bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">            intent.setAction(ISecondary.class.getName());</div><div class="line">            bindService(intent, mSecondaryConnection, Context.BIND_AUTO_CREATE);</div><div class="line">            mIsBound = true;</div><div class="line">            mCallbackText.setText(&quot;Binding.&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    private OnClickListener mUnbindListener = new OnClickListener() &#123;</div><div class="line">        public void onClick(View v) &#123;</div><div class="line">            if (mIsBound) &#123;</div><div class="line">                // If we have received the service, and hence registered with</div><div class="line">                // it, then now is the time to unregister.</div><div class="line">                if (mService != null) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        mService.unregisterCallback(mCallback);</div><div class="line">                    &#125; catch (RemoteException e) &#123;</div><div class="line">                        // There is nothing special we need to do if the service</div><div class="line">                        // has crashed.</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                // Detach our existing connection.</div><div class="line">                unbindService(mConnection);</div><div class="line">                unbindService(mSecondaryConnection);</div><div class="line">                mKillButton.setEnabled(false);</div><div class="line">                mIsBound = false;</div><div class="line">                mCallbackText.setText(&quot;Unbinding.&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    private OnClickListener mKillListener = new OnClickListener() &#123;</div><div class="line">        public void onClick(View v) &#123;</div><div class="line">            // To kill the process hosting our service, we need to know its</div><div class="line">            // PID.  Conveniently our service has a call that will return</div><div class="line">            // to us that information.</div><div class="line">            if (mSecondaryService != null) &#123;</div><div class="line">                try &#123;</div><div class="line">                    int pid = mSecondaryService.getPid();</div><div class="line">                    // Note that, though this API allows us to request to</div><div class="line">                    // kill any process based on its PID, the kernel will</div><div class="line">                    // still impose standard restrictions on which PIDs you</div><div class="line">                    // are actually able to kill.  Typically this means only</div><div class="line">                    // the process running your application and any additional</div><div class="line">                    // processes created by that app as shown here; packages</div><div class="line">                    // sharing a common UID will also be able to kill each</div><div class="line">                    // other&apos;s processes.</div><div class="line">                    Process.killProcess(pid);</div><div class="line">                    mCallbackText.setText(&quot;Killed service process.&quot;);</div><div class="line">                &#125; catch (RemoteException ex) &#123;</div><div class="line">                    // Recover gracefully from the process hosting the</div><div class="line">                    // server dying.</div><div class="line">                    // Just for purposes of the sample, put up a notification.</div><div class="line">                    Toast.makeText(Binding.this,</div><div class="line">                            R.string.remote_call_failed,</div><div class="line">                            Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    // ----------------------------------------------------------------------</div><div class="line">    // Code showing how to deal with callbacks.</div><div class="line">    // ----------------------------------------------------------------------</div><div class="line"></div><div class="line">    /**</div><div class="line">     * This implementation is used to receive callbacks from the remote</div><div class="line">     * service.</div><div class="line">     */</div><div class="line">    private IRemoteServiceCallback mCallback = new IRemoteServiceCallback.Stub() &#123;</div><div class="line">        /**</div><div class="line">         * This is called by the remote service regularly to tell us about</div><div class="line">         * new values.  Note that IPC calls are dispatched through a thread</div><div class="line">         * pool running in each process, so the code executing here will</div><div class="line">         * NOT be running in our main thread like most other things -- so,</div><div class="line">         * to update the UI, we need to use a Handler to hop over there.</div><div class="line">         */</div><div class="line">        public void valueChanged(int value) &#123;</div><div class="line">            mHandler.sendMessage(mHandler.obtainMessage(BUMP_MSG, value, 0));</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    private static final int BUMP_MSG = 1;</div><div class="line"></div><div class="line">    private Handler mHandler = new Handler() &#123;</div><div class="line">        @Override public void handleMessage(Message msg) &#123;</div><div class="line">            switch (msg.what) &#123;</div><div class="line">                case BUMP_MSG:</div><div class="line">                    mCallbackText.setText(&quot;Received from service: &quot; + msg.arg1);</div><div class="line">                    break;</div><div class="line">                default:</div><div class="line">                    super.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-接口定义语言-AIDL&quot;&gt;&lt;a href=&quot;#Android-接口定义语言-AIDL&quot; class=&quot;headerlink&quot; title=&quot;Android 接口定义语言 (AIDL)&quot;&gt;&lt;/a&gt;Android 接口定义语言 (AIDL)&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="Android" scheme="http://linzhs.cm/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android的异步消息处理机制</title>
    <link href="http://linzhs.cm/2017/05/26/android-message/"/>
    <id>http://linzhs.cm/2017/05/26/android-message/</id>
    <published>2017-05-25T18:15:40.000Z</published>
    <updated>2017-05-25T18:15:40.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android的异步消息处理机制"><a href="#Android的异步消息处理机制" class="headerlink" title="Android的异步消息处理机制"></a>Android的异步消息处理机制</h1><h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>Android中的异步消息处理机制由4个部分组成：Message、Handler、MessageQueue、Looper。</p>
<ol>
<li><p>Message</p>
<p> Message是在线程之间传递的消息，它可以在内部携带少量的信息，用于在不同线程之间交换数据。</p>
</li>
<li><p>Handler</p>
<p> Handler（处理者）主要是用于发送和处理信息的。发送一般是使用Handler的sendMessage方法，而发出去的信息经过一些地处理后，最终会传递到Handler的handleMessage方法中。</p>
</li>
<li><p>MessageQueue</p>
<p> MessageQueue（消息队列）主要用于存放所有通过Handler发送出来的信息。这部分信息会一直存在于消息队列中等待被处理。每个线程中只会有一个MessageQueue对象。</p>
</li>
<li><p>Looper</p>
<p> Looper是每个线程中的MessageQueue管家，调用Looper的loop方法后，就会进入到一个无线循环当中，然后每当发现MessageQueue中存在信息，就会将队列头部的信息取出，并传递给Handler的handleMessage方法。每个线程只有一个Looper对象。</p>
</li>
</ol>
<p>demo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">pubblic class MainActivity extends AppCompatActivity &#123;</div><div class="line">    public static final int UPDATE_TEXT = 1;</div><div class="line">    </div><div class="line">    private Handler handler = new Handler() &#123;</div><div class="line">        @Override</div><div class="line">        public void handleMessage(Message msg) &#123;</div><div class="line">            switch (msg.what) &#123;</div><div class="line">                case UPDATE_TEXT:</div><div class="line">                    // 刷新UI</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override </div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        switch (v.getId()) &#123;</div><div class="line">            case R.id.test_button:</div><div class="line">                new Thread(new Runnable() &#123;</div><div class="line">                    @Overrride</div><div class="line">                    public void run() &#123;</div><div class="line">                        Message message = new Message();</div><div class="line">                        message.what = UPDATE_TEXT;</div><div class="line">                        handler.sendMessage(message);</div><div class="line">                    &#125;</div><div class="line">                &#125;).start();</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2><p>为了更好地在子线程中对UI主线程进行操作，Android提供了一个异步的工具–AsyncTask，其能轻易地从子线程切换到主线程。</p>
<p>AsyncTask是一个抽象类，要使用必须是集成并且实现抽象方法。AsyncTask类指定了三个参数，结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public abstract class AsyncTask&lt;Params, Progress, Result&gt; &#123; ... &#125;</div></pre></td></tr></table></figure></p>
<p>参数的作用：</p>
<ul>
<li><p>Params </p>
<p>  在执行AsyncTask时需要传入的参数，可用于在后台任务中使用。</p>
</li>
<li><p>Progress</p>
<p>  在后台任务执行时，如果需要在界面上显示当前的进度，则使用这个泛型参数来作为进度单位。</p>
</li>
<li><p>Result</p>
<p>  当任务执行完毕后，如果需要对结果进行返回，则使用这里的指定泛型作为返回类型。</p>
</li>
</ul>
<p>demo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public abstract class AsyncTask&lt;Void, Integer, Boolean&gt; &#123; ... &#125;</div></pre></td></tr></table></figure></p>
<p>继承AsyncTask经常用到的重写方法有：</p>
<ol>
<li><p>onPreExecute()</p>
<p> 这个方法在后台任务开始执行之前调用，用于进行一些界面上的初始化操作。</p>
</li>
<li><p>doInBackground(Params…)</p>
<p> 这个方法的所有代码都在子线程中运行，可以用来执行所有耗时任务。任务一旦完成就可以通过return语句来将任务的执行结果返回，如果AsyncTask的第三个参数为Void，就可以不返回任务的执行结果。注意，此方法在子线程中运行，不可以刷新UI线程，应该调用publishProgress方法触发onProgressUpdate()方法来完成。</p>
</li>
<li><p>onProgressUpdate(Progress…)</p>
<p> 当在后台任务中调用publishProgress()方法后，onProgressUpdate方法很快就会被调用，该方法中携带的参数就是在后台任务中传递过来的。在这个方法中可以对UI进行操作，利用参数中的数值就可以对界面元素进行相应的更新。</p>
</li>
<li><p>onPostExecute(Result)</p>
<p> 当后台任务执行完毕并通过return语句进行返回时，这个方法就很快被调用。返回的数据会作为参数传递到此方法中，可以利用返回的数据来进行一些UI操作，比如提醒任务执行的结果，以及关闭进度对话框等。</p>
</li>
</ol>
<p>demo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">class DownloadTask extends AsyncTask&lt;Void, Integer, Boolean&gt; &#123;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onPreExecute() &#123;</div><div class="line">        progressDialog.show();//显示进度对话框</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected Boolean doInBackground(Void... params) &#123;</div><div class="line">        try &#123;</div><div class="line">            while (true) &#123;</div><div class="line">                int downloadPercent = doDownload();</div><div class="line">                pubulishProgress(downloadPercent);//触发onProgressUpdate</div><div class="line">                if (downloadPercent &gt;= 100) &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onProgressUpdate(Integer... values) &#123;</div><div class="line">        //在这里更新下载进度</div><div class="line">        progressDialog.setMessage(&quot;Downloaded &quot; + values[0] + &quot;%&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onPostExecute(Boolean result) &#123;</div><div class="line">        progressDialog.dismiss();//关闭进度对话框</div><div class="line">        //显示结果</div><div class="line">        if (result) &#123;</div><div class="line">            Toast.makeText(context, &quot;Download succeeded&quot;, Toast.LENGTH_SHORT).show():</div><div class="line">        &#125; else &#123;</div><div class="line">            Toast.makeText(context, &quot;Download failed&quot;, Toast.LENGTH_SHORT).show():</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new DownloadTask().execute();</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android的异步消息处理机制&quot;&gt;&lt;a href=&quot;#Android的异步消息处理机制&quot; class=&quot;headerlink&quot; title=&quot;Android的异步消息处理机制&quot;&gt;&lt;/a&gt;Android的异步消息处理机制&lt;/h1&gt;&lt;h2 id=&quot;Handler&quot;&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://linzhs.cm/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android的Service</title>
    <link href="http://linzhs.cm/2017/05/26/android-service/"/>
    <id>http://linzhs.cm/2017/05/26/android-service/</id>
    <published>2017-05-25T18:14:48.000Z</published>
    <updated>2017-05-25T18:14:48.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android的Service"><a href="#Android的Service" class="headerlink" title="Android的Service"></a>Android的Service</h1><p>Service 是一个可以在后台执行长时间运行操作而不提供用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信(IPC)。例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行。</p>
<p>服务基本上分为两种形式：</p>
<ol>
<li><p>启动</p>
<p> 当应用组件（如 Activity）通过调用<a href="">startService()</a>启动服务时，服务即处于“启动”状态。一旦启动，服务即可在后台无限期运行，即使启动服务的组件已被销毁也不受影响。已启动的服务通常是执行单一操作，而且不会将结果返回给调用方。例如，它可能通过网络下载或上传文件。操作完成后，服务会自行停止运行。</p>
</li>
<li><p>绑定</p>
<p> 当应用组件通过调用 <a href="">bindService()</a> 绑定到服务时，服务即处于“绑定”状态。绑定服务提供了一个客户端-服务器接口，允许组件与服务进行交互、发送请求、获取结果，甚至是利用进程间通信 (IPC) 跨进程执行这些操作。 仅当与另一个应用组件绑定时，绑定服务才会运行。 多个组件可以同时绑定到该服务，但全部取消绑定后，该服务即会被销毁。</p>
</li>
</ol>
<p>一个服务可以同时以这两种方式运行，也就是既可以启动服务（不手动关闭就限期运行），也允许绑定。问题只是在于是否实现了一组回调方法：<a href="">onStartCommand()</a>（允许组件启动服务）和 <a href="">onBind()</a>（允许绑定服务）。</p>
<p>不管应用是处于启动状态还是绑定状态，或者是处于启动且绑定状态，任何应用组件均可以使用Activity那样通过调用Intent来使用服务，即使此服务是来自另一个应用。若是服务不想被其他应用访问，可知在AndroidManifest.xml中将服务声明为私有服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;manifest ... &gt;</div><div class="line">  ...</div><div class="line">  &lt;application ... &gt;</div><div class="line">      &lt;service android:name=&quot;.ExampleService&quot;</div><div class="line">        android:enabled=&quot;true&quot;</div><div class="line">        android:exported=&quot;false&quot;/&gt;</div><div class="line">      ...</div><div class="line">  &lt;/application&gt;</div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：服务默认是托管在主线程的，它既不创建自己的线程，也不在单独的进程中运行（除非另行制定）。若是有太占用时间的事务要完成，应该在服务中创建子线程来完成，从而降低ANR的风险，主线程扔可以与Activity交互。</p>
</blockquote>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>要创建服务，必须使用或者创建Service的子类。定制service子类的时候，需要去实现一些回调方法，以处理服务生命周期中某些关键操作。应重写的重要回调方法有：</p>
<ol>
<li><p><a href="">onStartCommand()</a></p>
<p> 当另一个组件（如 Activity）通过调用<a href="">startService()</a>请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。如果实现了此方法，则在服务工作完成后，需要自己在此服务中调用 stopSelf() 或在服务外的地方调用 stopService() 来停止服务。绑定的服务无需手动停止服务。</p>
</li>
<li><p><a href="">onBind</a></p>
<p> 这个方法是Service类中唯一一个抽象方法。当另一个组件想通过调用<a href="">bindService</a>与绑定绑定（例如执行RPC）时，系统就会调用此方法。此方法要求返回一个IBinder接口，供客户端与服务进行通信。此方法是抽象方法，是一定要重写的，但是不绑定的话，返回null就可以了。</p>
</li>
<li><p><a href="">onCreate</a></p>
<p> 首次创建服务时，系统将在<a href="">onStartCommand</a>或<a href="">onBind</a>前调用此方法来执行服务的创建。如果服务已在运行，则不会再被调用。</p>
</li>
<li><p><a href="">onDestroy</a></p>
<p> 当服务不再使用且将被销毁时，系统将会调用此方法。服务应该实现此方法来清理所有资源，如线程、注册的侦听器、接收器等。 这是服务接收的最后一个调用。</p>
</li>
</ol>
<p>如果以[startCommand()]方式启动服务，则服务将一直运行，直到服务本身使用stopSelf()自行停止运行或者其他组件使用<a href="">stopService()</a>停止。</p>
<p>如果以<a href="">bindService()</a>的方式创建服务，并且未调用<a href="">startCommand()</a>，则服务只会在该组件与其绑定时运行。一旦该服务与所有客户端之间的绑定全部取消，系统便会销毁它。</p>
<p>仅当内存过低且必须回收系统资源以供具有用户焦点的 Activity 使用时，Android 系统才会强制停止服务。如果将服务绑定到具有用户焦点的Activity，则它不太可能会终止；如果将服务声明为==在前台运行==），则它几乎永远不会终止。或者，如果服务已启动并要长时间运行，则系统会随着时间的推移降低服务在后台任务列表中的位置，而服务也将随之变得非常容易被终止；如果服务是启动服务，则您必须将其设计为能够妥善处理系统对它的重启。 如果系统终止服务，那么一旦资源变得再次可用，系统便会重启服务（不过这还取决于从 <a href="">onStartCommand()</a> 返回的值。</p>
<blockquote>
<p>为了确保应用的安全性，要始终使用显式Intent启动或绑定Service，且不要为服务声明inten过滤器，启动哪个服务存在一定的不确定性，而如果对这种不确定性的考虑非常有必要，则可为服务提供Intent 过滤器并从 Intent 中排除相应的组件名称，但随后必须使用 setPackage() 方法设置 Intent 的软件包，这样可以充分消除目标服务的不确定性。</p>
</blockquote>
<h2 id="创建启动服务"><a href="#创建启动服务" class="headerlink" title="创建启动服务"></a>创建启动服务</h2><p>由<a href="">startService()</a>方法来启动服务，系统会回调<a href="">onStartCommand()</a>方法。服务通过该方式启动后，其生命周期是独立于启动它的组件的，并且可以无限期地在后台运行，即使启动它的组件已被销毁。因此，如果要终止该服务，则需要自身调用[stopSelf()]方法或者其他组件调用[stopService()]来停止。</p>
<p>应用组件（如 Activity）可以通过调用 startService() 方法并传递 Intent 对象（指定服务并包含待使用服务的所有数据）来启动服务。服务通过 onStartCommand() 方法接收此 Intent。</p>
<p>例如，假设某 Activity 需要将一些数据保存到在线数据库中。该 Activity 可以启动一个协同服务，并通过向 startService() 传递一个 Intent，为该服务提供要保存的数据。服务通过 onStartCommand() 接收 Intent，连接到互联网并执行数据库事务。事务完成之后，服务会自行停止运行并随即被销毁。</p>
<h3 id="拓展IntentService类"><a href="#拓展IntentService类" class="headerlink" title="拓展IntentService类"></a>拓展IntentService类</h3><p>IntentService是Service的一个子类，也是抽象类，在实现Service基础上添加了一个onHnaldeIntent抽象方法，其是<a href="">startService()</a>启动的，<a href="">onBind()</a>方法返回null。</p>
<p>如果不要求服务同时处理多个请求，这是最好的选择。只要<a href="">onHandleIntent()</a>方法，该方法接收一个请求的Intent。此类的优点是不用关心启动服务后怎么去关闭它，onHandeIntent方法执行完成后服务会自动停止。</p>
<p>IntentService执行一下操作：</p>
<ul>
<li>创建默认的工作线程，用于在应用的主线程外执行传递给<a href="">onStartCommand()</a>的所有Intent。</li>
<li>创建工作队列，用于将 Intent 逐一传递给 <a href="">onHandleIntent()</a> 实现，这您就永远不必担心多线程问题。</li>
<li>在处理完所有启动请求后停止服务，因此永远不必调用 <a href="">stopSelf()</a>。</li>
<li>提供 <a href="">onBind()</a> 的默认实现（返回 null）。</li>
<li>提供 <a href="">onStartCommand()</a> 的默认实现，可将 Intent 依次发送到工作队列和 <a href="">onHandleIntent()</a> 实现。</li>
</ul>
<p>demo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class HelloIntentService extends IntentService &#123;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * A constructor is required, and must call the super IntentService(String)</div><div class="line">   * constructor with a name for the worker thread.</div><div class="line">   */</div><div class="line">  public HelloIntentService() &#123;</div><div class="line">      super(&quot;HelloIntentService&quot;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * The IntentService calls this method from the default worker thread with</div><div class="line">   * the intent that started the service. When this method returns, IntentService</div><div class="line">   * stops the service, as appropriate.</div><div class="line">   */</div><div class="line">  @Override</div><div class="line">  protected void onHandleIntent(Intent intent) &#123;</div><div class="line">      // Normally we would do some work here, like download a file.</div><div class="line">      // For our sample, we just sleep for 5 seconds.</div><div class="line">      try &#123;</div><div class="line">          Thread.sleep(5000);</div><div class="line">      &#125; catch (InterruptedException e) &#123;</div><div class="line">          // Restore interrupt status.</div><div class="line">          Thread.currentThread().interrupt();</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>基本的IntentService只需要实现一个构造方法和<a href="">onHandleIntent()</a>方法，若是要实现onCreate()、onStartCommand()等方法，要确保调用超类的实现，这样才能使IntentService有效处理工作线程的生命周期。</p>
<p>demo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public int onStartCommand(Intent intent, int flags, int startId) &#123;</div><div class="line">    Toast.makeText(this, &quot;service starting&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">    return super.onStartCommand(intent,flags,startId);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除 <a href="">onHandleIntent()</a> 之外，您无需从中调用超类的唯一方法就是 <a href="">onBind()</a>（仅当服务允许绑定时，才需要实现该方法）。</p>
<h3 id="拓展Service类"><a href="#拓展Service类" class="headerlink" title="拓展Service类"></a>拓展Service类</h3><p>使用 IntentService 显著简化了启动服务的实现。但是，若要求服务执行多线程（而不是通过工作队列处理启动请求），则可扩展 Service 类来处理每个 Intent。</p>
<p>为了便于比较，以下提供了 Service 类实现的代码示例，该类执行的工作与上述使用 IntentService 的示例完全相同。也就是说，对于每个启动请求，它均使用工作线程执行作业，且每次仅处理一个请求，也就是异步处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">public class HelloService extends Service &#123;</div><div class="line">  private Looper mServiceLooper;</div><div class="line">  private ServiceHandler mServiceHandler;</div><div class="line"></div><div class="line">  // Handler that receives messages from the thread</div><div class="line">  private final class ServiceHandler extends Handler &#123;</div><div class="line">      public ServiceHandler(Looper looper) &#123;</div><div class="line">          super(looper);</div><div class="line">      &#125;</div><div class="line">      @Override</div><div class="line">      public void handleMessage(Message msg) &#123;</div><div class="line">          // Normally we would do some work here, like download a file.</div><div class="line">          // For our sample, we just sleep for 5 seconds.</div><div class="line">          try &#123;</div><div class="line">              Thread.sleep(5000);</div><div class="line">          &#125; catch (InterruptedException e) &#123;</div><div class="line">              // Restore interrupt status.</div><div class="line">              Thread.currentThread().interrupt();</div><div class="line">          &#125;</div><div class="line">          // Stop the service using the startId, so that we don&apos;t stop</div><div class="line">          // the service in the middle of handling another job</div><div class="line">          stopSelf(msg.arg1);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void onCreate() &#123;</div><div class="line">    // Start up the thread running the service.  Note that we create a</div><div class="line">    // separate thread because the service normally runs in the process&apos;s</div><div class="line">    // main thread, which we don&apos;t want to block.  We also make it</div><div class="line">    // background priority so CPU-intensive work will not disrupt our UI.</div><div class="line">    HandlerThread thread = new HandlerThread(&quot;ServiceStartArguments&quot;,</div><div class="line">            Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">    thread.start();</div><div class="line"></div><div class="line">    // Get the HandlerThread&apos;s Looper and use it for our Handler</div><div class="line">    mServiceLooper = thread.getLooper();</div><div class="line">    mServiceHandler = new ServiceHandler(mServiceLooper);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public int onStartCommand(Intent intent, int flags, int startId) &#123;</div><div class="line">      Toast.makeText(this, &quot;service starting&quot;, Toast.LENGTH_SHORT).show();</div><div class="line"></div><div class="line">      // For each start request, send a message to start a job and deliver the</div><div class="line">      // start ID so we know which request we&apos;re stopping when we finish the job</div><div class="line">      Message msg = mServiceHandler.obtainMessage();</div><div class="line">      msg.arg1 = startId;</div><div class="line">      mServiceHandler.sendMessage(msg);</div><div class="line"></div><div class="line">      // If we get killed, after returning from here, restart</div><div class="line">      return START_STICKY;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public IBinder onBind(Intent intent) &#123;</div><div class="line">      // We don&apos;t provide binding, so return null</div><div class="line">      return null;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void onDestroy() &#123;</div><div class="line">    Toast.makeText(this, &quot;service done&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>要注意的是，onStartCommand() 方法必须返回整型数。整型数是一个值，用于描述系统应该如何在服务终止的情况下继续运行服务，而IntentService做了默认的实现。从onStartCommand()返回的值必须是以下常量之一：</p>
<ul>
<li><p>START_NOT_STICKY</p>
<p>  如果系统在 onStartCommand() 返回后终止服务，则除非有挂起 Intent 要传递，否则系统不会重建服务。这是最安全的选项，可以避免在不必要时以及应用能够轻松重启所有未完成的作业时运行服务。</p>
</li>
<li><p>START_STICKY</p>
<p>  如果系统在 onStartCommand() 返回后终止服务，则会重建服务并调用 onStartCommand()，但不会重新传递最后一个 Intent。相反，除非有挂起 Intent 要启动服务（在这种情况下，将传递这些 Intent ），否则系统会通过空 Intent 调用 onStartCommand()。这适用于不执行命令、但无限期运行并等待作业的媒体播放器（或类似服务）。</p>
</li>
<li><p>START_REDELIVER_INTENT</p>
<p>  如果系统在 onStartCommand() 返回后终止服务，则会重建服务，并通过传递给服务的最后一个 Intent 调用 onStartCommand()。任何挂起 Intent 均依次传递。这适用于主动执行应该立即恢复的作业（例如下载文件）的服务。</p>
</li>
</ul>
<p>如果服务同时处理多个 onStartCommand() 请求，您不应在处理完一个启动请求之后停止服务，因您可能已经收到了新的启动请求（在第一个请求结束时停止服务会终止第二个请求）。为了避免这一问题，可以使用 stopSelf(int) 确保服务停止请求始终基于最近的启动请求。也就说，在调用 stopSelf(int) 时，传递与停止请求的 ID 对应的启动请求的 ID（传递给 onStartCommand() 的 startId）。然后，如果在能够调用 stopSelf(int) 之前服务收到了新的启动请求，ID 就不匹配，服务也就不会停止。</p>
<h2 id="创建绑定服务"><a href="#创建绑定服务" class="headerlink" title="创建绑定服务"></a>创建绑定服务</h2><p>绑定服务允许应用组件通过调用 bindService() 与其绑定，以便创建长期连接（通常不允许组件通过调用 startService() 来启动它）。</p>
<p>如需与 Activity 和其他应用组件中的服务进行交互，或者需要通过进程间通信 (IPC) 向其他应用公开某些应用功能，则应创建绑定服务。</p>
<p>要创建绑定服务，必须实现 onBind() 回调方法以返回 IBinder，用于定义与服务通信的接口。然后，其他应用组件可以调用 bindService() 来检索该接口，并开始对服务调用方法。服务只用于与其绑定的应用组件，因此如果没有组件绑定到服务，则系统会销毁服务（不必按通过 onStartCommand() 启动的服务那样来停止绑定服务）。</p>
<p>要创建绑定服务，首先必须定义指定客户端如何与服务通信的接口。 服务与客户端之间的这个接口必须是 IBinder 的实现，并且服务必须从 onBind() 回调方法返回它。一旦客户端收到 IBinder，即可开始通过该接口与服务进行交互。</p>
<p>多个客户端可以同时绑定到服务。客户端完成与服务的交互后，会调用 unbindService() 取消绑定。一旦没有客户端绑定到该服务，系统就会销毁它。</p>
<p>客户端可通过调用 <a href="">bindService()</a> 绑定到服务。调用时，它必须提供 <a href="">ServiceConnection</a> 的实现，后者会监控与服务的连接。<a href="">bindService()</a> 方法会立即无值返回，但当 Android 系统创建客户端与服务之间的连接时，会对 <a href="">ServiceConnection</a> 调用 <a href="">onServiceConnected()</a>，向客户端传递用来与服务通信的 IBinder。</p>
<p>多个客户端可同时连接到一个服务。不过，只有在第一个客户端绑定时，系统才会调用服务的 <a href="">onBind()</a> 方法来检索 <a href="">IBinder</a>。系统随后无需再次调用 <a href="">onBind()</a>，便可将同一 <a href="">IBinder</a> 传递至任何其他绑定的客户端。</p>
<p>创建提供绑定的服务时，必须提供 IBinder，用以提供客户端用来与服务进行交互的编程接口。可以通过三种方法定义接口：</p>
<ol>
<li><p>扩展 Binder 类</p>
<p> 如果服务是供自有应用专用，并且在与客户端相同的进程中运行（常见情况），则应通过扩展 Binder 类并从 onBind() 返回它的一个实例来创建接口。客户端收到 Binder 后，可利用它直接访问 Binder 实现中乃至 Service 中可用的公共方法。</p>
<p> 如果服务只是自有应用的后台工作线程，则优先采用这种方法。 不以这种方式创建接口的唯一原因是，服务被其他应用或不同的进程占用。</p>
</li>
<li><p>使用 Messenger</p>
<p> 如需让接口跨不同的进程工作，则可使用 Messenger 为服务创建接口。服务可以这种方式定义对应于不同类型 Message 对象的 Handler。此 Handler 是 Messenger 的基础，后者随后可与客户端分享一个 IBinder，从而让客户端能利用 Message 对象向服务发送命令。此外，客户端还可定义自有 Messenger，以便服务回传消息。</p>
<p> 这是执行进程间通信 (IPC) 的最简单方法，因为 Messenger 会在单一线程中创建包含所有请求的队列，这样就不必对服务进行线程安全设计。</p>
</li>
<li><p>使用 AIDL</p>
<p> AIDL（Android 接口定义语言）执行所有将对象分解成原语的工作，操作系统可以识别这些原语并将它们编组到各进程中，以执行 IPC。 之前采用 Messenger 的方法实际上是以 AIDL 作为其底层结构。 如上所述，Messenger 会在单一线程中创建包含所有客户端请求的队列，以便服务一次接收一个请求。 不过，如果您想让服务同时处理多个请求，则可直接使用 AIDL。 在此情况下，服务必须具备多线程处理能力，并采用线程安全式设计。</p>
<p> 如需直接使用 AIDL，必须创建一个定义编程接口的 .aidl 文件。Android SDK 工具利用该文件生成一个实现接口并处理 IPC 的抽象类，随后可在服务内对其进行扩展。</p>
</li>
</ol>
<blockquote>
<p>注意：大多数应用“都不会”使用 AIDL 来创建绑定服务，因为它可能要求具备多线程处理能力，并可能导致实现的复杂性增加。因此，AIDL 并不适合大多数应用。</p>
</blockquote>
<h3 id="拓展-Binder-类"><a href="#拓展-Binder-类" class="headerlink" title="拓展 Binder 类"></a>拓展 Binder 类</h3><p>若服务仅供本地应用使用，不需要跨进程工作，则可以直接实现Binder类，让自己的客户端通过该类来访问服务中的公共方法。</p>
<blockquote>
<p>注意：此方法只有在客户端和服务位于同一应用和进程内的这一常见情况才有效。例如，对于需要将Activity绑定在后台播放音乐的自由服务的音乐应用，此方法非常有效。</p>
</blockquote>
<p>一下是具体的设置方法：</p>
<ol>
<li><p>在服务中，创建一个可满足下列任一要求的Binder实例：</p>
<ul>
<li>包含客户端可调用的公共方法</li>
<li>返回当前Service实例，其中包含客户端可调用的公共方法</li>
<li>或返回服务承载的其他类的实例，其中包含客户端可调用的公共方法</li>
</ul>
</li>
<li><p>从<a href="">onBind()</a>回调方法返回此Binder实例</p>
</li>
<li>在客户端中，从<a href="">onServiceConnected()</a>回调方法接收Binder，并使用提供的方法调用绑定服务。</li>
</ol>
<p>Service demo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class LocalService extends Service &#123;</div><div class="line">    // Binder given to clients</div><div class="line">    private final IBinder mBinder = new LocalBinder();</div><div class="line">    // Random number generator</div><div class="line">    private final Random mGenerator = new Random();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Class used for the client Binder.  Because we know this service always</div><div class="line">     * runs in the same process as its clients, we don&apos;t need to deal with IPC.</div><div class="line">     */</div><div class="line">    public class LocalBinder extends Binder &#123;</div><div class="line">        LocalService getService() &#123;</div><div class="line">            // Return this instance of LocalService so clients can call public methods</div><div class="line">            return LocalService.this;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        return mBinder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** method for clients */</div><div class="line">    public int getRandomNumber() &#123;</div><div class="line">      return mGenerator.nextInt(100);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Activity demo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">public class BindingActivity extends Activity &#123;</div><div class="line">    LocalService mService;</div><div class="line">    boolean mBound = false;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onStart() &#123;</div><div class="line">        super.onStart();</div><div class="line">        // Bind to LocalService</div><div class="line">        Intent intent = new Intent(this, LocalService.class);</div><div class="line">        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onStop() &#123;</div><div class="line">        super.onStop();</div><div class="line">        // Unbind from the service</div><div class="line">        if (mBound) &#123;</div><div class="line">            unbindService(mConnection);</div><div class="line">            mBound = false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Called when a button is clicked (the button in the layout file attaches to</div><div class="line">      * this method with the android:onClick attribute) */</div><div class="line">    public void onButtonClick(View v) &#123;</div><div class="line">        if (mBound) &#123;</div><div class="line">            // Call a method from the LocalService.</div><div class="line">            // However, if this call were something that might hang, then this request should</div><div class="line">            // occur in a separate thread to avoid slowing down the activity performance.</div><div class="line">            int num = mService.getRandomNumber();</div><div class="line">            Toast.makeText(this, &quot;number: &quot; + num, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Defines callbacks for service binding, passed to bindService() */</div><div class="line">    private ServiceConnection mConnection = new ServiceConnection() &#123;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onServiceConnected(ComponentName className,</div><div class="line">                IBinder service) &#123;</div><div class="line">            // We&apos;ve bound to LocalService, cast the IBinder and get LocalService instance</div><div class="line">            LocalBinder binder = (LocalBinder) service;</div><div class="line">            mService = binder.getService();</div><div class="line">            mBound = true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onServiceDisconnected(ComponentName arg0) &#123;</div><div class="line">            mBound = false;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用-Messenger"><a href="#使用-Messenger" class="headerlink" title="使用 Messenger"></a>使用 Messenger</h3><p>想让服务与远程进程通信，则可使用Messenger为服务提供接口。利用这种方法，无需使用AIDL就可以执行IPC。</p>
<p>Messenger使用方法摘要：</p>
<ul>
<li>服务实现一个Handler，由其接收来自客户端的每个调用的回调</li>
<li>Handler用于创建Messenger对象（对Handler的引用）</li>
<li>Messenger创建一个IBinder，服务通过onBind() 使其返回客户端</li>
<li>客户端使用IBinder将Messenger（引用服务的Handler）实例化，然后使用后者将Message对象发送给服务</li>
<li>服务在其 Handler 中（具体地讲，是在 handleMessage() 方法中）接收每个 Message。</li>
</ul>
<p>Service demo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class MessengerService extends Service &#123;</div><div class="line">    /** Command to the service to display a message */</div><div class="line">    static final int MSG_SAY_HELLO = 1;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Handler of incoming messages from clients.</div><div class="line">     */</div><div class="line">    class IncomingHandler extends Handler &#123;</div><div class="line">        @Override</div><div class="line">        public void handleMessage(Message msg) &#123;</div><div class="line">            switch (msg.what) &#123;</div><div class="line">                case MSG_SAY_HELLO:</div><div class="line">                    Toast.makeText(getApplicationContext(), &quot;hello!&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                    break;</div><div class="line">                default:</div><div class="line">                    super.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Target we publish for clients to send messages to IncomingHandler.</div><div class="line">     */</div><div class="line">    final Messenger mMessenger = new Messenger(new IncomingHandler());</div><div class="line"></div><div class="line">    /**</div><div class="line">     * When binding to the service, we return an interface to our messenger</div><div class="line">     * for sending messages to the service.</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        Toast.makeText(getApplicationContext(), &quot;binding&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">        return mMessenger.getBinder();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Activity demo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">public class ActivityMessenger extends Activity &#123;</div><div class="line">    /** Messenger for communicating with the service. */</div><div class="line">    Messenger mService = null;</div><div class="line"></div><div class="line">    /** Flag indicating whether we have called bind on the service. */</div><div class="line">    boolean mBound;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Class for interacting with the main interface of the service.</div><div class="line">     */</div><div class="line">    private ServiceConnection mConnection = new ServiceConnection() &#123;</div><div class="line">        public void onServiceConnected(ComponentName className, IBinder service) &#123;</div><div class="line">            // This is called when the connection with the service has been</div><div class="line">            // established, giving us the object we can use to</div><div class="line">            // interact with the service.  We are communicating with the</div><div class="line">            // service using a Messenger, so here we get a client-side</div><div class="line">            // representation of that from the raw IBinder object.</div><div class="line">            mService = new Messenger(service);</div><div class="line">            mBound = true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void onServiceDisconnected(ComponentName className) &#123;</div><div class="line">            // This is called when the connection with the service has been</div><div class="line">            // unexpectedly disconnected -- that is, its process crashed.</div><div class="line">            mService = null;</div><div class="line">            mBound = false;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    public void sayHello(View v) &#123;</div><div class="line">        if (!mBound) return;</div><div class="line">        // Create and send a message to the service, using a supported &apos;what&apos; value</div><div class="line">        Message msg = Message.obtain(null, MessengerService.MSG_SAY_HELLO, 0, 0);</div><div class="line">        try &#123;</div><div class="line">            mService.send(msg);</div><div class="line">        &#125; catch (RemoteException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onStart() &#123;</div><div class="line">        super.onStart();</div><div class="line">        // Bind to the service</div><div class="line">        bindService(new Intent(this, MessengerService.class), mConnection,</div><div class="line">            Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onStop() &#123;</div><div class="line">        super.onStop();</div><div class="line">        // Unbind from the service</div><div class="line">        if (mBound) &#123;</div><div class="line">            unbindService(mConnection);</div><div class="line">            mBound = false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="前台服务"><a href="#前台服务" class="headerlink" title="前台服务"></a>前台服务</h2><p>前台服务被认为是用户主动意识到的一种服务，因此在内存不足时，系统也不会考虑将其终止。 前台服务必须为状态栏提供通知，放在“正在进行”标题下方，这意味着除非服务停止或从前台移除，否则不能清除通知。</p>
<p>例如，应该将通过服务播放音乐的音乐播放器设置为在前台运行，这是因为用户明确意识到其操作。 状态栏中的通知可能表示正在播放的歌曲，并允许用户启动 Activity 来与音乐播放器进行交互。</p>
<p>要请求让服务运行于前台，则调用<a href="">startForeground()</a>，此方法采用两个参数：唯一标识通知的整型数和状态栏的 Notification。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Notification notification = new Notification(R.drawable.icon, getText(R.string.ticker_text),</div><div class="line">        System.currentTimeMillis());</div><div class="line">Intent notificationIntent = new Intent(this, ExampleActivity.class);</div><div class="line">PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent, 0);</div><div class="line">notification.setLatestEventInfo(this, getText(R.string.notification_title),</div><div class="line">        getText(R.string.notification_message), pendingIntent);</div><div class="line">startForeground(ONGOING_NOTIFICATION_ID, notification);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：提供给 startForeground() 的整型 ID 不得为 0。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android的Service&quot;&gt;&lt;a href=&quot;#Android的Service&quot; class=&quot;headerlink&quot; title=&quot;Android的Service&quot;&gt;&lt;/a&gt;Android的Service&lt;/h1&gt;&lt;p&gt;Service 是一个可以在后台执行
    
    </summary>
    
    
      <category term="Android" scheme="http://linzhs.cm/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android的进程和线程</title>
    <link href="http://linzhs.cm/2017/05/26/android-process-thread/"/>
    <id>http://linzhs.cm/2017/05/26/android-process-thread/</id>
    <published>2017-05-25T18:14:01.000Z</published>
    <updated>2017-05-25T18:14:01.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android的进程和线程"><a href="#Android的进程和线程" class="headerlink" title="Android的进程和线程"></a>Android的进程和线程</h1><p>当某个应用组件启动且该应用没有运行其他任何组件时，Android 系统会使用单个执行线程为应用启动新的 Linux 进程。默认情况下，同一应用的所有组件在相同的进程和线程（称为“主”线程）中运行。 如果某个应用组件启动且该应用已存在进程（因为存在该应用的其他组件），则该组件会在此进程内启动并使用相同的执行线程。 但是，您可以安排应用中的其他组件在单独的进程中运行，并为任何进程创建额外的线程。</p>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>默认情况下，同一应用的所有组件均在相同的进程中运行，且大多数应用都不会改变这一点。 但是，如果您发现需要控制某个组件所属的进程，则可在清单文件中执行此操作。</p>
<p>各类组件元素的清单文件条目—<a href=""><activity></activity></a>、<a href=""><service></service></a>、<a href=""><receiver></receiver></a>和<a href=""><provider></provider></a>—均支持 android:process属性，此属性可以指定该组件应在哪个进程运行。您可以设置此属性，使每个组件均在各自的进程中运行，或者使一些组件共享一个进程，而其他组件则不共享。此外，您还可以设置 android:process，使不同应用的组件在相同的进程中运行，但前提是这些应用共享相同的 Linux 用户 ID 并使用相同的证书进行签署。</p>
<p>此外，<a href=""><application></application></a> 元素还支持 android:process属性，以设置适用于所有组件的默认值。</p>
<p>如果内存不足，而其他为用户提供更紧急服务的进程又需要内存时，Android 可能会决定在某一时刻关闭某一进程。在被终止进程中运行的应用组件也会随之销毁。 当这些组件需要再次运行时，系统将为它们重启进程。</p>
<p>决定终止哪个进程时，Android 系统将权衡它们对用户的相对重要程度。例如，相对于托管可见 Activity 的进程而言，它更有可能关闭托管屏幕上不再可见的 Activity 的进程。 因此，是否终止某个进程的决定取决于该进程中所运行组件的状态。 下面为决定终止进程所用的规则。</p>
<h3 id="进程生命周期"><a href="#进程生命周期" class="headerlink" title="进程生命周期"></a>进程生命周期</h3><p>Android 系统将尽量长时间地保持应用进程，但为了新建进程或运行更重要的进程，最终需要移除旧进程来回收内存。 为了确定保留或终止哪些进程，系统会根据进程中正在运行的组件以及这些组件的状态，将每个进程放入“重要性层次结构”中。 必要时，系统会首先消除重要性最低的进程，然后是重要性略逊的进程，依此类推，以回收系统资源。</p>
<p>重要性层次结构一共有 5级。以下列表按照重要程度列出了各类进程（第一个进程最重要，将是最后一个被终止的进程）：</p>
<ol>
<li><p>前台进程</p>
<p> 用户当前操作所必需的进程。如果一个进程满足以下任一条件，即视为前台进程：</p>
<ul>
<li>托管用户正在交互的 <a href="">Activity</a>（已调用 <a href="">Activity</a> 的 <a href="">onResume()</a> 方法）</li>
<li>托管某个 <a href="">Service</a>，后者绑定到用户正在交互的 Activity</li>
<li>托管正在“前台”运行的 <a href="">Service</a>（服务已调用 <a href="">startForeground()</a>）</li>
<li>托管正执行一个生命周期回调的 <a href="">Service</a>（<a href="">onCreate()</a>、<a href="">onStart()</a> 或 <a href="">onDestroy()</a>）</li>
<li><p>托管正执行其 <a href="">onReceive()</a> 方法的 <a href="">BroadcastReceiver</a></p>
<p>通常，在任意给定时间前台进程都为数不多。只有在内存不足以支持它们同时继续运行这一万不得已的情况下，系统才会终止它们。此时，设备往往已达到内存分页状态，因此需要终止一些前台进程来确保用户界面正常响应。</p>
</li>
</ul>
</li>
<li><p>可见进程</p>
<p> 没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。如果一个进程满足以下任一条件，即视为可见进程：</p>
<ul>
<li>托管不在前台、但仍对用户可见的 Activity（已调用其 onPause()方法）。例如，如果前台 Activity 启动了一个对话框，允许在其后显示上一 Activity，则有可能会发生这种情况。</li>
<li><p>托管绑定到可见（或前台）Activity 的 <a href="">Service</a>。</p>
<p>可见进程被视为是极其重要的进程，除非为了维持所有前台进程同时运行而必须终止，否则系统不会终止这些进程。</p>
</li>
</ul>
</li>
<li><p>服务进程</p>
<p> 正在运行已使用 <a href="">startService()</a>方法启动的服务且不属于上述两个更高类别进程的进程。尽管服务进程与用户所见内容没有直接关联，但是它们通常在执行一些用户关心的操作（例如，在后台播放音乐或从网络下载数据）。因此，除非内存不足以维持所有前台进程和可见进程同时运行，否则系统会让服务进程保持运行状态。</p>
</li>
<li><p>后台进程</p>
<p> 包含目前对用户不可见的 Activity 的进程（已调用 Activity 的 <a href="">onStop()</a> 方法）。这些进程对用户体验没有直接影响，系统可能随时终止它们，以回收内存供前台进程、可见进程或服务进程使用。 通常会有很多后台进程在运行，因此它们会保存在 LRU （最近最少使用）列表中，以确保包含用户最近查看的 Activity 的进程最后一个被终止。如果某个 Activity 正确实现了生命周期方法，并保存了其当前状态，则终止其进程不会对用户体验产生明显影响，因为当用户导航回该 Activity 时，Activity 会恢复其所有可见状态。 有关保存和恢复状态的信息。</p>
</li>
<li><p>空进程</p>
<p> 不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间。 为使总体系统资源在进程缓存和底层内核缓存之间保持平衡，系统往往会终止这些进程。</p>
</li>
</ol>
<p>根据进程中当前活动组件的重要程度，Android 会将进程评定为它可能达到的最高级别。例如，如果某进程托管着服务和可见 Activity，则会将此进程评定为可见进程，而不是服务进程。</p>
<p>此外，一个进程的级别可能会因其他进程对它的依赖而有所提高，即服务于另一进程的进程其级别永远不会低于其所服务的进程。 例如，如果进程 A 中的内容提供程序为进程 B 中的客户端提供服务，或者如果进程 A 中的服务绑定到进程 B 中的组件，则进程 A 始终被视为至少与进程 B 同样重要。</p>
<p>由于运行服务的进程其级别高于托管后台 Activity 的进程，因此启动长时间运行操作的 Activity 最好为该操作启动服务，而不是简单地创建工作线程，当操作有可能比 Activity 更加持久时尤要如此。例如，正在将图片上传到网站的 Activity 应该启动服务来执行上传，这样一来，即使用户退出 Activity，仍可在后台继续执行上传操作。使用服务可以保证，无论 Activity 发生什么情况，该操作至少具备“服务进程”优先级。 同理，广播接收器也应使用服务，而不是简单地将耗时冗长的操作放入线程中。</p>
<h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><p>Android 利用远程过程调用 (RPC) 提供了一种进程间通信 (IPC) 机制，通过这种机制，由 Activity 或其他应用组件调用的方法将（在其他进程中）远程执行，而所有结果将返回给调用方。 这就要求把方法调用及其数据分解至操作系统可以识别的程度，并将其从本地进程和地址空间传输至远程进程和地址空间，然后在远程进程中重新组装并执行该调用。 然后，返回值将沿相反方向传输回来。 Android 提供了执行这些 IPC 事务所需的全部代码，因此您只需集中精力定义和实现 RPC 编程接口即可。</p>
<p>要执行 IPC，必须使用 bindService() 将应用绑定到服务上。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>应用启动时，系统会为应用创建一个名为“主线程”的执行线程。 此线程非常重要，因为它负责将事件分派给相应的用户界面小部件，其中包括绘图事件。 此外，它也是应用与 Android UI 工具包组件（来自 android.widget 和 android.view 软件包的组件）进行交互的线程。因此，主线程有时也称为 UI 线程。</p>
<p>系统不会为每个组件实例创建单独的线程。运行于同一进程的所有组件均在 UI 线程中实例化，并且对每个组件的系统调用均由该线程进行分派。 因此，响应系统回调的方法（例如，报告用户操作的 onKeyDown() 或生命周期回调方法）始终在进程的 UI 线程中运行。</p>
<p>例如，当用户触摸屏幕上的按钮时，应用的 UI 线程会将触摸事件分派给小部件，而小部件反过来又设置其按下状态，并将失效请求发布到事件队列中。 UI 线程从队列中取消该请求并通知小部件应该重绘自身。</p>
<p>在应用执行繁重的任务以响应用户交互时，除非正确实现应用，否则这种单线程模式可能会导致性能低下。 具体地讲，如果 UI 线程需要处理所有任务，则执行耗时很长的操作（例如，网络访问或数据库查询）将会阻塞整个 UI。 一旦线程被阻塞，将无法分派任何事件，包括绘图事件。 从用户的角度来看，应用显示为挂起。 更糟糕的是，如果 UI 线程被阻塞超过几秒钟时间（目前大约是 5 秒钟），用户就会看到一个让人厌烦的“应用无响应”(ANR) 对话框。如果引起用户不满，他们可能就会决定退出并卸载此应用。</p>
<p>此外，Android UI 工具包并非线程安全工具包。因此，您不得通过工作线程操纵 UI，而只能通过 UI 线程操纵用户界面。 因此，Android 的单线程模式必须遵守两条规则：</p>
<ol>
<li>不要阻塞 UI 线程</li>
<li>不要在 UI 线程之外访问 Android UI 工具包</li>
</ol>
<h3 id="工作线程"><a href="#工作线程" class="headerlink" title="工作线程"></a>工作线程</h3><p>根据上述单线程模式，要保证应用 UI 的响应能力，关键是不能阻塞 UI 线程。 如果执行的操作不能很快完成，则应确保它们在单独的线程（“后台”或“工作”线程）中运行。</p>
<p>例如，以下代码演示了一个点击侦听器从单独的线程下载图像并将其显示在 ImageView 中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public void onClick(View v) &#123;</div><div class="line">    new Thread(new Runnable() &#123;</div><div class="line">        public void run() &#123;</div><div class="line">            Bitmap b = loadImageFromNetwork(&quot;http://example.com/image.png&quot;);</div><div class="line">            mImageView.setImageBitmap(b);</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>乍看起来，这段代码似乎运行良好，因为它创建了一个新线程来处理网络操作。 但是，它违反了单线程模式的第二条规则：<em>不要在 UI 线程之外访问 Android UI 工具包</em> — 此示例从工作线程（而不是 UI 线程）修改了 ImageView。 这可能导致出现不明确、不可预见的行为，但要跟踪此行为困难而又费时。</p>
<p>为解决此问题，Android 提供了几种途径来从其他线程访问 UI 线程。 以下列出了几种有用的方法：</p>
<ul>
<li>Activity.runOnUiThread(Runnable)</li>
<li>View.post(Runnable)</li>
<li>View.postDelayed(Runnable, long)</li>
</ul>
<p>例如，您可以通过使用 View.post(Runnable) 方法修复上述代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public void onClick(View v) &#123;</div><div class="line">    new Thread(new Runnable() &#123;</div><div class="line">        public void run() &#123;</div><div class="line">            final Bitmap bitmap =</div><div class="line">                    loadImageFromNetwork(&quot;http://example.com/image.png&quot;);</div><div class="line">            mImageView.post(new Runnable() &#123;</div><div class="line">                public void run() &#123;</div><div class="line">                    mImageView.setImageBitmap(bitmap);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在，上述实现属于线程安全型：在单独的线程中完成网络操作，而在 UI 线程中操纵 ImageView。</p>
<p>但是，随着操作日趋复杂，这类代码也会变得复杂且难以维护。 要通过工作线程处理更复杂的交互，可以考虑在工作线程中使用 Handler 处理来自 UI 线程的消息。当然，最好的解决方案或许是扩展 AsyncTask 类，此类简化了与 UI 进行交互所需执行的工作线程任务。</p>
<h3 id="使用AsyncTask"><a href="#使用AsyncTask" class="headerlink" title="使用AsyncTask"></a>使用AsyncTask</h3><p>AsyncTask 允许对用户界面执行异步操作。 它会先阻塞工作线程中的操作，然后在 UI 线程中发布结果，而无需您亲自处理线程和/或处理程序。</p>
<p>要使用它，必须创建 AsyncTask 的子类并实现 doInBackground() 回调方法，该方法将在后台线程池中运行。 要更新 UI，应该实现 onPostExecute() 以传递 doInBackground() 返回的结果并在 UI 线程中运行，以便您安全地更新 UI。 稍后，您可以通过从 UI 线程调用 execute() 来运行任务。</p>
<p>例如，您可以通过以下方式使用 AsyncTask 来实现上述示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public void onClick(View v) &#123;</div><div class="line">    new DownloadImageTask().execute(&quot;http://example.com/image.png&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private class DownloadImageTask extends AsyncTask&lt;String, Void, Bitmap&gt; &#123;</div><div class="line">    /** The system calls this to perform work in a worker thread and</div><div class="line">      * delivers it the parameters given to AsyncTask.execute() */</div><div class="line">    protected Bitmap doInBackground(String... urls) &#123;</div><div class="line">        return loadImageFromNetwork(urls[0]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** The system calls this to perform work in the UI thread and delivers</div><div class="line">      * the result from doInBackground() */</div><div class="line">    protected void onPostExecute(Bitmap result) &#123;</div><div class="line">        mImageView.setImageBitmap(result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在 UI 是安全的，代码也得到简化，因为任务分解成了两部分：一部分应在工作线程内完成，另一部分应在 UI 线程内完成。</p>
<p>下面简要概述了 AsyncTask 的工作方法，但要全面了解如何使用此类，应阅读 AsyncTask 参考文档：</p>
<ul>
<li>可以使用泛型指定参数类型、进度值和任务最终值</li>
<li>方法 doInBackground() 会在工作线程上自动执行</li>
<li>onPreExecute()、onPostExecute() 和 onProgressUpdate() 均在 UI 线程中调用</li>
<li>doInBackground() 返回的值将发送到 onPostExecute()</li>
<li>可以随时在 doInBackground() 中调用publishProgress()，以在 UI 线程中执行 onProgressUpdate()</li>
<li>可以随时取消任何线程中的任务</li>
</ul>
<blockquote>
<p>使用工作线程时可能会遇到另一个问题，即：运行时配置变更（例如，用户更改了屏幕方向）导致 Activity 意外重启，这可能会销毁工作线程。</p>
</blockquote>
<h3 id="线程安全方法"><a href="#线程安全方法" class="headerlink" title="线程安全方法"></a>线程安全方法</h3><p>在某些情况下，您实现的方法可能会从多个线程调用，因此编写这些方法时必须确保其满足线程安全的要求。</p>
<p>这一点主要适用于可以远程调用的方法，如绑定服务中的方法。如果对 IBinder 中所实现方法的调用源自运行 IBinder 的同一进程，则该方法在调用方的线程中执行。但是，如果调用源自其他进程，则该方法将在从线程池选择的某个线程中执行（而不是在进程的 UI 线程中执行），线程池由系统在与 IBinder 相同的进程中维护。 例如，即使服务的 onBind() 方法将从服务进程的 UI 线程调用，在 onBind() 返回的对象中实现的方法（例如，实现 RPC 方法的子类）仍会从线程池中的线程调用。 由于一个服务可以有多个客户端，因此可能会有多个池线程在同一时间使用同一 IBinder 方法。因此，IBinder 方法必须实现为线程安全方法。</p>
<p>同样，内容提供程序也可接收来自其他进程的数据请求。尽管 ContentResolver 和 ContentProvider 类隐藏了如何管理进程间通信的细节，但响应这些请求的 ContentProvider 方法（query()、insert()、delete()、update() 和 getType() 方法）将从内容提供程序所在进程的线程池中调用，而不是从进程的 UI 线程调用。 由于这些方法可能会同时从任意数量的线程调用，因此它们也必须实现为线程安全方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android的进程和线程&quot;&gt;&lt;a href=&quot;#Android的进程和线程&quot; class=&quot;headerlink&quot; title=&quot;Android的进程和线程&quot;&gt;&lt;/a&gt;Android的进程和线程&lt;/h1&gt;&lt;p&gt;当某个应用组件启动且该应用没有运行其他任何组件时，A
    
    </summary>
    
    
      <category term="Android" scheme="http://linzhs.cm/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android的Context及其子类</title>
    <link href="http://linzhs.cm/2017/05/26/android-context/"/>
    <id>http://linzhs.cm/2017/05/26/android-context/</id>
    <published>2017-05-25T18:12:37.000Z</published>
    <updated>2017-05-25T18:12:37.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android的Context及其子类"><a href="#Android的Context及其子类" class="headerlink" title="Android的Context及其子类"></a>Android的Context及其子类</h1><p>Android的系统组件很多，Activity、Service、BroadcastReceiver等都是很常用的，这些组件的创建都不能是凭空的，都需要借助Context这个核心功能类或者其子类。</p>
<h2 id="Context继承结构"><a href="#Context继承结构" class="headerlink" title="Context继承结构"></a>Context继承结构</h2><p><img src="http://img.blog.csdn.net/20151022212109519?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p>
<p>Context（android.content）是一个抽象类，它有两个继承类，分别是上下文封装的封装类ContextWrapper和上下文功能的实现类ContextImpl（可以从命名看出，Wrapper和Implments）。</p>
<p>ContextWrapper有三个子类，分别是Application，Service，ContextThemeWrapper，ContextThemeWrapper是一个带主题的封装类，而它有一个直接子类就是Activity。</p>
<p>从以上的继承关系上总结，Context有三种类型，分别是Apllication、Activity、Service。三个类分别承担着不同的任务，而他们具体的Context功能有ContextImpl去实现。</p>
<h2 id="Context的功能"><a href="#Context的功能" class="headerlink" title="Context的功能"></a>Context的功能</h2><p>Context的功能很多，很强大。Toast、启动Activity、启动Service、发送广播、操作数据库等都需要用到Context。</p>
<p>由于Context的具体能力是由ContextImpl去实现的，所以绝大多数场景下，Apllication、Activity、Service三类的Context是可以通用的。</p>
<p>出于安全的考虑，Android做了一些限制，Android是不允许Activity或Dialog凭空出现的，一个Activity的启动必须要建立在另一个Activity的基础之上，也就是以此形成的返回栈。而Dialog则必须在一个Activity上面弹出（除非是System Alert类型的Dialog），因此在这种场景下，我们只能使用Activity类型的Context，否则将会出错。</p>
<h2 id="Context的数量"><a href="#Context的数量" class="headerlink" title="Context的数量"></a>Context的数量</h2><p>Context数量 = Activity数量 + Service数量 + 1</p>
<p>一个应用只能有一个Application，但是活动和服务可以有多个。</p>
<h2 id="Application-Context"><a href="#Application-Context" class="headerlink" title="Application Context"></a>Application Context</h2><p>每个应用程序都会在AndroidManifest.xml上注册一个Application，默认是没有指定名字的。在Activity上获取Context的相关信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Application application = (Application)getApplication();</div><div class="line">        Log.d(&quot;MainActivity&quot;, &quot;getApplication is&quot; + application);</div><div class="line"></div><div class="line">        Context appContext = getApplicationContext();</div><div class="line">        Log.d(&quot;MainActivity&quot;, &quot;getApplicationContext is&quot; + appContext);</div><div class="line"></div><div class="line">        Context baseContext = getBaseContext();</div><div class="line">        Log.d(&quot;MainActivity&quot;, &quot;getBaseContext is&quot; + baseContext);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>logcat输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">com.example.linzh.contexttest D/MainActivity: getApplication isandroid.app.Application@421b137</div><div class="line">com.example.linzh.contexttest D/MainActivity: getApplicationContext isandroid.app.Application@421b137</div><div class="line">com.example.linzh.contexttest D/MainActivity: getBaseContext isandroid.app.ContextImpl@de166a4</div></pre></td></tr></table></figure></p>
<p>输出结果分析：</p>
<p>在输出的结果里，getApplication和getApplicationContext的结果是一样的，因为Application本身也是Context（其子类）。所以这里获取的getApplicationContext就是Application本身的实例。</p>
<p>但是，getApplicationContext和getApplication两者的应用范围是不一样的。getApplication只能在Activity和Service中被调用，而getApplicationContext适用范围更广，比如BroadcastReceiver是不能调用getApplication的，但是getApplicationContext可以。</p>
<p>在输出的log里还有baseContext，这个是ContextImpl功能实现类的。</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>Application不能被new，不能和单例混在一起。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android的Context及其子类&quot;&gt;&lt;a href=&quot;#Android的Context及其子类&quot; class=&quot;headerlink&quot; title=&quot;Android的Context及其子类&quot;&gt;&lt;/a&gt;Android的Context及其子类&lt;/h1&gt;&lt;p&gt;An
    
    </summary>
    
    
      <category term="Android" scheme="http://linzhs.cm/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android中Activity之间的通信</title>
    <link href="http://linzhs.cm/2017/05/26/android-activity-communication/"/>
    <id>http://linzhs.cm/2017/05/26/android-activity-communication/</id>
    <published>2017-05-25T18:11:37.000Z</published>
    <updated>2017-05-25T18:11:37.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android中Activity之间的通信"><a href="#Android中Activity之间的通信" class="headerlink" title="Android中Activity之间的通信"></a>Android中Activity之间的通信</h1><blockquote>
<p>此篇随笔将总结Activity之间的通信，数据交流，如何保存Activity的状态。</p>
</blockquote>
<h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p>Intent，即意图，用于描述你想在某个Intent对象的简单操作，再通过startActivity或者startActivityForResult方法来启动这个意图所对应的活动。</p>
<p>意图有隐式和显式之分。显式的意图是在java文件中直接调用指定的活动类，隐式的意图是现在AndroidManifest.xml中指定uri，然后在活动中指定此uri来启动所对应的活动。</p>
<p>Android自带的库中有很多通用的隐式意图，具体的参考<a href="https://developer.android.com/guide/components/intents-common.html" target="_blank" rel="external">Android官方文档</a>。</p>
<p>此外，意图还可以指定意图过滤器，来筛选自己想要的意图。</p>
<h3 id="传递信息"><a href="#传递信息" class="headerlink" title="传递信息"></a>传递信息</h3><p>意图不仅可以用来启动活动，还可以用来做活动之间的传信者。</p>
<p>在用意图启动一个活动之前，调用intent的putExtra方法来存储键值对。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String value = &quot;hello&quot;;</div><div class="line">Intent intent = new Intent(ThisActivity.this, OtherActivity.class);</div><div class="line">intent.putExtra(&quot;key&quot;, value);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure></p>
<p>完成启动后，即可将数据取出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent = getIntent();</div><div class="line">String data = intent.getStringExtra(&quot;key&quot;);</div></pre></td></tr></table></figure></p>
<p>当然，传递的信息不仅仅只能是String，其他基本类型都是可以的，相应的把getXXX的XXX置为相应的类型即可。</p>
<p>同理，用startActivityForResult启动的活动，也可以通过Intent传递回一些信息。返回的信息通过setResult来设置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent();</div><div class="line">intent.putExtra(&quot;data_return&quot;, &quot;Hello&quot;);</div><div class="line">intent.putExtra(&quot;int_data&quot;, 100);</div><div class="line">setResult(RESULT_OK, intent);//RESULT_OK是返回的编码，可以自定义</div><div class="line">finish();</div></pre></td></tr></table></figure></p>
<p>在接收返回的活动中取出信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">getIntent().getStringExtra(&quot;data_return&quot;);</div><div class="line">getIntent().getIntExtra(&quot;int_data&quot;);</div></pre></td></tr></table></figure></p>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>在用Intent来启动的时候顺便传递一些信息，是很便捷的，但是Intent所传递的信息非常有限，它只能传递基本数据类型。</p>
<p>默认的Intent传递信息有所限制，但是可以自己定制传递的信息机制，那就是用序列化机制。序列化后对象即可储存在本地，也可以通过网络流进行传输。</p>
<h3 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h3><p>Android提供的序列化机制是比较丰富的，Java默认支持Serializable接口，只要类去implements它，就具备了序列化能力，而且可以不去实现Serializable的方法，如下例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class Person implements Serializable &#123;</div><div class="line">    private String name;</div><div class="line">    private int age;</div><div class="line">    </div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public int getAge() &#123;</div><div class="line">        return age;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    publci void setAge(int age) &#123;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过Intent传递，传递的方式和普通的intent传递并没有什么差别。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Person person = new Person();</div><div class="line">person.setName(&quot;Tom&quot;);</div><div class="line">person.setAge(20);</div><div class="line">Intent intent = new Intent(ThisActivity.this, OtherActivity.class);</div><div class="line">intent.putExtra(&quot;person_data&quot;, person);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure></p>
<p>获取也是一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person person = (Person)getIntent().getSerializableExtra(&quot;person_data&quot;);</div></pre></td></tr></table></figure></p>
<h3 id="Percelable"><a href="#Percelable" class="headerlink" title="Percelable"></a>Percelable</h3><p>Android除了支持Serializable，还自己实现了另一个序列化机制，Percelable接口。Percelable的实现相比Serializable复杂，需要去重写describeContents和writeToParcel两个方法，还得创建一个Parcelable.Creator接口的实现。例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class Person implements Parcelable &#123;</div><div class="line">    private String name;</div><div class="line">    private int age;</div><div class="line">    </div><div class="line">    ...</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public int describeContents() &#123;</div><div class="line">        return 0;//包含特殊对象的种类，这里返回0即可</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void writeToParcel(Parcel dest, int flags) &#123;</div><div class="line">        dest.writeString(name);</div><div class="line">        dest.writeInt(age);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static final Parcelable.Creator&lt;Person&gt; CREATOR = new Parcelable.Creator&lt;Person&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        public Person createFromParcel(Parcel source) &#123;//用于反序列化读取数据</div><div class="line">            Person person = new Person();</div><div class="line">            person.name = source.readString();</div><div class="line">            person.age = source.readInt();</div><div class="line">            return person;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        @Override</div><div class="line">        public Person[] newArray(int size) &#123;//创建序列化对象数组</div><div class="line">            return new Person[size];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来的序列化和传递都和Serializable的一致，反序列化有点差别的地方在于下面例子，其他的没什么差别。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person person = (Person)getIntent().getParcelableExtra(&quot;person_data&quot;);</div></pre></td></tr></table></figure></p>
<p>Parcelable的序列化操作相比Serializable麻烦了不少，但其效率更好，Serializable的序列化是把整个对象都序列化了，不管信息有没有用，而Parcelable是根据自己去实现相应的操作定制相应的数据进行序列化。所以通常情况下更加推荐使用Parcelable进行Intent传递数据。</p>
<h2 id="保存Activity的状态"><a href="#保存Activity的状态" class="headerlink" title="保存Activity的状态"></a>保存Activity的状态</h2><p>当一个任务中的一个Activity停止时，系统的默认行为是会保留它的状态的，这样一来，当用户从上一个活动中返回时，其用户界面与用户离开该活动时才一致，这样才不会影响到用户的体验，效率也更快。但是，若该活动在返回栈中很久没有重新回到栈顶工作，那么系统GC会回收并且销毁它，重新需要工作的时候就是重新实例了，这样会丢失已有的状态信息，这个时候我们需要给Activity的状态做保留。</p>
<p>保存Activity的状态信息通过<a href="">onSavaInstanceState()</a>这个回调方法来完成。</p>
<p>系统会在onPause回调方法被调用前去调用onSaveInstanceState方法，然后再使Activity进行后面的方法回调，以至于活动变得易于销毁，保证内存的充足使用。</p>
<p>在调用onSavaInstanceState方法的时候，系统会向其传递一个Bundle类对象，可以在其中使用putString()和putInt等方法以键值对的形式保存有关Activity状态信息。</p>
<p>若是Activity被GC回收，也就是系统终止了本应用进程，而后用户又返回到该Activity，系统会重建Activity，在回调完onCreate()和onStart()方法后去回调onRestoreInstanceState()方法。</p>
<p>在onRestoreInstanceState()方法中会有一个Bundle对象，若为空则没有状态信息需要恢复，若是不为空则要提取保存状态的信息。</p>
<p>其实，即使我们不做保存状态信息的操作，系统默认也会在onSavaInstanceState()方法上实现部分Activity状态的保存。具体讲，默认实现会为布局中的每个View调用相应的onSaveInstanceState()方法，让每个视图都能提供有关自身应保存的信息。Android框架中几乎每个小部件都会根据需要实现此方法，以便在重建Activity时自动保存和恢复对UI所做的任何可见更改。例如，EditText会保存用户输入的任何文本，CheckBox则会保存复选框的选中或未选中状态。系统默认实现此方法需要有每个小部件的唯一ID，若是没有指定ID，则不会保存其状态。</p>
<p>尽管onSavaInstanceState()方法的默认实现会保存一些UI有关的状态信息，但是有时候并不能满足需求，所以才需要自己去定制，从而保存更多的信息。例如，有可能需要保存在Activity生命周期内发生了变化的成员值。</p>
<p>在重写onSavaInstanceState方法时，正确的做法应该是先去调用super类的此方法，然后再作品定制操作，一遍默认实现能够恢复视图的状态，还能传递信息。</p>
<p>切记，onSavaInstanceState()方法是不能保证一定会被调用的，若是用户按下“返回”键显示关闭活动，那就没法保存了。所以，此方法应该只利用来记录Activity的瞬态（UI状态），而不是用来保存一些持久性的数据。保存持久性数据可以在onPause方法中将数据存入数据库等容器中。</p>
<h3 id="Bundle类"><a href="#Bundle类" class="headerlink" title="Bundle类"></a>Bundle类</h3><p>Bundle类是final的，也就是无法被继承，其实现了克隆和Parcelable序列化接口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public final class Bundle extends BaseBundle implements Cloneable, Parcelable &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>信息传递例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent();</div><div class="line">intent.setClass(ThisActivity.this, TargetActivity.class);</div><div class="line">Bundle bundle = new Bundle();</div><div class="line">bundle.putString(&quot;data&quot;, &quot;hello&quot;);</div><div class="line">intent.putExtras(bundle);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure></p>
<p>在TargetActivity.java中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void onCreate(Bundle savadInstanceState) &#123;</div><div class="line">    ...</div><div class="line">    Bundle bundle = getIntent().getExtras();</div><div class="line">    String data = bundle.getString(&quot;data&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="保存Activiyt状态"><a href="#保存Activiyt状态" class="headerlink" title="保存Activiyt状态"></a>保存Activiyt状态</h3><p>在onPause前调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">static final String STATE_SCORE = &quot;playerScore&quot;;</div><div class="line">static final String STATE_LEVEL = &quot;playerLevel&quot;;</div><div class="line">...</div><div class="line"></div><div class="line">@Override</div><div class="line">public void onSaveInstanceState(Bundle savaInstanceState) &#123;</div><div class="line">    //保存用户当前的游戏状态</div><div class="line">    savaInstanceState.putInt(STATE_SCORE, mCurrentScore);</div><div class="line">    savedInstanceState.putInt(STATE_LEVEL, mCurrentLevel);</div><div class="line">    </div><div class="line">    //调用系统默认实现的onSavaInstanceState来保存UI状态</div><div class="line">    super.onSaveInstanceState(savedInstanceState);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="恢复Acitivity状态"><a href="#恢复Acitivity状态" class="headerlink" title="恢复Acitivity状态"></a>恢复Acitivity状态</h3><p>Activity在先前销毁后重新创建时（非用户主动销毁），可以从系统向Activity传递的Bundle对象恢复已保存的状态，onCreate()和onRestoreInstanceState()回调方法均接收包含实例状态信息的相同Bundle。</p>
<p>无论是新创建还是重建Activity，系统都会调用onCreate()方法，所以如果是在onCreate方法中去恢复信息，那必须在读取Bundle信息前去检测Bundle是否为null。如果为null，则系统将创建Activity的新实例，而不是恢复已销毁的先前实例。</p>
<p>例如以下例子，在onCreate()方法中去识别Bundle是否为null，然后再选择去恢复与否<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState); // Always call the superclass first</div><div class="line"></div><div class="line">    // Check whether we&apos;re recreating a previously destroyed instance</div><div class="line">    if (savedInstanceState != null) &#123;</div><div class="line">        // Restore value of members from saved state</div><div class="line">        mCurrentScore = savedInstanceState.getInt(STATE_SCORE);</div><div class="line">        mCurrentLevel = savedInstanceState.getInt(STATE_LEVEL);</div><div class="line">    &#125; else &#123;</div><div class="line">        // Probably initialize members with default values for a new instance</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以选择实现系统在 onStart()方法之后调用的onRestoreInstanceState()来实现恢复状态信息，而不是在 onCreate()期间恢复状态。系统只在存在要恢复的已保存状态时调用onRestoreInstanceState()，因此此时无需检查 Bundle 是否为 null：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public void onRestoreInstanceState(Bundle savedInstanceState) &#123;</div><div class="line">    // Always call the superclass so it can restore the view hierarchy</div><div class="line">    super.onRestoreInstanceState(savedInstanceState);</div><div class="line"></div><div class="line">    // Restore state members from saved instance</div><div class="line">    mCurrentScore = savedInstanceState.getInt(STATE_SCORE);</div><div class="line">    mCurrentLevel = savedInstanceState.getInt(STATE_LEVEL);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="其他信息传递方法"><a href="#其他信息传递方法" class="headerlink" title="其他信息传递方法"></a>其他信息传递方法</h2><p>详见Android的广播机制和Android的数据存储。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android中Activity之间的通信&quot;&gt;&lt;a href=&quot;#Android中Activity之间的通信&quot; class=&quot;headerlink&quot; title=&quot;Android中Activity之间的通信&quot;&gt;&lt;/a&gt;Android中Activity之间的通信&lt;/
    
    </summary>
    
    
      <category term="Android" scheme="http://linzhs.cm/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android的广播机制</title>
    <link href="http://linzhs.cm/2017/05/26/android-broadcast/"/>
    <id>http://linzhs.cm/2017/05/26/android-broadcast/</id>
    <published>2017-05-25T18:10:10.000Z</published>
    <updated>2017-05-25T18:10:10.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android的广播机制"><a href="#Android的广播机制" class="headerlink" title="Android的广播机制"></a>Android的广播机制</h1><p>Android的广播机制Broadcast Receiver可以实现应用程序之间、Activity之间的信息传递。广播的通信是跨进程的。</p>
<h2 id="广播类型"><a href="#广播类型" class="headerlink" title="广播类型"></a>广播类型</h2><p>Android提供的广播类型有两种，标准广播和有序广播。</p>
<p>标准广播是一种完全异步执行的广播，其是无序的，在发出后，所有接收器都能在同一时刻接收到此广播。这种广播的效率比较高，但同时也意味着无法被截断，也就是可能是不安全的。</p>
<p>有序广播正如其名，其是有序的。在广播发出后，同一时刻只能有一个广播接收器能够接收到，且根据优先级来传递此广播，若在中间被截断，则后面的广播接收器无法接收到此广播。</p>
<h2 id="动态注册广播"><a href="#动态注册广播" class="headerlink" title="动态注册广播"></a>动态注册广播</h2><p>动态注册广播的方法是在Java代码中实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private IntentFilter intentFilter;</div><div class="line">    private NetworkChangeReceiver networkChangeReceiver;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        intentFilter = new IntentFilter();</div><div class="line">        intentFilter.addAction(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);</div><div class="line">        networkChangeReceiver = new NetworkChangeReceiver();</div><div class="line">        registerReceiver(networkChangeReceiver, intentFilter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        unregisterReceiver(networkChangeReceiver);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class NetworkChangeReceiver extends BroadcastReceiver &#123;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onReceive(Context context, Intent intent) &#123;</div><div class="line">            ConnectivityManager connectionManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);</div><div class="line">            NetworkInfo networkInfo = connectionManager.getActiveNetworkInfo();</div><div class="line">            if (networkInfo != null &amp;&amp; networkInfo.isAvailable()) &#123;</div><div class="line">                Toast.makeText(context, &quot;network is available&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125; else &#123;</div><div class="line">                Toast.makeText(context, &quot;network is unavailable&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>例子中的内部类NetworkChangeReceiver继承自BroadcastReceiver，并且重写了onReceive方法，其实就是作为了广播接收器。在初始化的时候我们用意图筛选器筛选出了网络状态变化这个广播，并且将意图筛选器和广播接收器注册，所以当网络变化的时候，相应的接收器的onReceive方法就会被回调。</p>
<blockquote>
<p>注意，竟然注册了广播，那么在销毁此活动时，广播接收器也要取消注册。</p>
</blockquote>
<h2 id="静态注册广播"><a href="#静态注册广播" class="headerlink" title="静态注册广播"></a>静态注册广播</h2><p>静态注册广播就是在清单元件中去注册，其优点在于可以快速响应。动态注册比较灵活，可控，但是在一些情况下，就力不从心了，比如程序启动前我们要接收到广播后作出响应，但是动态注册只能等到程序启动后才能实现，而静态就不一样了。</p>
<p>例子：接收开机广播<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class BootCompleteReceiver extends BroadcastReceiver &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onReceive(Context context, Intent intent) &#123;</div><div class="line">        // TODO: This method is called when the BroadcastReceiver is receiving</div><div class="line">        // an Intent broadcast.</div><div class="line">        Toast.makeText(context, &quot;Boot Complete&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//AndroidManifest.xml</div><div class="line">...</div><div class="line">&lt;receiver</div><div class="line">    android:name=&quot;.BootCompleteReceiver&quot;</div><div class="line">    android:enabled=&quot;true&quot;</div><div class="line">    android:exported=&quot;true&quot;&gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/receiver&gt;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<blockquote>
<p>以上操作注意权限问题</p>
</blockquote>
<h2 id="自定义发送广播"><a href="#自定义发送广播" class="headerlink" title="自定义发送广播"></a>自定义发送广播</h2><p>以上的操作都是接收广播，接下来自定义标准和有序广播的发送。</p>
<h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>定制接收器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class MyBroadcastReceiver extends BroadcastReceiver &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onReceive(Context context, Intent intent) &#123;</div><div class="line">        Toast.makeText(context, &quot;received in MyBroadcastReceiver&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;receiver android:name=&quot;.MyBroadcastReceiver&quot;</div><div class="line">    android:enabled=&quot;true&quot;</div><div class="line">    android:exported=&quot;true&quot; &gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name=&quot;com.example.broadcasttest.MY_BROADCAST&quot; /&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/receiver&gt;</div></pre></td></tr></table></figure></p>
<p>发送标准广播<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Button button = (Button)findViewById(R.id.button);</div><div class="line">button.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        Intent intent = new Intent(&quot;com.example.broadcasttest.MY_BROADCAST&quot;);</div><div class="line">        sendBroadcast(intent);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>广播的信息传递是跨进程的，有序广播可以在优先级不同的进程中不断传递。有序的广播和标准广播的配置差不多，唯一的区别在于sendBroadcast方法变成了sendOrderBroadcast。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sendOrderBroadcast(intent, null);</div></pre></td></tr></table></figure></p>
<p>有序广播是有优先级的，可以在清单文件中设置优先级。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;receiver android:name=&quot;.MyBroadcastReceiver&quot;</div><div class="line">    android:enabled=&quot;true&quot;</div><div class="line">    android:exported=&quot;true&quot; &gt;</div><div class="line">    &lt;intent-filter android:priority=&quot;100&quot;&gt;</div><div class="line">        &lt;action android:name=&quot;com.example.broadcasttest.MY_BROADCAST&quot; /&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/receiver&gt;</div></pre></td></tr></table></figure></p>
<p>截断广播传递<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class MyBroadcastReceiver extends BroadcastReceiver &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onReceive(Context context, Intent intent) &#123;</div><div class="line">        Toast.makeText(context, &quot;received in MyBroadcastReceiver&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">        abortBroadcast();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="本地广播"><a href="#本地广播" class="headerlink" title="本地广播"></a>本地广播</h2><p>前面所涉及的发送和接收广播都是全局的，也就是发出的广播可以被其他任何应用程序所接收，这是非常不安全的。Android提供了另一种安全的广播机制，本地广播，使用这个机制发出的广播智能在本应用程序内部传递。</p>
<p>使用例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private IntentFilter intentFilter;</div><div class="line">    private LocalReceiver localReceiver;</div><div class="line">    private LocalBroadcastManager localBroadcastManager;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        localBroadcastManager = LocalBroadcastManager.getInstance(this);</div><div class="line">        Button button = (Button) findViewById(R.id.button);</div><div class="line">        button.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                Intent intent = new Intent(&quot;com.example.broadcasttest.LOCAL_BROADCAST&quot;);</div><div class="line">                localBroadcastManager.sendBroadcast(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        intentFilter = new IntentFilter();</div><div class="line">        intentFilter.addAction(&quot;com.example.broadcasttest.LOCAL_BROADCAST&quot;);</div><div class="line">        localReceiver = new LocalReceiver();</div><div class="line">        localBroadcastManager.registerReceiver(localReceiver, intentFilter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        unregisterReceiver(localReceiver);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class LocalReceiver extends BroadcastReceiver &#123;</div><div class="line">        @Override</div><div class="line">        public void onReceive(Context context, Intent intent) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>本地广播借助的是LocalBroadcastManager来传递传播，其他和有序、标准广播用法差不多。</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>广播机制传播的这些信息往往是轻量级的，因为广播接受者的生命周期非常短。当执行onReceiver方法之后，广播就会被销毁。</p>
<p>在广播接受者中不能进行耗时较长的操作，也不要在Receiver中创建子线程，Receiver在接收完成后，所有进程都会变成空进程，很容易被GC回收掉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android的广播机制&quot;&gt;&lt;a href=&quot;#Android的广播机制&quot; class=&quot;headerlink&quot; title=&quot;Android的广播机制&quot;&gt;&lt;/a&gt;Android的广播机制&lt;/h1&gt;&lt;p&gt;Android的广播机制Broadcast Receiver
    
    </summary>
    
    
      <category term="Android" scheme="http://linzhs.cm/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android的ListView实现</title>
    <link href="http://linzhs.cm/2017/05/26/android-listview/"/>
    <id>http://linzhs.cm/2017/05/26/android-listview/</id>
    <published>2017-05-25T18:07:58.000Z</published>
    <updated>2017-05-25T18:07:58.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android自定义View和ViewGroup"><a href="#Android自定义View和ViewGroup" class="headerlink" title="Android自定义View和ViewGroup"></a>Android自定义View和ViewGroup</h1><blockquote>
<p>Android中提供了丰富、复杂的视图系统，widget类的组件：Button, TextView, EditText, ListView, CheckBox, RadioButton, Gallery, Spinner都是直接或间接继承于super类View，布局类：LinearLayout, FrameLayout, RelativeLayout等则继承于ViewGroup， ViewGroup则继承于View。</p>
<p>所以，要设计构建自己的视图或者布局，就要去继承View或者ViewGroup。本文从使用的角度来总结自定制View和ViewGroup。</p>
</blockquote>
<h2 id="自定义View"><a href="#自定义View" class="headerlink" title="自定义View"></a>自定义View</h2><p>自定义View，最基本的就是继承Android提供的基本视图类View。<br>自定义步骤：</p>
<ul>
<li>自定义View的属性 编写attr.xml文件 </li>
<li>在layout布局文件中引用，同时引用命名空间 </li>
<li>在View的构造方法中获得我们自定义的属性，在自定义控件中进行读取（构造方法拿到attr.xml文件值） </li>
<li>重写onMesure </li>
<li>重写onDraw</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class MyView extends View &#123;</div><div class="line">    public MyView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MyView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继承了View类，还需要重写2个以上的构造方法（以上示例为常用重写构造方法）和onMeasure(), onDraw()方法，在View继承中，onLayout()是非必须的。</p>
<h3 id="拓展onMeasure"><a href="#拓展onMeasure" class="headerlink" title="拓展onMeasure()"></a>拓展onMeasure()</h3><p>自定义View都要自己来测量控制宽高尺寸，算出自己需要占用多大的面积。我们常在xml布局文件中用match_parent和wrap_content，这两属性都是依赖于父布局的，没有父布局就没法正确定位宽高。</p>
<p>这里存在一个疑问，就是如果我们在activity_main.xml中的代码如下，layout_width和layout_height指定的值也都为match_parent，其父布局又在哪呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:linzh=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:id=&quot;@+id/main_layout&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>我们在MainActivity.java中进行测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private LinearLayout linearLayout;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        linearLayout = (LinearLayout)findViewById(R.id.main_layout);</div><div class="line">        LayoutInflater layoutInflater = LayoutInflater.from(this);</div><div class="line">        View buttonLayout = layoutInflater.inflate(R.layout.button_layout, null);</div><div class="line">        linearLayout.addView(buttonLayout);</div><div class="line"></div><div class="line">        ViewParent viewParent = linearLayout.getParent();//获取父布局的名字</div><div class="line">        Log.d(&quot;MainActivity&quot;, &quot;The parent of main linear layout is &quot; + viewParent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行以上App，可以在logcat中打印出如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The parent of main linear layout is android.support.v7.widget.ContentFrameLayout&#123;2ef2e36 V.E...... ......I. 0,0-0,0 #1020002 android:id/content&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：以上运行API level 为25</p>
</blockquote>
<p>从logcat的信息可知，我们在每个xml文件的布局的最外层，Android还自动帮我们加了一个FrameLayout/ContentFrameLayout，在自动嵌套的父布局里，有一部分是content，就是默认放label的地方，对应setContentView方法，在此之下才是我们自己定义的布局文件的内容。</p>
<p>onMeasure方法的原型如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)</div></pre></td></tr></table></figure></p>
<p>在参数中，widthMeasureSpec和heightMeasureSpec都为int，但是每个int都包含着两个信息，分别是尺寸和测量模式，一般情况下，int是32位的，Android把其中的30位用做尺寸大小存储，2bit用做测量模式存储。</p>
<p>2bit来存测量模式信息，也就是最多有4种模式，Android提供了3种测量模式，如下：</p>
<table>
<thead>
<tr>
<th>测量模式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>UNSPECIFIED</td>
<td>父容器没有对当前View有任何限制，当前View可以任意取尺寸 极少用</td>
</tr>
<tr>
<td>EXACTLY</td>
<td>父布局要求的精确尺寸，必须用这个尺寸作为View尺寸</td>
</tr>
<tr>
<td>AT_MOST</td>
<td>父布局给予View最大的尺寸，当前的View能取的尺寸为这个</td>
</tr>
</tbody>
</table>
<p>测量模式和实际布局应用的属性值的关系：</p>
<ul>
<li>match_parent  -&gt;  EXACTLY</li>
<li>wrap_content  -&gt;  AT_MOST</li>
<li>指定尺寸      -&gt;  EXACTLY</li>
</ul>
<p>如何获取widthMeasureSpec和heightMeasureSpec中的测量模式和尺寸大小？Android库中提供了两个方法，用来提取这两个信息，其实现细节就是进行了位运算，将前2-bit当做测量模式，后30-bit作为尺寸大小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">int widthSize = MeasureSpec.getSize(widthMeasureSpec);</div></pre></td></tr></table></figure></p>
<p>重写onMeasure方法示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">private int getMySize(int defaultSize, int measureSpec) &#123;</div><div class="line">        int mySize = defaultSize;</div><div class="line"></div><div class="line">        int mode = MeasureSpec.getMode(measureSpec);</div><div class="line">        int size = MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">        switch (mode) &#123;</div><div class="line">            case MeasureSpec.UNSPECIFIED: &#123;//如果没有指定大小，就设置为默认大小</div><div class="line">                mySize = defaultSize;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            case MeasureSpec.AT_MOST: &#123;//如果测量模式是最大取值为size</div><div class="line">                //我们将大小取最大值,你也可以取其他值</div><div class="line">                mySize = size;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            case MeasureSpec.EXACTLY: &#123;//如果是固定的大小，那就不要去改变它</div><div class="line">                mySize = size;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return mySize;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        int width = getMySize(100, widthMeasureSpec);</div><div class="line">        int height = getMySize(100, heightMeasureSpec);</div><div class="line"></div><div class="line">        if (width &lt; height) &#123;</div><div class="line">            height = width;</div><div class="line">        &#125; else &#123;</div><div class="line">            width = height;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setMeasuredDimension(width, height);//设置测量尺寸</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>完成自定义类的继承拓展后，就可以使用该View了，在xml布局文件中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;[package name].MyView</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;100dp&quot;</div><div class="line">        android:background=&quot;#ff0000&quot; /&gt;</div></pre></td></tr></table></figure></p>
<h3 id="拓展onDraw"><a href="#拓展onDraw" class="headerlink" title="拓展onDraw()"></a>拓展onDraw()</h3><p>onDraw方法用于绘制效果图，super类默认提供了Canvas对象，其具备基本的绘图功能，比如绘制背景颜色、背景图片等，可以直接使用。</p>
<p>若是在上面的onMeasure例子上，在正方形的基础上画圆，可以重写onDraw方法为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        //调用父View的onDraw函数，因为View这个类帮我们实现了一些</div><div class="line">        // 基本的而绘制功能，比如绘制背景颜色、背景图片等</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        int radius = getMeasuredHeight() / 2;//也可以是getMeasuredWidth()/2,本例中已经将宽高设置相等了</div><div class="line">        int centerX = getLeft() + radius;//圆心的横坐标为当前的View的左边起始位置+半径</div><div class="line">        int centerY = getTop() + radius;//圆心的纵坐标为当前的View的顶部起始位置+半径</div><div class="line"></div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setColor(Color.GREEN);</div><div class="line">        canvas.drawCircle(centerX, centerY, radius, paint);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="自定义布局属性"><a href="#自定义布局属性" class="headerlink" title="自定义布局属性"></a>自定义布局属性</h3><p>可以在res/values/styles.xml文件中定义自己的属性（或者新建attr.xml文件），在需要用户来指定某些属性的值的时候，这个是很有用的。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line"></div><div class="line">    &lt;!--name为声明的&quot;属性集合&quot;名，可以随便取，但是最好是设置为跟我们的View一样的名称--&gt;</div><div class="line">    &lt;declare-styleable name=&quot;MyView&quot;&gt;</div><div class="line">        &lt;!--声明我们的属性，名称为default_size,取值类型为尺寸类型（dp,px等）--&gt;</div><div class="line">        &lt;attr name=&quot;default_size&quot; format=&quot;dimension&quot; /&gt;</div><div class="line">    &lt;/declare-styleable&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p>
<p>在xml布局文件中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:hc=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line"></div><div class="line">    &lt;[package name].MyView</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;100dp&quot;</div><div class="line">        hc:default_size=&quot;100dp&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>在Java文件中解析获取该属性的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">private int defalutSize;</div><div class="line">  public MyView(Context context, AttributeSet attrs) &#123;</div><div class="line">      super(context, attrs);</div><div class="line">      //第二个参数就是我们在styles.xml文件中的&lt;declare-styleable&gt;标签</div><div class="line">        //即属性集合的标签，在R文件中名称为R.styleable+name</div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.MyView);</div><div class="line"></div><div class="line">        //第一个参数为属性集合里面的属性，R文件名称：R.styleable+属性集合名称+下划线+属性名称</div><div class="line">        //第二个参数为，如果没有设置这个属性，则设置的默认的值</div><div class="line">        defalutSize = a.getDimensionPixelSize(R.styleable.MyView_default_size, 100);</div><div class="line"></div><div class="line">        //最后记得将TypedArray对象回收</div><div class="line">        a.recycle();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="自定义View完整示例代码"><a href="#自定义View完整示例代码" class="headerlink" title="自定义View完整示例代码"></a>自定义View完整示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">package com.example.linzh.myview;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.content.res.TypedArray;</div><div class="line">import android.graphics.Canvas;</div><div class="line">import android.graphics.Color;</div><div class="line">import android.graphics.Paint;</div><div class="line">import android.support.annotation.Nullable;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.View;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by linzh on 2017/3/28.</div><div class="line"> */</div><div class="line"></div><div class="line">public class MyView extends View &#123;//继承View至少实现两个构造方法</div><div class="line"></div><div class="line">    private int defaultSize;</div><div class="line"></div><div class="line">    public MyView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MyView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        //第二个参数就是我们在styles.xml文件中的&lt;declare-styleable&gt;标签</div><div class="line">        //即属性集合的标签，在R文件中名称为R.styleable+name</div><div class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.MyView);</div><div class="line"></div><div class="line">        //第一个参数为属性集合里面的属性，R文件名称：R.styleable+属性集合名称+下划线+属性名称</div><div class="line">        //第二个参数为，如果没有设置这个属性，则设置的默认的值</div><div class="line">        defaultSize = typedArray.getDimensionPixelSize(R.styleable.MyView_default_size, 100);</div><div class="line"></div><div class="line">        typedArray.recycle();//回收</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        int width = getMySize(100, widthMeasureSpec);</div><div class="line">        int height = getMySize(100, heightMeasureSpec);</div><div class="line"></div><div class="line">        if (width &lt; height) &#123;</div><div class="line">            height = width;</div><div class="line">        &#125; else &#123;</div><div class="line">            width = height;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setMeasuredDimension(width, height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        //调用父View的onDraw函数，因为View这个类帮我们实现了一些</div><div class="line">        // 基本的而绘制功能，比如绘制背景颜色、背景图片等</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        int radius = getMeasuredHeight() / 2;//也可以是getMeasuredWidth()/2,本例中已经将宽高设置相等了</div><div class="line">        int centerX = getLeft() + radius;//圆心的横坐标为当前的View的左边起始位置+半径</div><div class="line">        int centerY = getTop() + radius;//圆心的纵坐标为当前的View的顶部起始位置+半径</div><div class="line"></div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setColor(Color.GREEN);</div><div class="line">        canvas.drawCircle(centerX, centerY, radius, paint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private int getMySize(int defaultSize, int measureSpec) &#123;</div><div class="line">        int mySize = defaultSize;</div><div class="line"></div><div class="line">        int mode = MeasureSpec.getMode(measureSpec);</div><div class="line">        int size = MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">        switch (mode) &#123;</div><div class="line">            case MeasureSpec.UNSPECIFIED://如果没有指定大小，就设置为默认大小</div><div class="line">                mySize = defaultSize;</div><div class="line">                break;</div><div class="line">            case MeasureSpec.AT_MOST://如果测量模式是最大取值为size 类似于wrap_content</div><div class="line">                mySize = size;//这里把值去最大，也可以取其他值</div><div class="line">                break;</div><div class="line">            case MeasureSpec.EXACTLY://如果是固定大小，拿就不要去改变它， 类似于match_parent</div><div class="line">                mySize = size;</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return mySize;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义ViewGroup"><a href="#自定义ViewGroup" class="headerlink" title="自定义ViewGroup"></a>自定义ViewGroup</h2><p>ViewGroup是一到多个View的容器，ViewGroup多大也是要测量好的，而且要根据View来测量。</p>
<h3 id="重写onMeasure"><a href="#重写onMeasure" class="headerlink" title="重写onMeasure"></a>重写onMeasure</h3><p>逐个测量View的大小，并且设定ViewGroup的大小：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">       super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">       //将所有的子View进行测量，这会触发每个子View的onMeasure函数</div><div class="line">       //注意要与measureChild区分，measureChild是对单个view进行测量</div><div class="line">       measureChildren(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">       int widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">       int widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">       int heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">       int heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line"></div><div class="line">       int childCount = getChildCount();</div><div class="line"></div><div class="line">       if (childCount == 0) &#123;//如果没有子View,当前ViewGroup没有存在的意义，不用占用空间</div><div class="line">           setMeasuredDimension(0, 0);</div><div class="line">       &#125; else &#123;</div><div class="line">           //如果宽高都是包裹内容</div><div class="line">           if (widthMode == MeasureSpec.AT_MOST &amp;&amp; heightMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">               //我们将高度设置为所有子View的高度相加，宽度设为子View中最大的宽度</div><div class="line">               int height = getTotleHeight();</div><div class="line">               int width = getMaxChildWidth();</div><div class="line">               setMeasuredDimension(width, height);</div><div class="line"></div><div class="line">           &#125; else if (heightMode == MeasureSpec.AT_MOST) &#123;//如果只有高度是包裹内容</div><div class="line">               //宽度设置为ViewGroup自己的测量宽度，高度设置为所有子View的高度总和</div><div class="line">               setMeasuredDimension(widthSize, getTotleHeight());</div><div class="line">           &#125; else if (widthMode == MeasureSpec.AT_MOST) &#123;//如果只有宽度是包裹内容</div><div class="line">               //宽度设置为子View中宽度最大的值，高度设置为ViewGroup自己的测量值</div><div class="line">               setMeasuredDimension(getMaxChildWidth(), heightSize);</div><div class="line"></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   /***</div><div class="line">    * 获取子View中宽度最大的值</div><div class="line">    */</div><div class="line">   private int getMaxChildWidth() &#123;</div><div class="line">       int childCount = getChildCount();</div><div class="line">       int maxWidth = 0;</div><div class="line">       for (int i = 0; i &lt; childCount; i++) &#123;</div><div class="line">           View childView = getChildAt(i);</div><div class="line">           if (childView.getMeasuredWidth() &gt; maxWidth)</div><div class="line">               maxWidth = childView.getMeasuredWidth();</div><div class="line"></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       return maxWidth;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   /***</div><div class="line">    * 将所有子View的高度相加</div><div class="line">    **/</div><div class="line">   private int getTotleHeight() &#123;</div><div class="line">       int childCount = getChildCount();</div><div class="line">       int height = 0;</div><div class="line">       for (int i = 0; i &lt; childCount; i++) &#123;</div><div class="line">           View childView = getChildAt(i);</div><div class="line">           height += childView.getMeasuredHeight();</div><div class="line"></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       return height;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="重写onLayout"><a href="#重写onLayout" class="headerlink" title="重写onLayout"></a>重写onLayout</h3><p>自定义ViewGroup，重写onLayout方法是有用的，在此方法我们将View逐个摆放到设定好大小的ViewGroup中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">    int count = getChildCount();</div><div class="line">    //记录当前的高度位置</div><div class="line">    int curHeight = t;</div><div class="line">    //将子View逐个摆放</div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        View child = getChildAt(i);</div><div class="line">        int height = child.getMeasuredHeight();</div><div class="line">        int width = child.getMeasuredWidth();</div><div class="line">        //摆放子View，参数分别是子View矩形区域的左、上、右、下边</div><div class="line">        child.layout(l, curHeight, l + width, curHeight + height);</div><div class="line">        curHeight += height;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>完成Java代码的定制，即可在xml布局文件中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:linzh=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.example.linzh.myview.MyViewGroup</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:background=&quot;#ff9900&quot;&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:text=&quot;button&quot; /&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:layout_width=&quot;200dp&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:text=&quot;button&quot; /&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:text=&quot;button&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;/com.example.linzh.myview.MyViewGroup&gt;</div><div class="line"></div><div class="line">    &lt;com.example.linzh.myview.MyView</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;100dp&quot;</div><div class="line">        linzh:default_size=&quot;100dp&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<h3 id="自定制ViewGroup完成示例代码"><a href="#自定制ViewGroup完成示例代码" class="headerlink" title="自定制ViewGroup完成示例代码"></a>自定制ViewGroup完成示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">package com.example.linzh.myview;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.View;</div><div class="line">import android.view.ViewGroup;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by linzh on 2017/3/28.</div><div class="line"> */</div><div class="line"></div><div class="line">public class MyViewGroup extends ViewGroup &#123;//至少实现两个Super类的构造器</div><div class="line"></div><div class="line"></div><div class="line">    public MyViewGroup(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MyViewGroup(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        //将所有的子View进行测量，这会触发每个子View的onMeasure函数</div><div class="line">        //注意要与measureChild区分，measureChild是对单个view进行测量</div><div class="line">        measureChildren(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        int widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">        int widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        int heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">        int heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line"></div><div class="line">        int childCount = getChildCount();</div><div class="line">        if (childCount == 0) &#123;//如果没有子view，当前ViewGroup没有存在的意义，不用占用空间</div><div class="line">            setMeasuredDimension(0, 0);</div><div class="line">        &#125; else &#123;</div><div class="line">            if (widthMode == MeasureSpec.AT_MOST &amp;&amp; heightMode == MeasureSpec.AT_MOST) &#123;//如果宽高都是包裹内容</div><div class="line">                //我们将高度设置为所有子View的高度相加，宽度设为子View中最大的宽度</div><div class="line">                int height = getTotleHeight();</div><div class="line">                int width = getMaxChildWidth();</div><div class="line">                setMeasuredDimension(width, height);</div><div class="line">            &#125; else if (heightMode == MeasureSpec.AT_MOST) &#123;//如果只有高度是包裹内容</div><div class="line">                //宽度设置为ViewGroup自己的测量宽度，高度设置为所有子View的高度总和</div><div class="line">                setMeasuredDimension(widthSize, getTotleHeight());</div><div class="line">            &#125; else if (widthMode == MeasureSpec.AT_MOST) &#123;//如果只有宽度是包裹内容</div><div class="line">                //宽度设置为子View中宽度最大的值，高度设置为ViewGroup自己的测量值</div><div class="line">                setMeasuredDimension(getMaxChildWidth(), heightSize);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">        int count = getChildCount();</div><div class="line">        int curHeight = t;//记录当前的高度位置</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;//将View逐个摆放</div><div class="line">            View view = getChildAt(i);</div><div class="line">            int height = view.getMeasuredHeight();</div><div class="line">            int width = view.getMeasuredWidth();</div><div class="line">            //摆放子View，参数分别是子View矩形区域的左、上、右、下边</div><div class="line">            view.layout(l, curHeight, l + width, curHeight + height);</div><div class="line">            curHeight += height;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取子View中宽度最大的值</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    private int getMaxChildWidth() &#123;</div><div class="line">        int childCount = getChildCount();</div><div class="line">        int maxWidth = 0;</div><div class="line">        for (int i = 0; i &lt; childCount; i++) &#123;</div><div class="line">            View childView = getChildAt(i);</div><div class="line">            if (childView.getMeasuredWidth() &gt; maxWidth) &#123;</div><div class="line">                maxWidth = childView.getMeasuredWidth();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return maxWidth;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /***</div><div class="line">     * 将所有子View的高度相加</div><div class="line">     **/</div><div class="line">    private int getTotleHeight() &#123;</div><div class="line">        int childCount = getChildCount();</div><div class="line">        int height = 0;</div><div class="line">        for (int i = 0; i &lt; childCount; i++) &#123;</div><div class="line">            View childView = getChildAt(i);</div><div class="line">            height += childView.getMeasuredHeight();</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return height;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developer.android.com/guide/topics/ui/custom-components.html#custom" target="_blank" rel="external">Android API指南 Custom Components</a></li>
<li><a href="http://www.jianshu.com/p/c84693096e41" target="_blank" rel="external">自定义View，有这一篇就够了</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android自定义View和ViewGroup&quot;&gt;&lt;a href=&quot;#Android自定义View和ViewGroup&quot; class=&quot;headerlink&quot; title=&quot;Android自定义View和ViewGroup&quot;&gt;&lt;/a&gt;Android自定义View
    
    </summary>
    
    
      <category term="Android" scheme="http://linzhs.cm/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android的单元测试和UI测试基础</title>
    <link href="http://linzhs.cm/2017/05/26/android-test/"/>
    <id>http://linzhs.cm/2017/05/26/android-test/</id>
    <published>2017-05-25T18:07:10.000Z</published>
    <updated>2017-05-25T18:07:10.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android自定义View和ViewGroup"><a href="#Android自定义View和ViewGroup" class="headerlink" title="Android自定义View和ViewGroup"></a>Android自定义View和ViewGroup</h1><blockquote>
<p>Android中提供了丰富、复杂的视图系统，widget类的组件：Button, TextView, EditText, ListView, CheckBox, RadioButton, Gallery, Spinner都是直接或间接继承于super类View，布局类：LinearLayout, FrameLayout, RelativeLayout等则继承于ViewGroup， ViewGroup则继承于View。</p>
<p>所以，要设计构建自己的视图或者布局，就要去继承View或者ViewGroup。本文从使用的角度来总结自定制View和ViewGroup。</p>
</blockquote>
<h2 id="自定义View"><a href="#自定义View" class="headerlink" title="自定义View"></a>自定义View</h2><p>自定义View，最基本的就是继承Android提供的基本视图类View。<br>自定义步骤：</p>
<ul>
<li>自定义View的属性 编写attr.xml文件 </li>
<li>在layout布局文件中引用，同时引用命名空间 </li>
<li>在View的构造方法中获得我们自定义的属性，在自定义控件中进行读取（构造方法拿到attr.xml文件值） </li>
<li>重写onMesure </li>
<li>重写onDraw</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class MyView extends View &#123;</div><div class="line">    public MyView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MyView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继承了View类，还需要重写2个以上的构造方法（以上示例为常用重写构造方法）和onMeasure(), onDraw()方法，在View继承中，onLayout()是非必须的。</p>
<h3 id="拓展onMeasure"><a href="#拓展onMeasure" class="headerlink" title="拓展onMeasure()"></a>拓展onMeasure()</h3><p>自定义View都要自己来测量控制宽高尺寸，算出自己需要占用多大的面积。我们常在xml布局文件中用match_parent和wrap_content，这两属性都是依赖于父布局的，没有父布局就没法正确定位宽高。</p>
<p>这里存在一个疑问，就是如果我们在activity_main.xml中的代码如下，layout_width和layout_height指定的值也都为match_parent，其父布局又在哪呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:linzh=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:id=&quot;@+id/main_layout&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>我们在MainActivity.java中进行测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private LinearLayout linearLayout;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        linearLayout = (LinearLayout)findViewById(R.id.main_layout);</div><div class="line">        LayoutInflater layoutInflater = LayoutInflater.from(this);</div><div class="line">        View buttonLayout = layoutInflater.inflate(R.layout.button_layout, null);</div><div class="line">        linearLayout.addView(buttonLayout);</div><div class="line"></div><div class="line">        ViewParent viewParent = linearLayout.getParent();//获取父布局的名字</div><div class="line">        Log.d(&quot;MainActivity&quot;, &quot;The parent of main linear layout is &quot; + viewParent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行以上App，可以在logcat中打印出如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The parent of main linear layout is android.support.v7.widget.ContentFrameLayout&#123;2ef2e36 V.E...... ......I. 0,0-0,0 #1020002 android:id/content&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：以上运行API level 为25</p>
</blockquote>
<p>从logcat的信息可知，我们在每个xml文件的布局的最外层，Android还自动帮我们加了一个FrameLayout/ContentFrameLayout，在自动嵌套的父布局里，有一部分是content，就是默认放label的地方，对应setContentView方法，在此之下才是我们自己定义的布局文件的内容。</p>
<p>onMeasure方法的原型如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)</div></pre></td></tr></table></figure></p>
<p>在参数中，widthMeasureSpec和heightMeasureSpec都为int，但是每个int都包含着两个信息，分别是尺寸和测量模式，一般情况下，int是32位的，Android把其中的30位用做尺寸大小存储，2bit用做测量模式存储。</p>
<p>2bit来存测量模式信息，也就是最多有4种模式，Android提供了3种测量模式，如下：</p>
<table>
<thead>
<tr>
<th>测量模式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>UNSPECIFIED</td>
<td>父容器没有对当前View有任何限制，当前View可以任意取尺寸 极少用</td>
</tr>
<tr>
<td>EXACTLY</td>
<td>父布局要求的精确尺寸，必须用这个尺寸作为View尺寸</td>
</tr>
<tr>
<td>AT_MOST</td>
<td>父布局给予View最大的尺寸，当前的View能取的尺寸为这个</td>
</tr>
</tbody>
</table>
<p>测量模式和实际布局应用的属性值的关系：</p>
<ul>
<li>match_parent  -&gt;  EXACTLY</li>
<li>wrap_content  -&gt;  AT_MOST</li>
<li>指定尺寸      -&gt;  EXACTLY</li>
</ul>
<p>如何获取widthMeasureSpec和heightMeasureSpec中的测量模式和尺寸大小？Android库中提供了两个方法，用来提取这两个信息，其实现细节就是进行了位运算，将前2-bit当做测量模式，后30-bit作为尺寸大小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">int widthSize = MeasureSpec.getSize(widthMeasureSpec);</div></pre></td></tr></table></figure></p>
<p>重写onMeasure方法示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">private int getMySize(int defaultSize, int measureSpec) &#123;</div><div class="line">        int mySize = defaultSize;</div><div class="line"></div><div class="line">        int mode = MeasureSpec.getMode(measureSpec);</div><div class="line">        int size = MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">        switch (mode) &#123;</div><div class="line">            case MeasureSpec.UNSPECIFIED: &#123;//如果没有指定大小，就设置为默认大小</div><div class="line">                mySize = defaultSize;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            case MeasureSpec.AT_MOST: &#123;//如果测量模式是最大取值为size</div><div class="line">                //我们将大小取最大值,你也可以取其他值</div><div class="line">                mySize = size;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            case MeasureSpec.EXACTLY: &#123;//如果是固定的大小，那就不要去改变它</div><div class="line">                mySize = size;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return mySize;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        int width = getMySize(100, widthMeasureSpec);</div><div class="line">        int height = getMySize(100, heightMeasureSpec);</div><div class="line"></div><div class="line">        if (width &lt; height) &#123;</div><div class="line">            height = width;</div><div class="line">        &#125; else &#123;</div><div class="line">            width = height;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setMeasuredDimension(width, height);//设置测量尺寸</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>完成自定义类的继承拓展后，就可以使用该View了，在xml布局文件中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;[package name].MyView</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;100dp&quot;</div><div class="line">        android:background=&quot;#ff0000&quot; /&gt;</div></pre></td></tr></table></figure></p>
<h3 id="拓展onDraw"><a href="#拓展onDraw" class="headerlink" title="拓展onDraw()"></a>拓展onDraw()</h3><p>onDraw方法用于绘制效果图，super类默认提供了Canvas对象，其具备基本的绘图功能，比如绘制背景颜色、背景图片等，可以直接使用。</p>
<p>若是在上面的onMeasure例子上，在正方形的基础上画圆，可以重写onDraw方法为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        //调用父View的onDraw函数，因为View这个类帮我们实现了一些</div><div class="line">        // 基本的而绘制功能，比如绘制背景颜色、背景图片等</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        int radius = getMeasuredHeight() / 2;//也可以是getMeasuredWidth()/2,本例中已经将宽高设置相等了</div><div class="line">        int centerX = getLeft() + radius;//圆心的横坐标为当前的View的左边起始位置+半径</div><div class="line">        int centerY = getTop() + radius;//圆心的纵坐标为当前的View的顶部起始位置+半径</div><div class="line"></div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setColor(Color.GREEN);</div><div class="line">        canvas.drawCircle(centerX, centerY, radius, paint);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="自定义布局属性"><a href="#自定义布局属性" class="headerlink" title="自定义布局属性"></a>自定义布局属性</h3><p>可以在res/values/styles.xml文件中定义自己的属性（或者新建attr.xml文件），在需要用户来指定某些属性的值的时候，这个是很有用的。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line"></div><div class="line">    &lt;!--name为声明的&quot;属性集合&quot;名，可以随便取，但是最好是设置为跟我们的View一样的名称--&gt;</div><div class="line">    &lt;declare-styleable name=&quot;MyView&quot;&gt;</div><div class="line">        &lt;!--声明我们的属性，名称为default_size,取值类型为尺寸类型（dp,px等）--&gt;</div><div class="line">        &lt;attr name=&quot;default_size&quot; format=&quot;dimension&quot; /&gt;</div><div class="line">    &lt;/declare-styleable&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p>
<p>在xml布局文件中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:hc=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line"></div><div class="line">    &lt;[package name].MyView</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;100dp&quot;</div><div class="line">        hc:default_size=&quot;100dp&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>在Java文件中解析获取该属性的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">private int defalutSize;</div><div class="line">  public MyView(Context context, AttributeSet attrs) &#123;</div><div class="line">      super(context, attrs);</div><div class="line">      //第二个参数就是我们在styles.xml文件中的&lt;declare-styleable&gt;标签</div><div class="line">        //即属性集合的标签，在R文件中名称为R.styleable+name</div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.MyView);</div><div class="line"></div><div class="line">        //第一个参数为属性集合里面的属性，R文件名称：R.styleable+属性集合名称+下划线+属性名称</div><div class="line">        //第二个参数为，如果没有设置这个属性，则设置的默认的值</div><div class="line">        defalutSize = a.getDimensionPixelSize(R.styleable.MyView_default_size, 100);</div><div class="line"></div><div class="line">        //最后记得将TypedArray对象回收</div><div class="line">        a.recycle();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="自定义View完整示例代码"><a href="#自定义View完整示例代码" class="headerlink" title="自定义View完整示例代码"></a>自定义View完整示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">package com.example.linzh.myview;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.content.res.TypedArray;</div><div class="line">import android.graphics.Canvas;</div><div class="line">import android.graphics.Color;</div><div class="line">import android.graphics.Paint;</div><div class="line">import android.support.annotation.Nullable;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.View;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by linzh on 2017/3/28.</div><div class="line"> */</div><div class="line"></div><div class="line">public class MyView extends View &#123;//继承View至少实现两个构造方法</div><div class="line"></div><div class="line">    private int defaultSize;</div><div class="line"></div><div class="line">    public MyView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MyView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        //第二个参数就是我们在styles.xml文件中的&lt;declare-styleable&gt;标签</div><div class="line">        //即属性集合的标签，在R文件中名称为R.styleable+name</div><div class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.MyView);</div><div class="line"></div><div class="line">        //第一个参数为属性集合里面的属性，R文件名称：R.styleable+属性集合名称+下划线+属性名称</div><div class="line">        //第二个参数为，如果没有设置这个属性，则设置的默认的值</div><div class="line">        defaultSize = typedArray.getDimensionPixelSize(R.styleable.MyView_default_size, 100);</div><div class="line"></div><div class="line">        typedArray.recycle();//回收</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        int width = getMySize(100, widthMeasureSpec);</div><div class="line">        int height = getMySize(100, heightMeasureSpec);</div><div class="line"></div><div class="line">        if (width &lt; height) &#123;</div><div class="line">            height = width;</div><div class="line">        &#125; else &#123;</div><div class="line">            width = height;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setMeasuredDimension(width, height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        //调用父View的onDraw函数，因为View这个类帮我们实现了一些</div><div class="line">        // 基本的而绘制功能，比如绘制背景颜色、背景图片等</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        int radius = getMeasuredHeight() / 2;//也可以是getMeasuredWidth()/2,本例中已经将宽高设置相等了</div><div class="line">        int centerX = getLeft() + radius;//圆心的横坐标为当前的View的左边起始位置+半径</div><div class="line">        int centerY = getTop() + radius;//圆心的纵坐标为当前的View的顶部起始位置+半径</div><div class="line"></div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setColor(Color.GREEN);</div><div class="line">        canvas.drawCircle(centerX, centerY, radius, paint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private int getMySize(int defaultSize, int measureSpec) &#123;</div><div class="line">        int mySize = defaultSize;</div><div class="line"></div><div class="line">        int mode = MeasureSpec.getMode(measureSpec);</div><div class="line">        int size = MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">        switch (mode) &#123;</div><div class="line">            case MeasureSpec.UNSPECIFIED://如果没有指定大小，就设置为默认大小</div><div class="line">                mySize = defaultSize;</div><div class="line">                break;</div><div class="line">            case MeasureSpec.AT_MOST://如果测量模式是最大取值为size 类似于wrap_content</div><div class="line">                mySize = size;//这里把值去最大，也可以取其他值</div><div class="line">                break;</div><div class="line">            case MeasureSpec.EXACTLY://如果是固定大小，拿就不要去改变它， 类似于match_parent</div><div class="line">                mySize = size;</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return mySize;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义ViewGroup"><a href="#自定义ViewGroup" class="headerlink" title="自定义ViewGroup"></a>自定义ViewGroup</h2><p>ViewGroup是一到多个View的容器，ViewGroup多大也是要测量好的，而且要根据View来测量。</p>
<h3 id="重写onMeasure"><a href="#重写onMeasure" class="headerlink" title="重写onMeasure"></a>重写onMeasure</h3><p>逐个测量View的大小，并且设定ViewGroup的大小：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">       super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">       //将所有的子View进行测量，这会触发每个子View的onMeasure函数</div><div class="line">       //注意要与measureChild区分，measureChild是对单个view进行测量</div><div class="line">       measureChildren(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">       int widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">       int widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">       int heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">       int heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line"></div><div class="line">       int childCount = getChildCount();</div><div class="line"></div><div class="line">       if (childCount == 0) &#123;//如果没有子View,当前ViewGroup没有存在的意义，不用占用空间</div><div class="line">           setMeasuredDimension(0, 0);</div><div class="line">       &#125; else &#123;</div><div class="line">           //如果宽高都是包裹内容</div><div class="line">           if (widthMode == MeasureSpec.AT_MOST &amp;&amp; heightMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">               //我们将高度设置为所有子View的高度相加，宽度设为子View中最大的宽度</div><div class="line">               int height = getTotleHeight();</div><div class="line">               int width = getMaxChildWidth();</div><div class="line">               setMeasuredDimension(width, height);</div><div class="line"></div><div class="line">           &#125; else if (heightMode == MeasureSpec.AT_MOST) &#123;//如果只有高度是包裹内容</div><div class="line">               //宽度设置为ViewGroup自己的测量宽度，高度设置为所有子View的高度总和</div><div class="line">               setMeasuredDimension(widthSize, getTotleHeight());</div><div class="line">           &#125; else if (widthMode == MeasureSpec.AT_MOST) &#123;//如果只有宽度是包裹内容</div><div class="line">               //宽度设置为子View中宽度最大的值，高度设置为ViewGroup自己的测量值</div><div class="line">               setMeasuredDimension(getMaxChildWidth(), heightSize);</div><div class="line"></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   /***</div><div class="line">    * 获取子View中宽度最大的值</div><div class="line">    */</div><div class="line">   private int getMaxChildWidth() &#123;</div><div class="line">       int childCount = getChildCount();</div><div class="line">       int maxWidth = 0;</div><div class="line">       for (int i = 0; i &lt; childCount; i++) &#123;</div><div class="line">           View childView = getChildAt(i);</div><div class="line">           if (childView.getMeasuredWidth() &gt; maxWidth)</div><div class="line">               maxWidth = childView.getMeasuredWidth();</div><div class="line"></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       return maxWidth;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   /***</div><div class="line">    * 将所有子View的高度相加</div><div class="line">    **/</div><div class="line">   private int getTotleHeight() &#123;</div><div class="line">       int childCount = getChildCount();</div><div class="line">       int height = 0;</div><div class="line">       for (int i = 0; i &lt; childCount; i++) &#123;</div><div class="line">           View childView = getChildAt(i);</div><div class="line">           height += childView.getMeasuredHeight();</div><div class="line"></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       return height;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="重写onLayout"><a href="#重写onLayout" class="headerlink" title="重写onLayout"></a>重写onLayout</h3><p>自定义ViewGroup，重写onLayout方法是有用的，在此方法我们将View逐个摆放到设定好大小的ViewGroup中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">    int count = getChildCount();</div><div class="line">    //记录当前的高度位置</div><div class="line">    int curHeight = t;</div><div class="line">    //将子View逐个摆放</div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        View child = getChildAt(i);</div><div class="line">        int height = child.getMeasuredHeight();</div><div class="line">        int width = child.getMeasuredWidth();</div><div class="line">        //摆放子View，参数分别是子View矩形区域的左、上、右、下边</div><div class="line">        child.layout(l, curHeight, l + width, curHeight + height);</div><div class="line">        curHeight += height;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>完成Java代码的定制，即可在xml布局文件中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:linzh=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.example.linzh.myview.MyViewGroup</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:background=&quot;#ff9900&quot;&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:text=&quot;button&quot; /&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:layout_width=&quot;200dp&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:text=&quot;button&quot; /&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:text=&quot;button&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;/com.example.linzh.myview.MyViewGroup&gt;</div><div class="line"></div><div class="line">    &lt;com.example.linzh.myview.MyView</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;100dp&quot;</div><div class="line">        linzh:default_size=&quot;100dp&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<h3 id="自定制ViewGroup完成示例代码"><a href="#自定制ViewGroup完成示例代码" class="headerlink" title="自定制ViewGroup完成示例代码"></a>自定制ViewGroup完成示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">package com.example.linzh.myview;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.View;</div><div class="line">import android.view.ViewGroup;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by linzh on 2017/3/28.</div><div class="line"> */</div><div class="line"></div><div class="line">public class MyViewGroup extends ViewGroup &#123;//至少实现两个Super类的构造器</div><div class="line"></div><div class="line"></div><div class="line">    public MyViewGroup(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MyViewGroup(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        //将所有的子View进行测量，这会触发每个子View的onMeasure函数</div><div class="line">        //注意要与measureChild区分，measureChild是对单个view进行测量</div><div class="line">        measureChildren(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        int widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">        int widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        int heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">        int heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line"></div><div class="line">        int childCount = getChildCount();</div><div class="line">        if (childCount == 0) &#123;//如果没有子view，当前ViewGroup没有存在的意义，不用占用空间</div><div class="line">            setMeasuredDimension(0, 0);</div><div class="line">        &#125; else &#123;</div><div class="line">            if (widthMode == MeasureSpec.AT_MOST &amp;&amp; heightMode == MeasureSpec.AT_MOST) &#123;//如果宽高都是包裹内容</div><div class="line">                //我们将高度设置为所有子View的高度相加，宽度设为子View中最大的宽度</div><div class="line">                int height = getTotleHeight();</div><div class="line">                int width = getMaxChildWidth();</div><div class="line">                setMeasuredDimension(width, height);</div><div class="line">            &#125; else if (heightMode == MeasureSpec.AT_MOST) &#123;//如果只有高度是包裹内容</div><div class="line">                //宽度设置为ViewGroup自己的测量宽度，高度设置为所有子View的高度总和</div><div class="line">                setMeasuredDimension(widthSize, getTotleHeight());</div><div class="line">            &#125; else if (widthMode == MeasureSpec.AT_MOST) &#123;//如果只有宽度是包裹内容</div><div class="line">                //宽度设置为子View中宽度最大的值，高度设置为ViewGroup自己的测量值</div><div class="line">                setMeasuredDimension(getMaxChildWidth(), heightSize);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">        int count = getChildCount();</div><div class="line">        int curHeight = t;//记录当前的高度位置</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;//将View逐个摆放</div><div class="line">            View view = getChildAt(i);</div><div class="line">            int height = view.getMeasuredHeight();</div><div class="line">            int width = view.getMeasuredWidth();</div><div class="line">            //摆放子View，参数分别是子View矩形区域的左、上、右、下边</div><div class="line">            view.layout(l, curHeight, l + width, curHeight + height);</div><div class="line">            curHeight += height;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取子View中宽度最大的值</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    private int getMaxChildWidth() &#123;</div><div class="line">        int childCount = getChildCount();</div><div class="line">        int maxWidth = 0;</div><div class="line">        for (int i = 0; i &lt; childCount; i++) &#123;</div><div class="line">            View childView = getChildAt(i);</div><div class="line">            if (childView.getMeasuredWidth() &gt; maxWidth) &#123;</div><div class="line">                maxWidth = childView.getMeasuredWidth();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return maxWidth;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /***</div><div class="line">     * 将所有子View的高度相加</div><div class="line">     **/</div><div class="line">    private int getTotleHeight() &#123;</div><div class="line">        int childCount = getChildCount();</div><div class="line">        int height = 0;</div><div class="line">        for (int i = 0; i &lt; childCount; i++) &#123;</div><div class="line">            View childView = getChildAt(i);</div><div class="line">            height += childView.getMeasuredHeight();</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return height;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developer.android.com/guide/topics/ui/custom-components.html#custom" target="_blank" rel="external">Android API指南 Custom Components</a></li>
<li><a href="http://www.jianshu.com/p/c84693096e41" target="_blank" rel="external">自定义View，有这一篇就够了</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android自定义View和ViewGroup&quot;&gt;&lt;a href=&quot;#Android自定义View和ViewGroup&quot; class=&quot;headerlink&quot; title=&quot;Android自定义View和ViewGroup&quot;&gt;&lt;/a&gt;Android自定义View
    
    </summary>
    
    
      <category term="Android" scheme="http://linzhs.cm/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义View和ViewGroup</title>
    <link href="http://linzhs.cm/2017/05/26/android-view-def/"/>
    <id>http://linzhs.cm/2017/05/26/android-view-def/</id>
    <published>2017-05-25T18:05:33.000Z</published>
    <updated>2017-05-25T18:05:33.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android自定义View和ViewGroup"><a href="#Android自定义View和ViewGroup" class="headerlink" title="Android自定义View和ViewGroup"></a>Android自定义View和ViewGroup</h1><blockquote>
<p>Android中提供了丰富、复杂的视图系统，widget类的组件：Button, TextView, EditText, ListView, CheckBox, RadioButton, Gallery, Spinner都是直接或间接继承于super类View，布局类：LinearLayout, FrameLayout, RelativeLayout等则继承于ViewGroup， ViewGroup则继承于View。</p>
<p>所以，要设计构建自己的视图或者布局，就要去继承View或者ViewGroup。本文从使用的角度来总结自定制View和ViewGroup。</p>
</blockquote>
<h2 id="自定义View"><a href="#自定义View" class="headerlink" title="自定义View"></a>自定义View</h2><p>自定义View，最基本的就是继承Android提供的基本视图类View。<br>自定义步骤：</p>
<ul>
<li>自定义View的属性 编写attr.xml文件 </li>
<li>在layout布局文件中引用，同时引用命名空间 </li>
<li>在View的构造方法中获得我们自定义的属性，在自定义控件中进行读取（构造方法拿到attr.xml文件值） </li>
<li>重写onMesure </li>
<li>重写onDraw</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class MyView extends View &#123;</div><div class="line">    public MyView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MyView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继承了View类，还需要重写2个以上的构造方法（以上示例为常用重写构造方法）和onMeasure(), onDraw()方法，在View继承中，onLayout()是非必须的。</p>
<h3 id="拓展onMeasure"><a href="#拓展onMeasure" class="headerlink" title="拓展onMeasure()"></a>拓展onMeasure()</h3><p>自定义View都要自己来测量控制宽高尺寸，算出自己需要占用多大的面积。我们常在xml布局文件中用match_parent和wrap_content，这两属性都是依赖于父布局的，没有父布局就没法正确定位宽高。</p>
<p>这里存在一个疑问，就是如果我们在activity_main.xml中的代码如下，layout_width和layout_height指定的值也都为match_parent，其父布局又在哪呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:linzh=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:id=&quot;@+id/main_layout&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>我们在MainActivity.java中进行测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private LinearLayout linearLayout;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        linearLayout = (LinearLayout)findViewById(R.id.main_layout);</div><div class="line">        LayoutInflater layoutInflater = LayoutInflater.from(this);</div><div class="line">        View buttonLayout = layoutInflater.inflate(R.layout.button_layout, null);</div><div class="line">        linearLayout.addView(buttonLayout);</div><div class="line"></div><div class="line">        ViewParent viewParent = linearLayout.getParent();//获取父布局的名字</div><div class="line">        Log.d(&quot;MainActivity&quot;, &quot;The parent of main linear layout is &quot; + viewParent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行以上App，可以在logcat中打印出如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The parent of main linear layout is android.support.v7.widget.ContentFrameLayout&#123;2ef2e36 V.E...... ......I. 0,0-0,0 #1020002 android:id/content&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：以上运行API level 为25</p>
</blockquote>
<p>从logcat的信息可知，我们在每个xml文件的布局的最外层，Android还自动帮我们加了一个FrameLayout/ContentFrameLayout，在自动嵌套的父布局里，有一部分是content，就是默认放label的地方，对应setContentView方法，在此之下才是我们自己定义的布局文件的内容。</p>
<p>onMeasure方法的原型如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)</div></pre></td></tr></table></figure></p>
<p>在参数中，widthMeasureSpec和heightMeasureSpec都为int，但是每个int都包含着两个信息，分别是尺寸和测量模式，一般情况下，int是32位的，Android把其中的30位用做尺寸大小存储，2bit用做测量模式存储。</p>
<p>2bit来存测量模式信息，也就是最多有4种模式，Android提供了3种测量模式，如下：</p>
<table>
<thead>
<tr>
<th>测量模式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>UNSPECIFIED</td>
<td>父容器没有对当前View有任何限制，当前View可以任意取尺寸 极少用</td>
</tr>
<tr>
<td>EXACTLY</td>
<td>父布局要求的精确尺寸，必须用这个尺寸作为View尺寸</td>
</tr>
<tr>
<td>AT_MOST</td>
<td>父布局给予View最大的尺寸，当前的View能取的尺寸为这个</td>
</tr>
</tbody>
</table>
<p>测量模式和实际布局应用的属性值的关系：</p>
<ul>
<li>match_parent  -&gt;  EXACTLY</li>
<li>wrap_content  -&gt;  AT_MOST</li>
<li>指定尺寸      -&gt;  EXACTLY</li>
</ul>
<p>如何获取widthMeasureSpec和heightMeasureSpec中的测量模式和尺寸大小？Android库中提供了两个方法，用来提取这两个信息，其实现细节就是进行了位运算，将前2-bit当做测量模式，后30-bit作为尺寸大小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">int widthSize = MeasureSpec.getSize(widthMeasureSpec);</div></pre></td></tr></table></figure></p>
<p>重写onMeasure方法示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">private int getMySize(int defaultSize, int measureSpec) &#123;</div><div class="line">        int mySize = defaultSize;</div><div class="line"></div><div class="line">        int mode = MeasureSpec.getMode(measureSpec);</div><div class="line">        int size = MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">        switch (mode) &#123;</div><div class="line">            case MeasureSpec.UNSPECIFIED: &#123;//如果没有指定大小，就设置为默认大小</div><div class="line">                mySize = defaultSize;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            case MeasureSpec.AT_MOST: &#123;//如果测量模式是最大取值为size</div><div class="line">                //我们将大小取最大值,你也可以取其他值</div><div class="line">                mySize = size;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            case MeasureSpec.EXACTLY: &#123;//如果是固定的大小，那就不要去改变它</div><div class="line">                mySize = size;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return mySize;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        int width = getMySize(100, widthMeasureSpec);</div><div class="line">        int height = getMySize(100, heightMeasureSpec);</div><div class="line"></div><div class="line">        if (width &lt; height) &#123;</div><div class="line">            height = width;</div><div class="line">        &#125; else &#123;</div><div class="line">            width = height;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setMeasuredDimension(width, height);//设置测量尺寸</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>完成自定义类的继承拓展后，就可以使用该View了，在xml布局文件中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;[package name].MyView</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;100dp&quot;</div><div class="line">        android:background=&quot;#ff0000&quot; /&gt;</div></pre></td></tr></table></figure></p>
<h3 id="拓展onDraw"><a href="#拓展onDraw" class="headerlink" title="拓展onDraw()"></a>拓展onDraw()</h3><p>onDraw方法用于绘制效果图，super类默认提供了Canvas对象，其具备基本的绘图功能，比如绘制背景颜色、背景图片等，可以直接使用。</p>
<p>若是在上面的onMeasure例子上，在正方形的基础上画圆，可以重写onDraw方法为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        //调用父View的onDraw函数，因为View这个类帮我们实现了一些</div><div class="line">        // 基本的而绘制功能，比如绘制背景颜色、背景图片等</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        int radius = getMeasuredHeight() / 2;//也可以是getMeasuredWidth()/2,本例中已经将宽高设置相等了</div><div class="line">        int centerX = getLeft() + radius;//圆心的横坐标为当前的View的左边起始位置+半径</div><div class="line">        int centerY = getTop() + radius;//圆心的纵坐标为当前的View的顶部起始位置+半径</div><div class="line"></div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setColor(Color.GREEN);</div><div class="line">        canvas.drawCircle(centerX, centerY, radius, paint);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="自定义布局属性"><a href="#自定义布局属性" class="headerlink" title="自定义布局属性"></a>自定义布局属性</h3><p>可以在res/values/styles.xml文件中定义自己的属性（或者新建attr.xml文件），在需要用户来指定某些属性的值的时候，这个是很有用的。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line"></div><div class="line">    &lt;!--name为声明的&quot;属性集合&quot;名，可以随便取，但是最好是设置为跟我们的View一样的名称--&gt;</div><div class="line">    &lt;declare-styleable name=&quot;MyView&quot;&gt;</div><div class="line">        &lt;!--声明我们的属性，名称为default_size,取值类型为尺寸类型（dp,px等）--&gt;</div><div class="line">        &lt;attr name=&quot;default_size&quot; format=&quot;dimension&quot; /&gt;</div><div class="line">    &lt;/declare-styleable&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p>
<p>在xml布局文件中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:hc=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line"></div><div class="line">    &lt;[package name].MyView</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;100dp&quot;</div><div class="line">        hc:default_size=&quot;100dp&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>在Java文件中解析获取该属性的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">private int defalutSize;</div><div class="line">  public MyView(Context context, AttributeSet attrs) &#123;</div><div class="line">      super(context, attrs);</div><div class="line">      //第二个参数就是我们在styles.xml文件中的&lt;declare-styleable&gt;标签</div><div class="line">        //即属性集合的标签，在R文件中名称为R.styleable+name</div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.MyView);</div><div class="line"></div><div class="line">        //第一个参数为属性集合里面的属性，R文件名称：R.styleable+属性集合名称+下划线+属性名称</div><div class="line">        //第二个参数为，如果没有设置这个属性，则设置的默认的值</div><div class="line">        defalutSize = a.getDimensionPixelSize(R.styleable.MyView_default_size, 100);</div><div class="line"></div><div class="line">        //最后记得将TypedArray对象回收</div><div class="line">        a.recycle();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="自定义View完整示例代码"><a href="#自定义View完整示例代码" class="headerlink" title="自定义View完整示例代码"></a>自定义View完整示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">package com.example.linzh.myview;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.content.res.TypedArray;</div><div class="line">import android.graphics.Canvas;</div><div class="line">import android.graphics.Color;</div><div class="line">import android.graphics.Paint;</div><div class="line">import android.support.annotation.Nullable;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.View;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by linzh on 2017/3/28.</div><div class="line"> */</div><div class="line"></div><div class="line">public class MyView extends View &#123;//继承View至少实现两个构造方法</div><div class="line"></div><div class="line">    private int defaultSize;</div><div class="line"></div><div class="line">    public MyView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MyView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        //第二个参数就是我们在styles.xml文件中的&lt;declare-styleable&gt;标签</div><div class="line">        //即属性集合的标签，在R文件中名称为R.styleable+name</div><div class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.MyView);</div><div class="line"></div><div class="line">        //第一个参数为属性集合里面的属性，R文件名称：R.styleable+属性集合名称+下划线+属性名称</div><div class="line">        //第二个参数为，如果没有设置这个属性，则设置的默认的值</div><div class="line">        defaultSize = typedArray.getDimensionPixelSize(R.styleable.MyView_default_size, 100);</div><div class="line"></div><div class="line">        typedArray.recycle();//回收</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        int width = getMySize(100, widthMeasureSpec);</div><div class="line">        int height = getMySize(100, heightMeasureSpec);</div><div class="line"></div><div class="line">        if (width &lt; height) &#123;</div><div class="line">            height = width;</div><div class="line">        &#125; else &#123;</div><div class="line">            width = height;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setMeasuredDimension(width, height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        //调用父View的onDraw函数，因为View这个类帮我们实现了一些</div><div class="line">        // 基本的而绘制功能，比如绘制背景颜色、背景图片等</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        int radius = getMeasuredHeight() / 2;//也可以是getMeasuredWidth()/2,本例中已经将宽高设置相等了</div><div class="line">        int centerX = getLeft() + radius;//圆心的横坐标为当前的View的左边起始位置+半径</div><div class="line">        int centerY = getTop() + radius;//圆心的纵坐标为当前的View的顶部起始位置+半径</div><div class="line"></div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setColor(Color.GREEN);</div><div class="line">        canvas.drawCircle(centerX, centerY, radius, paint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private int getMySize(int defaultSize, int measureSpec) &#123;</div><div class="line">        int mySize = defaultSize;</div><div class="line"></div><div class="line">        int mode = MeasureSpec.getMode(measureSpec);</div><div class="line">        int size = MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">        switch (mode) &#123;</div><div class="line">            case MeasureSpec.UNSPECIFIED://如果没有指定大小，就设置为默认大小</div><div class="line">                mySize = defaultSize;</div><div class="line">                break;</div><div class="line">            case MeasureSpec.AT_MOST://如果测量模式是最大取值为size 类似于wrap_content</div><div class="line">                mySize = size;//这里把值去最大，也可以取其他值</div><div class="line">                break;</div><div class="line">            case MeasureSpec.EXACTLY://如果是固定大小，拿就不要去改变它， 类似于match_parent</div><div class="line">                mySize = size;</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return mySize;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义ViewGroup"><a href="#自定义ViewGroup" class="headerlink" title="自定义ViewGroup"></a>自定义ViewGroup</h2><p>ViewGroup是一到多个View的容器，ViewGroup多大也是要测量好的，而且要根据View来测量。</p>
<h3 id="重写onMeasure"><a href="#重写onMeasure" class="headerlink" title="重写onMeasure"></a>重写onMeasure</h3><p>逐个测量View的大小，并且设定ViewGroup的大小：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">       super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">       //将所有的子View进行测量，这会触发每个子View的onMeasure函数</div><div class="line">       //注意要与measureChild区分，measureChild是对单个view进行测量</div><div class="line">       measureChildren(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">       int widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">       int widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">       int heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">       int heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line"></div><div class="line">       int childCount = getChildCount();</div><div class="line"></div><div class="line">       if (childCount == 0) &#123;//如果没有子View,当前ViewGroup没有存在的意义，不用占用空间</div><div class="line">           setMeasuredDimension(0, 0);</div><div class="line">       &#125; else &#123;</div><div class="line">           //如果宽高都是包裹内容</div><div class="line">           if (widthMode == MeasureSpec.AT_MOST &amp;&amp; heightMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">               //我们将高度设置为所有子View的高度相加，宽度设为子View中最大的宽度</div><div class="line">               int height = getTotleHeight();</div><div class="line">               int width = getMaxChildWidth();</div><div class="line">               setMeasuredDimension(width, height);</div><div class="line"></div><div class="line">           &#125; else if (heightMode == MeasureSpec.AT_MOST) &#123;//如果只有高度是包裹内容</div><div class="line">               //宽度设置为ViewGroup自己的测量宽度，高度设置为所有子View的高度总和</div><div class="line">               setMeasuredDimension(widthSize, getTotleHeight());</div><div class="line">           &#125; else if (widthMode == MeasureSpec.AT_MOST) &#123;//如果只有宽度是包裹内容</div><div class="line">               //宽度设置为子View中宽度最大的值，高度设置为ViewGroup自己的测量值</div><div class="line">               setMeasuredDimension(getMaxChildWidth(), heightSize);</div><div class="line"></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   /***</div><div class="line">    * 获取子View中宽度最大的值</div><div class="line">    */</div><div class="line">   private int getMaxChildWidth() &#123;</div><div class="line">       int childCount = getChildCount();</div><div class="line">       int maxWidth = 0;</div><div class="line">       for (int i = 0; i &lt; childCount; i++) &#123;</div><div class="line">           View childView = getChildAt(i);</div><div class="line">           if (childView.getMeasuredWidth() &gt; maxWidth)</div><div class="line">               maxWidth = childView.getMeasuredWidth();</div><div class="line"></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       return maxWidth;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   /***</div><div class="line">    * 将所有子View的高度相加</div><div class="line">    **/</div><div class="line">   private int getTotleHeight() &#123;</div><div class="line">       int childCount = getChildCount();</div><div class="line">       int height = 0;</div><div class="line">       for (int i = 0; i &lt; childCount; i++) &#123;</div><div class="line">           View childView = getChildAt(i);</div><div class="line">           height += childView.getMeasuredHeight();</div><div class="line"></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       return height;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="重写onLayout"><a href="#重写onLayout" class="headerlink" title="重写onLayout"></a>重写onLayout</h3><p>自定义ViewGroup，重写onLayout方法是有用的，在此方法我们将View逐个摆放到设定好大小的ViewGroup中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">    int count = getChildCount();</div><div class="line">    //记录当前的高度位置</div><div class="line">    int curHeight = t;</div><div class="line">    //将子View逐个摆放</div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        View child = getChildAt(i);</div><div class="line">        int height = child.getMeasuredHeight();</div><div class="line">        int width = child.getMeasuredWidth();</div><div class="line">        //摆放子View，参数分别是子View矩形区域的左、上、右、下边</div><div class="line">        child.layout(l, curHeight, l + width, curHeight + height);</div><div class="line">        curHeight += height;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>完成Java代码的定制，即可在xml布局文件中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:linzh=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.example.linzh.myview.MyViewGroup</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:background=&quot;#ff9900&quot;&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:text=&quot;button&quot; /&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:layout_width=&quot;200dp&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:text=&quot;button&quot; /&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:text=&quot;button&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;/com.example.linzh.myview.MyViewGroup&gt;</div><div class="line"></div><div class="line">    &lt;com.example.linzh.myview.MyView</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;100dp&quot;</div><div class="line">        linzh:default_size=&quot;100dp&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<h3 id="自定制ViewGroup完成示例代码"><a href="#自定制ViewGroup完成示例代码" class="headerlink" title="自定制ViewGroup完成示例代码"></a>自定制ViewGroup完成示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">package com.example.linzh.myview;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.View;</div><div class="line">import android.view.ViewGroup;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by linzh on 2017/3/28.</div><div class="line"> */</div><div class="line"></div><div class="line">public class MyViewGroup extends ViewGroup &#123;//至少实现两个Super类的构造器</div><div class="line"></div><div class="line"></div><div class="line">    public MyViewGroup(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MyViewGroup(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        //将所有的子View进行测量，这会触发每个子View的onMeasure函数</div><div class="line">        //注意要与measureChild区分，measureChild是对单个view进行测量</div><div class="line">        measureChildren(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        int widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">        int widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        int heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">        int heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line"></div><div class="line">        int childCount = getChildCount();</div><div class="line">        if (childCount == 0) &#123;//如果没有子view，当前ViewGroup没有存在的意义，不用占用空间</div><div class="line">            setMeasuredDimension(0, 0);</div><div class="line">        &#125; else &#123;</div><div class="line">            if (widthMode == MeasureSpec.AT_MOST &amp;&amp; heightMode == MeasureSpec.AT_MOST) &#123;//如果宽高都是包裹内容</div><div class="line">                //我们将高度设置为所有子View的高度相加，宽度设为子View中最大的宽度</div><div class="line">                int height = getTotleHeight();</div><div class="line">                int width = getMaxChildWidth();</div><div class="line">                setMeasuredDimension(width, height);</div><div class="line">            &#125; else if (heightMode == MeasureSpec.AT_MOST) &#123;//如果只有高度是包裹内容</div><div class="line">                //宽度设置为ViewGroup自己的测量宽度，高度设置为所有子View的高度总和</div><div class="line">                setMeasuredDimension(widthSize, getTotleHeight());</div><div class="line">            &#125; else if (widthMode == MeasureSpec.AT_MOST) &#123;//如果只有宽度是包裹内容</div><div class="line">                //宽度设置为子View中宽度最大的值，高度设置为ViewGroup自己的测量值</div><div class="line">                setMeasuredDimension(getMaxChildWidth(), heightSize);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">        int count = getChildCount();</div><div class="line">        int curHeight = t;//记录当前的高度位置</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;//将View逐个摆放</div><div class="line">            View view = getChildAt(i);</div><div class="line">            int height = view.getMeasuredHeight();</div><div class="line">            int width = view.getMeasuredWidth();</div><div class="line">            //摆放子View，参数分别是子View矩形区域的左、上、右、下边</div><div class="line">            view.layout(l, curHeight, l + width, curHeight + height);</div><div class="line">            curHeight += height;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取子View中宽度最大的值</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    private int getMaxChildWidth() &#123;</div><div class="line">        int childCount = getChildCount();</div><div class="line">        int maxWidth = 0;</div><div class="line">        for (int i = 0; i &lt; childCount; i++) &#123;</div><div class="line">            View childView = getChildAt(i);</div><div class="line">            if (childView.getMeasuredWidth() &gt; maxWidth) &#123;</div><div class="line">                maxWidth = childView.getMeasuredWidth();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return maxWidth;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /***</div><div class="line">     * 将所有子View的高度相加</div><div class="line">     **/</div><div class="line">    private int getTotleHeight() &#123;</div><div class="line">        int childCount = getChildCount();</div><div class="line">        int height = 0;</div><div class="line">        for (int i = 0; i &lt; childCount; i++) &#123;</div><div class="line">            View childView = getChildAt(i);</div><div class="line">            height += childView.getMeasuredHeight();</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return height;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developer.android.com/guide/topics/ui/custom-components.html#custom" target="_blank" rel="external">Android API指南 Custom Components</a></li>
<li><a href="http://www.jianshu.com/p/c84693096e41" target="_blank" rel="external">自定义View，有这一篇就够了</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android自定义View和ViewGroup&quot;&gt;&lt;a href=&quot;#Android自定义View和ViewGroup&quot; class=&quot;headerlink&quot; title=&quot;Android自定义View和ViewGroup&quot;&gt;&lt;/a&gt;Android自定义View
    
    </summary>
    
    
      <category term="Android" scheme="http://linzhs.cm/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android的数据储存</title>
    <link href="http://linzhs.cm/2017/05/26/android-data-save/"/>
    <id>http://linzhs.cm/2017/05/26/android-data-save/</id>
    <published>2017-05-25T18:04:00.000Z</published>
    <updated>2017-05-25T18:04:00.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android的数据存储与共享"><a href="#Android的数据存储与共享" class="headerlink" title="Android的数据存储与共享"></a>Android的数据存储与共享</h1><blockquote>
<p>Android提供了多种数据储存与共享的方式，其中文件存储、SharedPreferences、数据库等只能用于当前应用程序中，而Content Provider不仅可以在应用程序内部进行数据存储和共享，还可以跨程序数据共享，而且是更加安全可靠的。</p>
</blockquote>
<h2 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h2><p>文件存储数据是一种较常用的方法，在Android中读取/写入文件的方法，与Java中实现I/O的程序是完全一样的，提供了openFileInput()和openFileOutput()方法来读取设备上的文件。</p>
<p>文件储存是不可以包含文件目录的，默认存储在/data/data/<package name="">/files下。</package></p>
<h3 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h3><p>使用Context的openFileOutput()方法，有两个参数：</p>
<ul>
<li>文件名</li>
<li>文件操作模式 默认为MODE_PRIVATE，表示当指定文件名的时候，所写入内容覆盖源文件内容。还可以指定MODE_APPEND模式，即表示源文件存在的时候追加内容，不存在的时候创建</li>
</ul>
<blockquote>
<p>MODE_WORLD_READAVLE和MODE_WORLD_WRITEABLE模式已被弃用，使用存在风险</p>
</blockquote>
<p>demo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">String data = &quot;Data to save&quot;;</div><div class="line">FileOutputStream out = null;</div><div class="line">BufferWriter writer = null;</div><div class="line">try &#123;</div><div class="line">    out = openFileOutput(&quot;data&quot;, Context.MODE_PRIVATE);</div><div class="line">    writer = new BufferWriter(new OutputStreamWriter(out));</div><div class="line">    writer.write(data);</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; finally &#123;</div><div class="line">    try &#123;</div><div class="line">        if (writer != null) &#123;</div><div class="line">            writer.close();</div><div class="line">        &#125;</div><div class="line">    &#125; catch (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="读操作"><a href="#读操作" class="headerlink" title="读操作"></a>读操作</h3><p>使用Context的openFileInput()方法，接收一个文件名字符串参数。</p>
<p>demo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">FileInputStream in = null;</div><div class="line">BufferReader reader = null;</div><div class="line">StringBuffer content = new StringBuffer();</div><div class="line">try &#123;</div><div class="line">    in = openFileInput(&quot;data&quot;);</div><div class="line">    reader = new BufferWirter(new InputStreamWriter(in));</div><div class="line">    String line = &quot;&quot;;</div><div class="line">    while ((line = reader.readLine() != null) &#123;</div><div class="line">        content.append(line);</div><div class="line">    &#125;</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; finally &#123;</div><div class="line">    try &#123;</div><div class="line">        if (reader != null) &#123;</div><div class="line">            reader.close();</div><div class="line">        &#125;</div><div class="line">    &#125; catch (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">System.out.println(content.toString());</div></pre></td></tr></table></figure></p>
<h2 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h2><p>SharedPreferences是Android提供的用来存储一些简单配置信息的一种机制，采用了XML格式将数据以键值对的形式存储到设备中。只能在同一个包内使用，不能在不同的包之间使用。</p>
<p>SharedPreferences的默认文件位置是/data/data/<package name="">/shared_prefs/，Android提供了3种用于获取SharedPreferences对象的方法。</package></p>
<ul>
<li>Context.getSharedPreferences()</li>
</ul>
<p>此方法接收两个参数，第一个为文件名，不存在就创建。第二个参数为操作模式，Android6.0开始只有一个默认操作模式，为MODE_PRIVATE，也就是指定为0。</p>
<ul>
<li>Activity.getPreferences()</li>
</ul>
<p>这个方法是getSharedPreferences()方法的特殊形式，只有一个操作模式参数，文件名自动设置为当前活动类名。</p>
<ul>
<li>PreferenceManager.getDefaultSharedPreferences()</li>
</ul>
<p>这是一个静态方法，接收一个Context参数，并自动使用当前应用程序的报名作为前缀来命名SharedPreference文件。</p>
<h3 id="存储数据步骤"><a href="#存储数据步骤" class="headerlink" title="存储数据步骤"></a>存储数据步骤</h3><p>首选根据以上三种方法中的一种获取SharedPreferences对象，然后：</p>
<ul>
<li>调用SharedPreferences.edit()方法获取一个SharedPreferences.Editor对象；</li>
<li>想SharedPreferences.Editor对象添加数据，以putXXX的形式；</li>
<li>调用apply()方法将添加的数据提交完成保存。</li>
</ul>
<p>demo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SharedPreferences.Editor editor = getSharedPreferences(&quot;data&quot;, MODE_PRIVATE).edit();</div><div class="line">editor.putString(&quot;name&quot;, &quot;Tom&quot;);</div><div class="line">editor.putInt(&quot;age&quot;, 28);</div><div class="line">editor.putBoolean(&quot;married&quot;, false);</div><div class="line">editor.apply();</div></pre></td></tr></table></figure></p>
<h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><p>demo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SharedPreferences pref = getSharedPreferences(&quot;data&quot;, MODE_PRIVATE);</div><div class="line">String name = pref.getString(&quot;name&quot;, &quot;&quot;);//第二参数为键没有对应的值时会以这个参数的数据返回</div><div class="line">int age = pref.getInt(&quot;age&quot;, 0);</div><div class="line">boolean married = pref.getBoolean(&quot;married&quot;, false);</div></pre></td></tr></table></figure></p>
<h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><p>SQLite是Android所带的一个标准的数据库，它支持SQL语句，它是一个轻量级的嵌入式数据库。</p>
<p>Android提供了一个抽象类，SQLiteOpenHelper帮助类来更加方便地管理数据库，借助这个类可以轻松地对数据库进行创建和升级。</p>
<p>SQLiteOpenHelper抽象类有两个抽象方法：</p>
<ul>
<li>onCreate()</li>
<li>onUpgrade()</li>
</ul>
<p>另外还提供了两个实例方法：</p>
<ul>
<li>getReadableDataBase() </li>
<li>getWritableDatavase()</li>
</ul>
<p>这两个方法都可以创建或者打开一个现有的数据库，没有则创建，并返回一个可对数据库进行读写操作的对象。若磁盘已满，则R方法只能读，W方法则会抛出异常。</p>
<p>SQLiteOpenHelper提供了两个可重写构造方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public SQLiteOpenHelper(Context context, String name, CursorFactory factory, int version)</div><div class="line">public SQLiteOpenHelper(Context context, String name, CursorFactory factory, int version,DatabaseErrorHandler errorHandler)</div></pre></td></tr></table></figure></p>
<p>参数：</p>
<ul>
<li>context</li>
<li>name  数据库名 默认存放在/dat/data/<package name="">/databases/</package></li>
<li>factory 查询数据返回的Cursor，一般为null</li>
<li>version 数据库版本号，可用于升级数据库</li>
</ul>
<p>执行数据库语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.execSQL(string);</div></pre></td></tr></table></figure></p>
<p>实现模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class MyDatabaseHelper extends SQLiteOpenHelper &#123;</div><div class="line"> </div><div class="line">    public static final String CREATE_BOOK = &quot;create table Book (&quot;</div><div class="line">            + &quot;id integer primary key autoincrement, &quot;</div><div class="line">            + &quot;author text, &quot;</div><div class="line">            + &quot;price real, &quot;</div><div class="line">            + &quot;pages integer, &quot;</div><div class="line">            + &quot;name text)&quot;;   </div><div class="line">            </div><div class="line">    private Context mContext;</div><div class="line"></div><div class="line">    public MyDatabaseHelper(Context context, String name,</div><div class="line">                            SQLiteDatabase.CursorFactory factory, int version) &#123;</div><div class="line">        super(context, name, factory, version);</div><div class="line">        mContext = context;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void onCreate(SQLiteDatabase db) &#123;</div><div class="line">        db.execSQL(CREATE_BOOK);</div><div class="line">        Toast.makeText(mContext, &quot;Create succeeded&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MyDatabaseHelper dbHelper = new MyDatabaseHelper(this, &quot;BookStore.db&quot;, null, 1);</div><div class="line">dbHelper.getWritableDatabase();</div></pre></td></tr></table></figure>
<h3 id="升级数据库"><a href="#升级数据库" class="headerlink" title="升级数据库"></a>升级数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public static final String CREATE_CATEGORY = &quot;create table Category (&quot;</div><div class="line">            + &quot;id integer primary key autoincrement, &quot;</div><div class="line">            + &quot;category_name text, &quot;</div><div class="line">            + &quot;category_code integer)&quot;;</div><div class="line">            </div><div class="line">@Override</div><div class="line">public void onCreate(SQLiteDatabase db) &#123;</div><div class="line">    db.execSQL(CREATE_BOOK);</div><div class="line">    db.execSQL(CREATE_CATEGORY);</div><div class="line">    Toast.makeText(mContext, &quot;Create succeeded&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</div><div class="line">    db.execSQL(&quot;drop table if exists Book&quot;);</div><div class="line">    db.execSQL(&quot;drop table if exists Category&quot;);</div><div class="line">    onCreate(db);</div><div class="line">&#125;</div><div class="line"></div><div class="line">MyDatabaseHelper dbHelper = new MyDatabaseHelper(this, &quot;BookStore.db&quot;, null, 2);</div><div class="line">dbHelper.getWritableDatabase();</div></pre></td></tr></table></figure>
<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</div><div class="line">ContentValues values = new ContentValues();</div><div class="line">// 开始组装第一条数据</div><div class="line">values.put(&quot;name&quot;, &quot;The Da Vinci Code&quot;);</div><div class="line">values.put(&quot;author&quot;, &quot;Dan Brown&quot;);</div><div class="line">values.put(&quot;pages&quot;, 454);</div><div class="line">values.put(&quot;price&quot;, 16.96);</div><div class="line">db.insert(&quot;Book&quot;, null, values); // 插入第一条数据</div><div class="line">values.clear();</div><div class="line">// 开始组装第二条数据</div><div class="line">values.put(&quot;name&quot;, &quot;The Lost Symbol&quot;);</div><div class="line">values.put(&quot;author&quot;, &quot;Dan Brown&quot;);</div><div class="line">values.put(&quot;pages&quot;, 510);</div><div class="line">values.put(&quot;price&quot;, 19.95);</div><div class="line">db.insert(&quot;Book&quot;, null, values); // 插入第二条数据</div></pre></td></tr></table></figure>
<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</div><div class="line">ContentValues values = new ContentValues();</div><div class="line">values.put(&quot;price&quot;, 10.99);</div><div class="line">db.update(&quot;Book&quot;, values, &quot;name = ?&quot;, new String[] &#123; &quot;The Da Vinci Code&quot; &#125;);</div></pre></td></tr></table></figure>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</div><div class="line">db.delete(&quot;Book&quot;, &quot;pages &gt; ?&quot;, new String[] &#123; &quot;500&quot; &#125;);</div></pre></td></tr></table></figure>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</div><div class="line">// 查询Book表中所有的数据</div><div class="line">Cursor cursor = db.query(&quot;Book&quot;, null, null, null, null, null, null);</div><div class="line">if (cursor.moveToFirst()) &#123;</div><div class="line">    do &#123;</div><div class="line">        // 遍历Cursor对象，取出数据并打印</div><div class="line">        String name = cursor.getString(cursor.getColumnIndex(&quot;name&quot;));</div><div class="line">        String author = cursor.getString(cursor.getColumnIndex(&quot;author&quot;));</div><div class="line">        int pages = cursor.getInt(cursor.getColumnIndex(&quot;pages&quot;));</div><div class="line">        double price = cursor.getDouble(cursor.getColumnIndex(&quot;price&quot;));</div><div class="line">        Log.d(&quot;MainActivity&quot;, &quot;book name is &quot; + name);</div><div class="line">        Log.d(&quot;MainActivity&quot;, &quot;book author is &quot; + author);</div><div class="line">        Log.d(&quot;MainActivity&quot;, &quot;book pages is &quot; + pages);</div><div class="line">        Log.d(&quot;MainActivity&quot;, &quot;book price is &quot; + price);</div><div class="line">    &#125; while (cursor.moveToNext());</div><div class="line">&#125;</div><div class="line">cursor.close();</div></pre></td></tr></table></figure>
<h2 id="Content-Provider"><a href="#Content-Provider" class="headerlink" title="Content Provider"></a>Content Provider</h2><p>Content Provider是Android的四大组件之一，主要用于应用程序之间进行数据交换，从而能够让其他的应用保存或读取此Content Provider的各种数据类型。</p>
<p>内容提供器有两种用法：</p>
<ul>
<li>使用现用内容提供器来读取或者操作相应程序中的数据</li>
<li>创建自己的内容提供器供程序使用的外部接口</li>
</ul>
<p>访问内容提供器共享数据，必须使用Context.getContentResolver()静态方法获取ContentResolver对象实例来进行数据的CRUD操作。</p>
<ul>
<li>insert()</li>
<li>delete()</li>
<li>query()</li>
<li>update()</li>
</ul>
<p>不同于数据库，内容提供器的访问是安全的，其需要提供一个指定的uri才能够访问。</p>
<h3 id="访问现有内容提供器"><a href="#访问现有内容提供器" class="headerlink" title="访问现有内容提供器"></a>访问现有内容提供器</h3><p>查询现有的联系人内容提供器demo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; contactsList = new ArrayList&lt;&gt;();</div><div class="line">Cursor cursor = null;</div><div class="line">try &#123;</div><div class="line">    // 查询联系人数据</div><div class="line">    cursor = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, null, null, null);</div><div class="line">    if (cursor != null) &#123;</div><div class="line">        while (cursor.moveToNext()) &#123;</div><div class="line">            // 获取联系人姓名</div><div class="line">            String displayName = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));</div><div class="line">            // 获取联系人手机号</div><div class="line">            String number = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));</div><div class="line">            contactsList.add(displayName + &quot;\n&quot; + number);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; finally &#123;</div><div class="line">    if (cursor != null) &#123;</div><div class="line">        cursor.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="定制内容提供器"><a href="#定制内容提供器" class="headerlink" title="定制内容提供器"></a>定制内容提供器</h3><p>创建自己的内容提供器，需要去继承抽象类ContentProvider，并实现6个抽象方法，以下为模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class MyProvider extends ContentProvider &#123;</div><div class="line">    @Overrride</div><div class="line">    public boolean onCreate() &#123;</div><div class="line">        return fasle;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public Uri insert(Uri uri, ContentValues values) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) &#123;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public int delete(Uri uri, String selection, String[] selectionArgs) &#123;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public String getType(Uri uri) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参数说明：</p>
<ul>
<li>返回值boolean 创建是否成功</li>
<li>projection 用于确定查询哪些列</li>
<li>selection和selectionArgs用于约束查询哪些行</li>
<li>sortOder 用于对结果进行排序</li>
<li>Cursor查询结果对象</li>
<li>getType返回相应的MIME类型</li>
</ul>
<p>Uri通配符</p>
<ul>
<li>*：表示匹配任意长度的任意字符</li>
<li>#：表示匹配任意长度的数字</li>
</ul>
<p>demo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line">public class DatabaseProvider extends ContentProvider &#123;</div><div class="line"></div><div class="line">    public static final int BOOK_DIR = 0;</div><div class="line"></div><div class="line">    public static final int BOOK_ITEM = 1;</div><div class="line"></div><div class="line">    public static final int CATEGORY_DIR = 2;</div><div class="line"></div><div class="line">    public static final int CATEGORY_ITEM = 3;</div><div class="line"></div><div class="line">    public static final String AUTHORITY = &quot;com.example.databasetest.provider&quot;;</div><div class="line"></div><div class="line">    private static UriMatcher uriMatcher;</div><div class="line"></div><div class="line">    private MyDatabaseHelper dbHelper;</div><div class="line"></div><div class="line">    static &#123;</div><div class="line">        uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);</div><div class="line">        uriMatcher.addURI(AUTHORITY, &quot;book&quot;, BOOK_DIR);</div><div class="line">        uriMatcher.addURI(AUTHORITY, &quot;book/#&quot;, BOOK_ITEM);</div><div class="line">        uriMatcher.addURI(AUTHORITY, &quot;category&quot;, CATEGORY_DIR);</div><div class="line">        uriMatcher.addURI(AUTHORITY, &quot;category/#&quot;, CATEGORY_ITEM);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onCreate() &#123;</div><div class="line">        dbHelper = new MyDatabaseHelper(getContext(), &quot;BookStore.db&quot;, null, 2);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) &#123;</div><div class="line">        // 查询数据</div><div class="line">        SQLiteDatabase db = dbHelper.getReadableDatabase();</div><div class="line">        Cursor cursor = null;</div><div class="line">        switch (uriMatcher.match(uri)) &#123;</div><div class="line">            case BOOK_DIR:</div><div class="line">                cursor = db.query(&quot;Book&quot;, projection, selection, selectionArgs, null, null, sortOrder);</div><div class="line">                break;</div><div class="line">            case BOOK_ITEM:</div><div class="line">                String bookId = uri.getPathSegments().get(1);</div><div class="line">                cursor = db.query(&quot;Book&quot;, projection, &quot;id = ?&quot;, new String[] &#123; bookId &#125;, null, null, sortOrder);</div><div class="line">                break;</div><div class="line">            case CATEGORY_DIR:</div><div class="line">                cursor = db.query(&quot;Category&quot;, projection, selection, selectionArgs, null, null, sortOrder);</div><div class="line">                break;</div><div class="line">            case CATEGORY_ITEM:</div><div class="line">                String categoryId = uri.getPathSegments().get(1);</div><div class="line">                cursor = db.query(&quot;Category&quot;, projection, &quot;id = ?&quot;, new String[] &#123; categoryId &#125;, null, null, sortOrder);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return cursor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Uri insert(Uri uri, ContentValues values) &#123;</div><div class="line">        // 添加数据</div><div class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</div><div class="line">        Uri uriReturn = null;</div><div class="line">        switch (uriMatcher.match(uri)) &#123;</div><div class="line">            case BOOK_DIR:</div><div class="line">            case BOOK_ITEM:</div><div class="line">                long newBookId = db.insert(&quot;Book&quot;, null, values);</div><div class="line">                uriReturn = Uri.parse(&quot;content://&quot; + AUTHORITY + &quot;/book/&quot; + newBookId);</div><div class="line">                break;</div><div class="line">            case CATEGORY_DIR:</div><div class="line">            case CATEGORY_ITEM:</div><div class="line">                long newCategoryId = db.insert(&quot;Category&quot;, null, values);</div><div class="line">                uriReturn = Uri.parse(&quot;content://&quot; + AUTHORITY + &quot;/category/&quot; + newCategoryId);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return uriReturn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) &#123;</div><div class="line">        // 更新数据</div><div class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</div><div class="line">        int updatedRows = 0;</div><div class="line">        switch (uriMatcher.match(uri)) &#123;</div><div class="line">            case BOOK_DIR:</div><div class="line">                updatedRows = db.update(&quot;Book&quot;, values, selection, selectionArgs);</div><div class="line">                break;</div><div class="line">            case BOOK_ITEM:</div><div class="line">                String bookId = uri.getPathSegments().get(1);</div><div class="line">                updatedRows = db.update(&quot;Book&quot;, values, &quot;id = ?&quot;, new String[] &#123; bookId &#125;);</div><div class="line">                break;</div><div class="line">            case CATEGORY_DIR:</div><div class="line">                updatedRows = db.update(&quot;Category&quot;, values, selection, selectionArgs);</div><div class="line">                break;</div><div class="line">            case CATEGORY_ITEM:</div><div class="line">                String categoryId = uri.getPathSegments().get(1);</div><div class="line">                updatedRows = db.update(&quot;Category&quot;, values, &quot;id = ?&quot;, new String[] &#123; categoryId &#125;);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return updatedRows;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int delete(Uri uri, String selection, String[] selectionArgs) &#123;</div><div class="line">        // 删除数据</div><div class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</div><div class="line">        int deletedRows = 0;</div><div class="line">        switch (uriMatcher.match(uri)) &#123;</div><div class="line">            case BOOK_DIR:</div><div class="line">                deletedRows = db.delete(&quot;Book&quot;, selection, selectionArgs);</div><div class="line">                break;</div><div class="line">            case BOOK_ITEM:</div><div class="line">                String bookId = uri.getPathSegments().get(1);</div><div class="line">                deletedRows = db.delete(&quot;Book&quot;, &quot;id = ?&quot;, new String[] &#123; bookId &#125;);</div><div class="line">                break;</div><div class="line">            case CATEGORY_DIR:</div><div class="line">                deletedRows = db.delete(&quot;Category&quot;, selection, selectionArgs);</div><div class="line">                break;</div><div class="line">            case CATEGORY_ITEM:</div><div class="line">                String categoryId = uri.getPathSegments().get(1);</div><div class="line">                deletedRows = db.delete(&quot;Category&quot;, &quot;id = ?&quot;, new String[] &#123; categoryId &#125;);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return deletedRows;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getType(Uri uri) &#123;</div><div class="line">        switch (uriMatcher.match(uri)) &#123;</div><div class="line">            case BOOK_DIR:</div><div class="line">                return &quot;vnd.android.cursor.dir/vnd.com.example.databasetest. provider.book&quot;;</div><div class="line">            case BOOK_ITEM:</div><div class="line">                return &quot;vnd.android.cursor.item/vnd.com.example.databasetest. provider.book&quot;;</div><div class="line">            case CATEGORY_DIR:</div><div class="line">                return &quot;vnd.android.cursor.dir/vnd.com.example.databasetest. provider.category&quot;;</div><div class="line">            case CATEGORY_ITEM:</div><div class="line">                return &quot;vnd.android.cursor.item/vnd.com.example.databasetest. provider.category&quot;;</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="网络存储"><a href="#网络存储" class="headerlink" title="网络存储"></a>网络存储</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android的数据存储与共享&quot;&gt;&lt;a href=&quot;#Android的数据存储与共享&quot; class=&quot;headerlink&quot; title=&quot;Android的数据存储与共享&quot;&gt;&lt;/a&gt;Android的数据存储与共享&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Andro
    
    </summary>
    
    
      <category term="Android" scheme="http://linzhs.cm/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android的BLE简易收发助手</title>
    <link href="http://linzhs.cm/2017/04/30/ble-helper/"/>
    <id>http://linzhs.cm/2017/04/30/ble-helper/</id>
    <published>2017-04-30T03:41:48.000Z</published>
    <updated>2017-04-30T03:41:48.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android简易蓝牙BLE收发助手"><a href="#Android简易蓝牙BLE收发助手" class="headerlink" title="Android简易蓝牙BLE收发助手"></a>Android简易蓝牙BLE收发助手</h1><blockquote>
<p>本文参考<a href="https://developer.android.google.cn/guide/topics/connectivity/bluetooth-le.html" target="_blank" rel="external">Android开发者说明文档</a>，<br>通过制作一个简易的BLE收发助手，和外置BLE模块进行通信，来学习Android的BLE开发基础知识。</p>
<p>GitHub源码：<a href="https://github.com/ZehaoLin/BluetoothLeHelper" target="_blank" rel="external">Android简易BLE收发助手</a>、<a href="https://github.com/googlesamples/android-BluetoothLeGatt" target="_blank" rel="external">Android官方BluetoothLeGatt源码</a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从Android4.3（API 18）开始，Android开始支持低功耗蓝牙（Bluetooth Low Energy, BLE）<br>功能，也就是Bluetooth 4.0版本，相比之前的蓝牙功能，BLE最显著的特点是功耗更低。基于Android<br>系统API开发的App，可以通过BLE查找其他设备、查询服务、读写特征值（Characterstic）。现<br>在BLE已基本取代了旧版本的蓝牙，特别是现在嵌入式设备（智能手表手环、无线耳机等）越来越多，<br>基本用的都是BLE。最近蓝牙协议已经升级到5.0版本，效率等大幅度提高。目前三星S8和小米6已支持蓝牙5.0。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="抽象概念"><a href="#抽象概念" class="headerlink" title="抽象概念"></a>抽象概念</h3><p>在进行开发之前，需要对蓝牙协议栈的构架有一定的了解，特别是一些关键性名词。可以参考笔者简陋的总结：<a href="">BLE协议栈简析</a>。</p>
<p>BLE协议栈有三个层次，分别是物理层Controller、主机协议封装Host、应用Apps。</p>
<p>三个层次中，对于开发来说比较重要的是Host，里面主要包含：</p>
<ul>
<li><p>ATT（Attibute Protocal）</p>
<p>  属性协议，是BLE通信的基础，ATT封装数据，向外暴露为“属性”，提供“属性”的为服务端，读取“属性”的为客户端。</p>
</li>
<li><p>GATT（Generic Attribute Profile）</p>
<p>  通用属性配置文件，建立在ATT的基础上，对ATT做进一步的逻辑封装，定义数据的交互方式和含义。每个GATT里面包含3个层次：服务（service）、特征（Characteristic）、描述（Descriptor）。</p>
</li>
<li><p>GAP（Generic Access Profile）</p>
<p>  停用访问控制配置文件。它定义了 BLE 整个通信过程中的流程，例如广播、扫描、连接等流程。还定义了参与通信的设备角色，以及他们各自的职能，例如广播数据的 Broadcaster，接收广播的 Observer，还有被连接的“外设” Peripheral 和发起连接的“中心设备” Central。</p>
</li>
</ul>
<p>GATT最外层是Profile配置文件，里面又包含了服务（service）、特征（Characteristic）、描述（Descriptor），他们之间的关系是一个 Service 包含若干个 Characteristic，一个 Characteristic 可以包含若干 Descriptor。而 Characteristic 定义了数值和操作。Characteristic 的操作这几种权限：读、写、通知等权限。我们说的 BLE 通信，其实就是对 Characteristic 的读写或者订阅通知。</p>
<p>GATT里面包含的服务、特征和描述都是多个的，BLE通过UUID来标识区分。</p>
<p>UID 是全球唯一标识符，它是 128bit 的值，为了便于识别和阅读，一般写成8-4-4-12 的16进制形式。如123e4567-e89b-12d3-a456-426655440000。16-bit的蓝牙基本UUID形式为 0000XXXX-0000-1000-8000-00805f9b34fb。实际UUID为128位，但是除了XXXX部分需要更改，其他的基本一致，这样对于BLE的数据非常受限的设备使用起来更加方便。Android中为了避免UUID的冲突，可以使用UUID.randomUUID()方法来生成一个随机的UUID。</p>
<h3 id="外设模块"><a href="#外设模块" class="headerlink" title="外设模块"></a>外设模块</h3><p>笔者在完成低功耗蓝牙收发助手的程序测试的时候，采用的BLE透传模块为CC2541（可在某宝上搜索），基于蓝牙4.0，对于玩单片机或者嵌入式的爱好者来说，这个是很常见的，可以用于蓝牙小车，小四轴飞行器等小智能硬件设备。</p>
<p>在透传模块给出的AT指令集里，指明了可以通过串口助手向BLE模块发送AT指令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 开发正文</div><div class="line">先看一下简易的主界面图</div><div class="line">![image](http://linzhs.cn/img/ble_helper_main_activity.png) 。</div><div class="line"></div><div class="line">主界面中上半部分为数据的接收区，下半部分为发送数据编辑框，发送按钮（其实应该加入字符和hex格式的数据接收或发送方式的选择的）。点击工具单栏上的菜单选项可进行蓝牙设备搜索和连接。</div><div class="line"></div><div class="line">程序的运行思路是：主界面启动的时候，去建立自定义BLE后台服务链接，服务和MainActivity之间通过Broadcast来通信，所以还需要在MainActivity的生命周期中注册、BroadcastReceiver。完成服务、广播、界面的初始化工作后，点击链接BLE设备启动ScanActivity来搜索蓝牙设备，将识别到的外设（当前只能识别Android以外的BLE模块）显示在Activity的RecyclerView中，若点击其中一个蓝牙，则自动获取BLE的名称地址，然后退出扫描活动，将BLE的名称和地址返回主活动建立链接，接下来根据主界面的命令，向后台蓝牙服务发出读写Characteristic操作来完成与外部设备的通信，这个读写操作中需要用到UUID。</div><div class="line"></div><div class="line">Android使用BLE需要开启以下两个权限：</div></pre></td></tr></table></figure></p>
<!-- 使用蓝牙的权限 -->
<p><uses-permission android:name="android.permission.BLUETOOTH"><br><!-- 修改配置蓝牙属性的权限，相当于获取蓝牙管理员身份 --></uses-permission></p>
<p><uses-permission android:name="android.permission.BLUETOOTH_ADMIN"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">MainActivity中建立、断开绑定BLE服务，注册、注销通信广播：</div></pre></td></tr></table></figure></uses-permission></p>
<p>@Override<br>protected void onCreate(Bundle savedInstanceState) {<br>    super.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main);</p>
<pre><code>// initial View...

//绑定BLE收发服务
Intent gattServiceIntent = new Intent(this, BluetoothLeService.class);
bindService(gattServiceIntent, mServiceConnection, BIND_AUTO_CREATE);
</code></pre><p>}</p>
<p>@Override<br>protected void onResume() {<br>    super.onResume();</p>
<pre><code>//注册BLE收发服务广播接收器mGattUpdateReceiver
registerReceiver(mGattUpdateReceiver, makeGattUpdateIntentFilter());
if (mBluetoothLeService != null) {
    Log.d(TAG, &quot;onResume: mBluetoothLeService NOT null&quot;);
}
</code></pre><p>}</p>
<p>@Override<br>protected void onPause() {<br>    super.onPause();</p>
<pre><code>//注销BLE收发服务广播接收器
unregisterReceiver(mGattUpdateReceiver);
</code></pre><p>}</p>
<p>@Override<br>protected void onDestroy() {<br>    super.onDestroy();</p>
<pre><code>//解绑BLE收发服务
unbindService(mServiceConnection);
mBluetoothLeService = null;
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">后台BluetoothLeService连接后的回调和广播通信接受者：</div></pre></td></tr></table></figure></p>
<p>// Code to manage Service lifecycle.<br>// 管理BLE数据收发服务整个生命周期<br>private final ServiceConnection mServiceConnection = new ServiceConnection() {<br>    @Override<br>    public void onServiceConnected(ComponentName name, IBinder service) {<br>        mBluetoothLeService = ((BluetoothLeService.LocalBinder) service).getService();<br>        if (!mBluetoothLeService.initialize()) {<br>            Log.e(TAG, “onServiceConnected: Unable to initialize Bluetooth”);<br>            finish();<br>        }<br>    }</p>
<pre><code>@Override
public void onServiceDisconnected(ComponentName name) {
    mBluetoothLeService = null;
}
</code></pre><p>};</p>
<p>// Handles various events fired by the Service.<br>// ACTION_GATT_CONNECTED: connected to a GATT server.<br>// ACTION_GATT_DISCONNECTED: disconnected from a GATT server.<br>// ACTION_GATT_SERVICES_DISCOVERED: discovered GATT services.<br>// ACTION_DATA_AVAILABLE: received data from the device.  This can be a result of read<br>//                        or notification operations.<br>// 定义处理BLE收发服务的各类事件接收机mGattUpdateReceiver，主要包括下面几种：<br>// ACTION_GATT_CONNECTED: 连接到GATT<br>// ACTION_GATT_DISCONNECTED: 断开GATT<br>// ACTION_GATT_SERVICES_DISCOVERED: 发现GATT下的服务<br>// ACTION_DATA_AVAILABLE: BLE收到数据<br>private final BroadcastReceiver mGattUpdateReceiver = new BroadcastReceiver() {<br>    @Override<br>    public void onReceive(Context context, Intent intent) {<br>        final String action = intent.getAction();</p>
<pre><code>    if (BluetoothLeService.ACTION_GATT_CONNECTED.equals(action)) {
        mConnected = true;
    } else if (BluetoothLeService.ACTION_GATT_DISCONNECTED.equals(action)) {
        mConnected = false;
    } else if (BluetoothLeService.ACTION_GATT_SERVICES_DISCOVERED.equals(action)) {
        // Show all the supported services and characteristics on the user interface.
        // 获得所有的GATT服务，对于BLE透传模块，包括GAP（General Access Profile），
        // GATT（General Attribute Profile），还有Unknown（用于数据读取）
        mBluetoothLeService.getSupportedGattServices();
    } else if (BluetoothLeService.ACTION_DATA_AVAILABLE.equals(action)) {
           bleReceiveText.setText(intent.getStringExtra(BluetoothLeService.EXTRA_DATA));
        }
    }
}
</code></pre><p>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">广播中有四种隐式意图，都是在BluetoothLeService，也就是自定义后台服务中定义的，分别为链接到GATT、断开GATT、搜索到GATT服务、BLE收到数据，根据四个不同的广播状态来完成相应的标志位或者显示操作。</div><div class="line"></div><div class="line">以上的工作只是初始化，还需要建立扫描蓝牙的界面操作工作，选择菜单栏上的选项，来完成蓝牙的连接和断开。</div></pre></td></tr></table></figure></p>
<p>@Override<br>public boolean onOptionsItemSelected(MenuItem item) {<br>    switch (item.getItemId()) {<br>        case R.id.menu_connect_ble:<br>            if (!mConnected) {// 若未连接蓝牙，则进入蓝牙扫描连接activity<br>                Intent serverIntent = new Intent(this, DeviceScanActivity.class);<br>                startActivityForResult(serverIntent, REQUEST_CONNECT_DEVICE);<br>            } else {<br>                mBluetoothLeService.disconnect();<br>            }<br>            break;<br>    }</p>
<pre><code>return true;
</code></pre><p>}</p>
<p>@Override<br>protected void onActivityResult(int requestCode, int resultCode, Intent data) {<br>    switch (requestCode) {<br>        case REQUEST_CONNECT_DEVICE:<br>            if (resultCode == Activity.RESULT_OK) {<br>                // 获取准备建立连接的蓝牙设备地址和名字<br>                mDeviceName = data.getExtras().getString(EXTRAS_DEVICE_NAME);<br>                mDeviceAddress = data.getExtras().getString(EXTRAS_DEVICE_ADDRESS);</p>
<pre><code>            Log.i(TAG, &quot;onActivityResult: &quot; + &quot;mDeviceName: &quot; + mDeviceName + &quot;, mDeviceAddress:&quot; + mDeviceAddress);

            //连接该BLE模块
            if (mBluetoothLeService != null) {
                final boolean result = mBluetoothLeService.connect(mDeviceAddress);
                Log.d(TAG, &quot;onActivityResult: Connect request result = &quot; + result);
            }
        }
        break;
    default:
        break;
}
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">蓝牙设备的扫描工作都放置在DeviceScanActivity中，从主活动切换到这个活动中，在完成前台显示前，先完成Android设备的蓝牙检测和初始化工作，在onPause中还需要去检查Android是否还在进行扫描，若是则关闭扫描操作，整个生命周期的操作:</div></pre></td></tr></table></figure></p>
<p>@Override<br>protected void onCreate(Bundle savedInstanceState) {<br>    super.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_device_scan);</p>
<pre><code>ActionBar actionBar = getSupportActionBar();
if (actionBar != null) {
    actionBar.setTitle(&quot;Scan Bluetooth Device&quot;);
    actionBar.setDisplayHomeAsUpEnabled(true);
}

// Initializes recycler view adapter.
RecyclerView recyclerView = (RecyclerView)findViewById(R.id.le_device_recycler_view);
LinearLayoutManager layoutManager = new LinearLayoutManager(this);
recyclerView.setLayoutManager(layoutManager);
mLeDeviceListAdapter = new LeDeviceListAdapter();
recyclerView.setAdapter(mLeDeviceListAdapter);

mLeDeviceListAdapter.setOnItemClickListener(new LeDeviceListAdapter.OnItemClickListener() {
    @Override
    public void onItemClick(View view, int position) {
        final BluetoothDevice device = mLeDeviceListAdapter.getDevice(position);
        if (device == null) return;
        final Intent intent = new Intent();
        intent.putExtra(MainActivity.EXTRAS_DEVICE_NAME, device.getName());
        intent.putExtra(MainActivity.EXTRAS_DEVICE_ADDRESS, device.getAddress());
        if (isScanning) {
            mBluetoothLeScanner.stopScan(mLeScanCallback);
            //mBluetoothAdapter.stopLeScan(mLeScanCallback);
            isScanning = false;
        }
        Log.d(TAG, &quot;onItemClick: start bluetooth control activity.&quot;);

        //设置返回值并结束程序
        setResult(RESULT_OK, intent);
        finish();
    }
});

mHandler = new Handler();

// Use this check to determine whether BLE is supported on the device.  Then you can
// selectively disable BLE-related features.
if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {
    Toast.makeText(this, R.string.ble_not_supported, Toast.LENGTH_SHORT).show();
    finish();
}

// Initializes a Bluetooth adapter.  For API level 18 and above, get a reference to
// BluetoothAdapter through BluetoothManager.
final BluetoothManager bluetoothManager =
        (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
mBluetoothAdapter = bluetoothManager.getAdapter();

// Checks if Bluetooth is supported on the device.
if (mBluetoothAdapter == null) {
    Toast.makeText(this, R.string.ble_not_supported, Toast.LENGTH_SHORT).show();
    finish();
    return;
}
</code></pre><p>}</p>
<p>@Override<br>protected void onResume() {<br>    super.onResume();</p>
<pre><code>// Ensures Bluetooth is enabled on the device.  If Bluetooth is not currently enabled,
// fire an intent to display a dialog asking the user to grant permission to enable it.
if (!mBluetoothAdapter.isEnabled()) {
    if (!mBluetoothAdapter.isEnabled()) {
        Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
        startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
    }
}

mBluetoothLeScanner = mBluetoothAdapter.getBluetoothLeScanner();//获取蓝牙扫描器实例
scanLeDevice(true);
</code></pre><p>}</p>
<p>@Override<br>protected void onPause() {<br>    super.onPause();</p>
<pre><code>scanLeDevice(false);
mLeDeviceListAdapter.clear();
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">BLE的扫描从API21 开始就不太一样了，之前使用BluetoothAdapter.startLeScan和BluetoothAdapter.stopLeScan来完成，API21开始弃用这两个方法，改成由```BluetoothAdapter.getBluetoothLeScanner()```来获取BLE扫描器，用这个对象来完成扫描的工作。</div><div class="line"></div><div class="line">扫描方法和扫描结果回调：</div></pre></td></tr></table></figure></p>
<p>//扫描蓝牙设备<br>private void scanLeDevice(final boolean enable) {<br>    if (enable) {//使能扫描<br>        //将Runnable接口对象装入消息队列(message queue)每隔一段时间(SCAN_PERIOD)执行Runnable的run方法<br>        mHandler.postDelayed(new Runnable() {<br>            @Override<br>            public void run() {//循环周期到，标志位复位，关闭扫描<br>                isScanning = false;<br>                mBluetoothLeScanner.stopScan(mLeScanCallback);<br>                //mBluetoothAdapter.stopLeScan(mLeScanCallback);//此方法API21开始已被弃用<br>                invalidateOptionsMenu();<br>            }<br>        }, SCAN_PERIOD);</p>
<pre><code>    isScanning = true;
    mBluetoothLeScanner.startScan(mLeScanCallback);
    //mBluetoothAdapter.startLeScan(mLeScanCallback);
} else {//关闭扫描
    isScanning = false;
    mBluetoothLeScanner.stopScan(mLeScanCallback);
    //mBluetoothAdapter.stopLeScan(mLeScanCallback);
}
invalidateOptionsMenu();
</code></pre><p>}</p>
<p>// 扫描结果回调<br>private ScanCallback mLeScanCallback = new ScanCallback() {<br>    @Override<br>    public void onScanResult(int callbackType, ScanResult result) {//扫描结果<br>        //super.onScanResult(callbackType, result);<br>        final BluetoothDevice device = result.getDevice();<br>        runOnUiThread(new Runnable() {<br>            @Override<br>            public void run() {<br>                mLeDeviceListAdapter.addDevice(device);<br>                //刷新RecyclerView<br>                mLeDeviceListAdapter.notifyDataSetChanged();<br>            }<br>        });<br>    }</p>
<pre><code>@Override
public void onBatchScanResults(List&lt;ScanResult&gt; results) {//批量结果
    super.onBatchScanResults(results);
}

@Override
public void onScanFailed(int errorCode) {//扫描失败
    super.onScanFailed(errorCode);
}
</code></pre><p>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## BLE后台服务</div><div class="line">UUID的设置：</div></pre></td></tr></table></figure></p>
<p>//用于数据接收、发送的service和character对应的UUID，由改ble透传模块决定<br>public final static UUID UUID_NOTIFY =<br>        UUID.fromString(“0000ffe1-0000-1000-8000-00805f9b34fb”);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">BLE通信管理对象初始化：</div></pre></td></tr></table></figure></p>
<p>/**</p>
<ul>
<li>Initializes a reference to the local Bluetooth adapter.<br>*</li>
<li><p>@return Return true if the initialization is successful.<br>*/<br>public boolean initialize() {<br> // For API level 18 and above, get a reference to BluetoothAdapter through<br> // BluetoothManager.<br> if (mBluetoothManager == null) {</p>
<pre><code>mBluetoothManager = (BluetoothManager)getSystemService(Context.BLUETOOTH_SERVICE);
if (mBluetoothManager == null) {
    Log.e(TAG, &quot;initialize: Unable to initialize BluetoothManager&quot;);
    return false;
}
</code></pre><p> }</p>
<p> mBluetoothAdapter = mBluetoothManager.getAdapter();<br> if (mBluetoothAdapter == null) {</p>
<pre><code>Log.e(TAG, &quot;initialize: Unable to obtain a BluetoothAdapter&quot;);
return false;
</code></pre><p> }</p>
<p> return true;<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">建立BLE链接和断开链接：</div></pre></td></tr></table></figure>
</li>
</ul>
<p>/**</p>
<ul>
<li>Connects to the GATT server hosted on the Bluetooth LE device.<br>*</li>
<li>@param address The device address of the destination device.<br>*</li>
<li>@return Return true if the connection is initiated successfully. The connection result</li>
<li>is reported asynchronously through the</li>
<li>{@code BluetoothGattCallback#onConnectionStateChange(android.bluetooth.BluetoothGatt, int, int)}</li>
<li><p>callback.<br>*/<br>public boolean connect(final String address) {<br>if (mBluetoothAdapter == null || address == null) {<br>Log.w(TAG, “connect: BluetoothAdapter not initialized or unspecified address”);<br>return false;<br>}</p>
<p>// Previously connected device.  Try to reconnect.<br>if (mBluetoothDeviceAddress != null &amp;&amp; address.equals(mBluetoothDeviceAddress)<br> &amp;&amp; mBluetoothGatt != null) {<br>Log.d(TAG, “Trying to use an existing mBluetoothGatt for connection.”);<br>if (mBluetoothGatt.connect()) {<br> mConnectionState = STATE_CONNECTING;<br> return true;<br>} else {<br> return false;<br>}<br>}</p>
<p>final BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);<br>if (device == null) {<br>Log.w(TAG, “Device not found.  Unable to connect.”);<br>return false;<br>}<br>// We want to directly connect to the device, so we are setting the autoConnect<br>// parameter to false.<br>mBluetoothGatt = device.connectGatt(this, false, mGattCallback);<br>Log.d(TAG, “Trying to create a new connection.”);<br>mBluetoothDeviceAddress = address;<br>mConnectionState = STATE_CONNECTING;</p>
<p>return true;<br>}</p>
</li>
</ul>
<p>/**</p>
<ul>
<li>Disconnects an existing connection or cancel a pending connection. The disconnection result</li>
<li>is reported asynchronously through the</li>
<li>{@code BluetoothGattCallback#onConnectionStateChange(android.bluetooth.BluetoothGatt, int, int)}</li>
<li><p>callback.<br>*/<br>public void disconnect() {<br> if (mBluetoothAdapter == null || mBluetoothGatt == null) {</p>
<pre><code>Log.w(TAG, &quot;BluetoothAdapter not initialized&quot;);
return;
</code></pre><p> }</p>
<p> mBluetoothGatt.disconnect();<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">建立GATT服务后，数据、链接变动的回调，根据不同的回调结果，将要处理的信息以广播的形式发送给主活动：</div></pre></td></tr></table></figure>
</li>
</ul>
<p>// Implements callback methods for GATT events that the app cares about.  For example,<br>    // connection change and services discovered.<br>private final BluetoothGattCallback mGattCallback = new BluetoothGattCallback() {<br>    @Override<br>    public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {<br>        String intentAction;<br>        if (newState == BluetoothProfile.STATE_CONNECTED) {<br>            intentAction = ACTION_GATT_CONNECTED;<br>            mConnectionState = STATE_CONNECTED;<br>            broadcastUpdate(intentAction);</p>
<pre><code>        Log.i(TAG, &quot;Connected to GATT server.&quot;);
        // Attempts to discover services after successful connection.
        Log.i(TAG, &quot;Attempting to start service discovery:&quot; +
                mBluetoothGatt.discoverServices());
    } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {
        intentAction = ACTION_GATT_DISCONNECTED;
        mConnectionState = STATE_DISCONNECTED;
        Log.i(TAG, &quot;Disconnected from GATT server.&quot;);
        broadcastUpdate(intentAction);
    }
}

@Override
public void onServicesDiscovered(BluetoothGatt gatt, int status) {
    if (status == BluetoothGatt.GATT_SUCCESS) {
        broadcastUpdate(ACTION_GATT_SERVICES_DISCOVERED);
    } else {
        Log.w(TAG, &quot;onServicesDiscovered received: &quot; + status);
    }
}

@Override
public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {
    if (status == BluetoothGatt.GATT_SUCCESS) {
        broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);
    }
}

@Override
public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) {
    broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);
}
</code></pre><p>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">其中，需要携带接收到数据的广播如下，接收到的是byte数组，需要进行数据处理，这里将其装换为hex，十六进制。</div></pre></td></tr></table></figure></p>
<p>/**</p>
<ul>
<li>发送携带数据广播</li>
<li>@param action</li>
<li><p>@param characteristic<br>*/<br>private void broadcastUpdate(final String action, final BluetoothGattCharacteristic characteristic) {<br> final Intent intent = new Intent(action);</p>
<p> final byte[] data = characteristic.getValue();//读取BLE接收到的数据</p>
<p> if (data != null &amp;&amp; data.length &gt; 0) {</p>
<pre><code>final StringBuilder stringBuilder = new StringBuilder(data.length);
for(byte byteChar : data)
    stringBuilder.append(String.format(&quot;%02X &quot;, byteChar));
intent.putExtra(EXTRA_DATA, new String(data) + &quot;\n&quot; + stringBuilder.toString());

Log.i(TAG, &quot;broadcastUpdate: RX Data is &quot; + stringBuilder);
</code></pre><p> }</p>
<p> //intent.putExtra(EXTRA_DATA, data);<br> sendBroadcast(intent);<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">发送数据到BLE外设，则是向Characteristic中写入数据，BLE会将其自动发出。</div></pre></td></tr></table></figure>
</li>
</ul>
<p>/**</p>
<ul>
<li>写入数据到Characteristic 从BLE发送出去</li>
<li><p>@param data<br>*/<br>public void writeCharacteristic(byte[] data)<br>{<br> if (mBluetoothAdapter == null || mBluetoothGatt == null) {</p>
<pre><code>Log.w(TAG, &quot;BluetoothAdapter not initialized&quot;);
return;
</code></pre><p> }</p>
<p> mNotifyCharacteristic.setValue(data);<br> mBluetoothGatt.writeCharacteristic(mNotifyCharacteristic);<br>}<br>```</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android简易蓝牙BLE收发助手&quot;&gt;&lt;a href=&quot;#Android简易蓝牙BLE收发助手&quot; class=&quot;headerlink&quot; title=&quot;Android简易蓝牙BLE收发助手&quot;&gt;&lt;/a&gt;Android简易蓝牙BLE收发助手&lt;/h1&gt;&lt;blockquo
    
    </summary>
    
    
      <category term="Android,BLE" scheme="http://linzhs.cm/tags/Android-BLE/"/>
    
  </entry>
  
  <entry>
    <title>BLE协议栈简析</title>
    <link href="http://linzhs.cm/2017/04/30/ble-protocal/"/>
    <id>http://linzhs.cm/2017/04/30/ble-protocal/</id>
    <published>2017-04-30T03:36:45.000Z</published>
    <updated>2017-04-30T03:36:45.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BLE协议栈简析"><a href="#BLE协议栈简析" class="headerlink" title="BLE协议栈简析"></a>BLE协议栈简析</h1><blockquote>
<p>本文针对蓝牙4.0，也就是低功耗蓝牙BLE的协议栈进行简单分析。</p>
</blockquote>
<h2 id="Arch图"><a href="#Arch图" class="headerlink" title="Arch图"></a>Arch图</h2><p>以下为蓝牙协议栈架构图：<br><img src="http://7rf9ir.com1.z0.glb.clouddn.com/Android-BLE-in-Action.005.jpeg" alt=""></p>
<p>蓝牙协议栈分为三个层次，从底层到顶层的名字和其所起到的作用分别如下：</p>
<ul>
<li><p>Controller</p>
<p>  这一层主要是物理层，定义了蓝牙工作的频段（2.4GHz）和频段的通道、广播等。Host层和Controller层之间有个接口层，这个接口建立了Host和Controller之间的交互，也是顶层的应用和芯片的交互关键通道。</p>
</li>
<li><p>Host</p>
<p>  这一层相对比较复杂，包含了裸机链路控制、适配协议、安全管理、GATT、ATT、GAP等。</p>
<p>  ATT（Attibute Protocal），属性协议，是BLE通信的基础，ATT封装数据，向外暴露为“属性”，提供“属性”的为服务端，读取“属性”的为客户端。</p>
<p>  GATT（Generic Attribute Profile），通用属性配置文件，建立在ATT的基础上，对ATT做进一步的逻辑封装，定义数据的交互方式和含义。每个GATT里面包含3个层次：服务（service）、特征（Characteristic）、描述（Descriptor）。</p>
<p>  GAP（Generic Access Profile），停用访问控制配置文件。它定义了 BLE 整个通信过程中的流程，例如广播、扫描、连接等流程。还定义了参与通信的设备角色，以及他们各自的职能，例如广播数据的 Broadcaster，接收广播的 Observer，还有被连接的“外设” Peripheral 和发起连接的“中心设备” Central。</p>
</li>
<li><p>Applications</p>
<p>  这一层为BLE的应用层，可分为两大类，分别为基于连接和非连接。</p>
<p>  基于非连接的也叫Beacon，依赖于BLE的广播，常用语BLE搜索其他设备。这里的BLE存在两种角色，发送广播方为Broadcaster，监听广播方为Observer。</p>
<p>  基于连接的需要通过GATT连接来收发数据。这里的BLE也存在两种角色，分别是中心主机设备Central，和被连接的从机外设Peripheral。</p>
</li>
</ul>
<h2 id="GATT内部层次"><a href="#GATT内部层次" class="headerlink" title="GATT内部层次"></a>GATT内部层次</h2><p>GATT内部抽象图：<br><img src="http://7rf9ir.com1.z0.glb.clouddn.com/Android-BLE-in-Action.008.jpeg" alt="image"><br>GATT最外层是Profile配置文件，里面又包含了服务（service）、特征（Characteristic）、描述（Descriptor），他们之间的关系是一个 Service 包含若干个 Characteristic，一个 Characteristic 可以包含若干 Descriptor。而 Characteristic 定义了数值和操作。Characteristic 的操作这几种权限：读、写、通知等权限。我们说的 BLE 通信，其实就是对 Characteristic 的读写或者订阅通知。</p>
<h2 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h2><p>Service、Characteristic 还有 Descriptor 之间都是使用 UUID 唯一标识来区分的。</p>
<p>UID 是全球唯一标识符，它是 128bit 的值，为了便于识别和阅读，一般写成8-4-4-12 的16进制形式。如123e4567-e89b-12d3-a456-426655440000。</p>
<p>16-bit的蓝牙基本UUID形式为 0000XXXX-0000-1000-8000-00805f9b34fb。实际UUID为18位，但是除了XXXX部分需要更改，其他的基本一致，这样对于BLE的数据非常受限的设备使用起来更加方便。</p>
<p>Android中为了避免UUID的冲突，可以使用UUID.randomUUID()方法来生成一个随机的UUID。</p>
<p>16-bit的UUID数量只有65536个，数量远不如128-bit的，所以官方事先保留了一些UIID，若是16-bit的基本UUID不够用，可以选择购买。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><p><a href="https://race604.com/android-ble-in-action/" target="_blank" rel="external">Android 上的低功耗蓝牙实践</a></p>
</li>
<li><p><a href="https://race604.com/gatt-profile-intro/" target="_blank" rel="external">GATT Profile 简介</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;BLE协议栈简析&quot;&gt;&lt;a href=&quot;#BLE协议栈简析&quot; class=&quot;headerlink&quot; title=&quot;BLE协议栈简析&quot;&gt;&lt;/a&gt;BLE协议栈简析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文针对蓝牙4.0，也就是低功耗蓝牙BLE的协议栈进行简单分析。&lt;
    
    </summary>
    
    
      <category term="BLE" scheme="http://linzhs.cm/tags/BLE/"/>
    
  </entry>
  
  <entry>
    <title>Android中Activity的启动模式</title>
    <link href="http://linzhs.cm/2017/04/21/android-activity-startmode/"/>
    <id>http://linzhs.cm/2017/04/21/android-activity-startmode/</id>
    <published>2017-04-20T17:16:52.000Z</published>
    <updated>2017-04-20T17:16:52.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android中Activity的启动模式"><a href="#Android中Activity的启动模式" class="headerlink" title="Android中Activity的启动模式"></a>Android中Activity的启动模式</h2><p>在Android中，每一个任务（应用程序）都有一个放回栈（back stack），每一个应用都有一到多个Activity，返回栈就是来存储这些活动的，当Activity处于栈顶的时候，该Activity也是正显示在手机屏幕上的。若用户按下“返回”按钮后，一个Activity将会被弹出栈，也就等于被销毁，而前一个Activity也将被执行。返回栈中永远不会重新排序，而是根据入栈和出栈的顺序来排列的。</p>
<p>在没有设置Activity的启动模式的时候，栈是可以被重复创建的，比如一个应用有很多个Activity，这些Activity大部分都可以创建同一个Activity，那么每次创建都会被推入栈中，返回栈也就有了多次被实例化的Activity。</p>
<p>Activity和任务的默认行为如下：</p>
<ul>
<li>当 Activity A 启动 Activity B 时，Activity A 将会停止，但系统会保留其状态（例如，滚动位置和已输入表单中的文本）。如果用户处于Activity B时按“返回”按钮，则Activity A将恢复其状态，继续运行。（活动与活动之间如何进行数据交流，活动怎么在一个应用程序的生命周期中保存好自己的关键数据，以防中途活动被销毁后，又要从头开始加载，丢失关键数据？这些问题将在另一篇随笔上做总结）</li>
<li>用户通过按下Home键按钮离开任务时，当前Activity将停止运行，并且任务会将入后台。系统将保留任务中的每个Activity的状态。如果用户稍后通过选择开始任务的启动器图标来恢复任务，则任务又会回到前台并恢复当前任务返回栈栈顶的Activity继续执行。</li>
<li>如果用户按“返回”按钮，则当前 Activity 会从堆栈弹出并被销毁。 堆栈中的前一个 Activity 恢复执行。销毁 Activity 时，系统不会保留该 Activity 的状态。</li>
<li>当前任务的Activity也可以被其他任务多次实例化。</li>
</ul>
<h3 id="自定义Activity的启动模式"><a href="#自定义Activity的启动模式" class="headerlink" title="自定义Activity的启动模式"></a>自定义Activity的启动模式</h3><p>我们可以为每个Activity定义一种启动模式，注册的方法就是在<a href="">AndroidManifest.xml</a>文件声明时，为相应的Activity元素加上launchMode属性，并且指定该属性为如下一种：</p>
<ul>
<li>“standard”（默认标准模式）</li>
</ul>
<p>这个标准模式是默认的启动模式。系统在启动 Activity 的任务中创建 Activity 的新实例并向其传送 Intent。默认模式下的Activity可以被多次实例化，而且每个实例都可以属于不用的任务，并且一个任务可以拥有多个实例，举个例子，比如我们现在界面上有个按钮，点击按钮就会启动一个新的活动，这个活动是默认模式的，新的活动里也有一个按钮，这个新的按钮还是启动这个新的界面，所以每个当我们点击按钮后，同一个Activity将会多多次实例化，实例化了多少次，就要按下“返回”按钮来销毁多少次。</p>
<ul>
<li>“singleTop”</li>
</ul>
<p>在“singleTop”模式下，如果当前的任务的栈顶已经存在此种模式的Activity实例，那么系统会通过调用该实例的<a href="">onNewIntent()</a>方法向其传输intent，而不是创建Activity新的实例。也就是说，在“singleTop”模式下，如果活动位于栈顶，那么此活动只会被实例化一次，若不是在栈顶，那么还是会被多次实例化。</p>
<p>例如，假设任务的返回栈包含根 Activity A 以及 Activity B、C 和位于顶部的 D（堆栈是 A-B-C-D；D 位于顶部）。收到针对 D 类 Activity 的 Intent。如果 D 具有默认的 “standard” 启动模式，则会启动该类的新实例，且堆栈会变成 A-B-C-D-D。但是，如果 D 的启动模式是 “singleTop”，则 D 的现有实例会通过 onNewIntent() 接收 Intent，因为它位于堆栈的顶部；而堆栈仍为 A-B-C-D。但是，如果收到针对 B 类 Activity 的 Intent，则会向堆栈添加 B 的新实例，即便其启动模式为 “singleTop” 也是如此。</p>
<blockquote>
<p>注：为某个 Activity 创建新实例时，用户可以按“返回”按钮返回到前一个 Activity。 但是，当 Activity 的现有实例处理新 Intent 时，则在新 Intent 到达 onNewIntent() 之前，用户无法按“返回”按钮返回到 Activity 的状态。</p>
</blockquote>
<ul>
<li>“singleTask”</li>
</ul>
<p>当前活动的模式如果是“singleTask”模式，拿每次启动该活动时系统首先会在返回栈中检查是否存在该实例，如果发现先已经存在则不会重新实例化，而是使用已经存在的，则系统会通过调用现有实例的 <a href="">onNewIntent()</a> 方法向其传送 Intent，并把这个活动统统出栈，让这个活动处于栈顶，如果返回栈中没有该活动的实例，则会创建一个新的实例。</p>
<ul>
<li>“singleInstance”</li>
</ul>
<p>“singleInstance”模式下的活动比较特别，该活动会被系统单独放在一个返回栈上去管理，这个活动在整个应用程序的生命里面只有一个实例，这个和单例模式很像了。在这种模式下，这个活动是共享的，也可以被其他应用程序调用。</p>
<h3 id="动态设置Activity启动模式"><a href="#动态设置Activity启动模式" class="headerlink" title="动态设置Activity启动模式"></a>动态设置Activity启动模式</h3><p>在程序中用startActivity()启动Activity的时候，可以在Intent中加入相应的标志来修改Activity与其他任务的默认关联方式。可用于修改的标志如下所示：</p>
<ul>
<li>FLAG_ACTIVITY_NEW_TASK</li>
</ul>
<p>在新任务中启动 Activity。如果已为正在启动的 Activity 运行任务，则该任务会转到前台并恢复其最后状态，同时 Activity 会在 onNewIntent() 中收到新 Intent。这个状态与”singlTask”模式是一样的。</p>
<ul>
<li>FLAG_ACTIVITY_SINGLE_TOP</li>
</ul>
<p>如果正在启动的 Activity 是当前 Activity（位于返回栈的顶部），则 现有实例会接收对 onNewIntent() 的调用，而不是创建 Activity 的新实例。这种模式与“singleTop”模式一致。</p>
<ul>
<li>FLAG_ACTIVITY_CLEAR_TOP</li>
</ul>
<p>如果正在启动的 Activity 已在当前任务中运行，则会销毁当前任务顶部的所有 Activity，并通过 onNewIntent() 将此 Intent 传递给 Activity 已恢复的实例（现在位于顶部），而不是启动该 Activity 的新实例。</p>
<p>FLAG_ACTIVITY_CLEAR_TOP 通常与 FLAG_ACTIVITY_NEW_TASK 结合使用。一起使用时，通过这些标志，可以找到其他任务中的现有 Activity，并将其放入可从中响应 Intent 的位置。</p>
<h3 id="清理返回栈"><a href="#清理返回栈" class="headerlink" title="清理返回栈"></a>清理返回栈</h3><p>如果用户长时间离开任务，则系统会清除所有 Activity 的任务，根 Activity 除外。 当用户再次返回到任务时，仅恢复根 Activity。系统这样做的原因是，经过很长一段时间后，用户可能已经放弃之前执行的操作，返回到任务是要开始执行新的操作。</p>
<p>可以使用下列几个 Activity 属性修改此行为：</p>
<ul>
<li>alwaysRetainTaskState</li>
</ul>
<p>如果在任务的根 Activity 中将此属性设置为 “true”，则不会发生刚才所述的默认行为。即使在很长一段时间后，任务仍将所有 Activity 保留在其堆栈中。</p>
<ul>
<li>clearTaskOnLaunch</li>
</ul>
<p>如果在任务的根 Activity 中将此属性设置为 “true”，则每当用户离开任务然后返回时，系统都会将堆栈清除到只剩下根 Activity。 换而言之，它与 alwaysRetainTaskState 正好相反。 即使只离开任务片刻时间，用户也始终会返回到任务的初始状态。</p>
<ul>
<li>finishOnTaskLaunch</li>
</ul>
<p>此属性类似于 clearTaskOnLaunch，但它对单个 Activity 起作用，而非整个任务。 此外，它还有可能会导致任何 Activity 停止，包括根 Activity。 设置为 “true” 时，Activity 仍是任务的一部分，但是仅限于当前会话。如果用户离开然后返回任务，则任务将不复存在。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Android中Activity的启动模式&quot;&gt;&lt;a href=&quot;#Android中Activity的启动模式&quot; class=&quot;headerlink&quot; title=&quot;Android中Activity的启动模式&quot;&gt;&lt;/a&gt;Android中Activity的启动模式&lt;/
    
    </summary>
    
    
      <category term="Android" scheme="http://linzhs.cm/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android中Activity、Fragment、Service的生命周期</title>
    <link href="http://linzhs.cm/2017/04/21/android-lifecycle/"/>
    <id>http://linzhs.cm/2017/04/21/android-lifecycle/</id>
    <published>2017-04-20T17:15:48.000Z</published>
    <updated>2017-04-20T17:15:48.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android中Activity、Fragment、Service的生命周期"><a href="#Android中Activity、Fragment、Service的生命周期" class="headerlink" title="Android中Activity、Fragment、Service的生命周期"></a>Android中Activity、Fragment、Service的生命周期</h1><blockquote>
<p>在Android系统中，常见的应用组件都有它的生命周期，以便于系统对内存的管理，接下来总结一下Activity，Fragment，Service这三个常见、重要的组件的生命周期。</p>
</blockquote>
<h2 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h2><p>用回调方法的方式来管理Activity的生命周期对于开发强大、灵活的应用来说那是至关重要的。Activity的生命周期会直接影响到其他Activity、其任务和返回栈。</p>
<p>Activity有三种状态存在：</p>
<ul>
<li>运行状态</li>
</ul>
<p>此时Activity处于屏幕的前台，可以与用户进行交互，具有用户焦点。</p>
<ul>
<li>暂停状态</li>
</ul>
<p>我们经常会遇到这种情况：屏幕上出现一个对话框，或者加载动画框，从屏幕下面弹出不会沾满屏幕的一个选项卡，而且在屏幕里面还能看到另一个界面。对于这种情况，另一个Activity位于屏幕前台并且具有用户焦点，但在背后的Activity仍然可见。也就是说，另一个Activity显示在此Activity的上方，并且Activity部分透明或者未被覆盖整个屏幕，我们把这个时候的Activity成为暂停状态。</p>
<p>暂停状态的Activity仍然处于完全活动的状态（Activity对象保留在内存中，它保留了所有状态和成员信息，并与窗口管理器 保持连接），但是这个状态的Activity在内存不足的时候，也会被系统终止并且回收。处于此状态的Activity一般不要做太多事情，在正常切换的时候如果有太多占用时间的任务完成，那么有可能会导致卡顿的情况，影响了用户体验。</p>
<ul>
<li>停止状态</li>
</ul>
<p>当一个Activity被另一个Activity完全覆盖的时候，也就进入了后台。已停止的 Activity 同样仍处于活动状态（Activity 对象保留在内存中，它保留了所有状态和成员信息，但未与窗口管理器连接）。 不过，它对用户不再可见，在他处需要内存时可能会被系统终止。</p>
<p>如果 Activity 处于暂停或停止状态，系统可通过要求其结束（调用其 finish() 方法）或直接终止其进程，将其从内存中删除。（将其结束或终止后）再次打开 Activity 时，必须重建。</p>
<h3 id="生命周期对应的回调"><a href="#生命周期对应的回调" class="headerlink" title="生命周期对应的回调"></a>生命周期对应的回调</h3><p>当一个Activity转入或者转出不同的状态的时候，会有相应的回调方法被调用，也就是向Activity发出通知。我们可以在不同的状态回调方法中加入不同的操作任务，来完成相应的行为，比如实例化的时候初始化一些信息，暂停或者停止状态的时候可能Activity会被销毁，在此状态做信息状态保留等。</p>
<p>以下框架 Activity 包括每一个基本生命周期方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public class ExampleActivity extends Activity &#123;</div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        // The activity is being created.</div><div class="line">        // 在创建Activity的时候，这个回调必须重写</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void onStart() &#123;</div><div class="line">        super.onStart();</div><div class="line">        // The activity is about to become visible.</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void onResume() &#123;</div><div class="line">        super.onResume();</div><div class="line">        // The activity has become visible (it is now &quot;resumed&quot;).</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void onPause() &#123;</div><div class="line">        super.onPause();</div><div class="line">        // Another activity is taking focus (this activity is about to be &quot;paused&quot;).</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void onStop() &#123;</div><div class="line">        super.onStop();</div><div class="line">        // The activity is no longer visible (it is now &quot;stopped&quot;)</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        // The activity is about to be destroyed.</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>onCreate()</li>
</ul>
<p>首次创建Activity的时候调用（Activity被销毁后重建也是首次创建）。该回调方法传入一个Bundle对象，这个对象很重要，用于保存上一次Activity被创建后的状态。-&gt; onStart()</p>
<ul>
<li>onStart()</li>
</ul>
<p>在Activity对用户可见之前被调用。如果Activity转入前台可见，则接下来调用onResume()，若是转入隐藏状态，则接下来调用onStop()。</p>
<ul>
<li>onResume()</li>
</ul>
<p>在 Activity 即将开始与用户进行交互之前调用。 此时，Activity 处于 Activity 堆栈的顶层，并具有用户输入焦点。-&gt; onPause()</p>
<ul>
<li>onPause()</li>
</ul>
<p>当系统要去执行另一个Activity的时候被调用，此时Activity还处于可见的状态，不过已经有一些界面已被另一个Activity覆盖。此方法通常用于确认对持久性数据的未保存更改、停止动画以及其他可能消耗 CPU 的内容，诸如此类。 它应该非常迅速地执行所需操作，因为它返回后，下一个 Activity 才能继续执行。</p>
<p>如果 Activity 返回前台，则后接 onResume()，如果 Activity 转入对用户不可见状态，则后接 onStop()。</p>
<ul>
<li>onStop()</li>
</ul>
<p>在 Activity 对用户不再可见时调用。如果 Activity 被销毁，或另一个 Activity（一个现有 Activity 或新 Activity）继续执行并将其覆盖，就可能发生这种情况。</p>
<p>如果 Activity 恢复与用户的交互，则后接 onRestart()，如果 Activity 被销毁，则后接 onDestroy()。</p>
<ul>
<li>onRestart()</li>
</ul>
<p>在 Activity 已停止并即将再次启动前调用。始终后接 onStart()</p>
<ul>
<li>onDestroy()</li>
</ul>
<p>在 Activity 被销毁前调用。这是 Activity 将收到的最后调用。 当 Activity 结束（有人对 Activity 调用了 finish()），或系统为节省空间而暂时销毁该 Activity 实例时，可能会调用它。 您可以通过 isFinishing() 方法区分这两种情形。</p>
<p>这些方法共同定义 Activity 的整个生命周期。可以通过实现这些方法监控 Activity 生命周期中的三个嵌套循环：</p>
<ul>
<li>完整生命周期</li>
</ul>
<p>在 onCreate() 调用与 onDestroy() 调用之间。</p>
<p>您的 Activity 应在 onCreate() 中执行“全局”状态设置（例如定义布局），并释放 onDestroy() 中的所有其余资源。例如，如果您的 Activity有一个在后台运行的线程，用于从网络上下载数据，它可能会在 onCreate() 中创建该线程，然后在 onDestroy() 中停止该线程。</p>
<ul>
<li>可见生命周期</li>
</ul>
<p>在 onStart() 调用与 onStop() 调用之间。</p>
<p>在这段时间，用户可以在屏幕上看到 Activity 并与其交互。 例如，当一个新 Activity 启动，并且此 Activity 不再可见时，系统会调用 onStop()。您可以在调用这两个方法之间保留向用户显示 Activity 所需的资源。 例如，您可以在 onStart() 中注册一个 BroadcastReceiver 以监控影响 UI 的变化，并在用户无法再看到您显示的内容时在 onStop() 中将其取消注册。在 Activity 的整个生命周期，当 Activity 在对用户可见和隐藏两种状态中交替变化时，系统可能会多次调用 onStart() 和 onStop()。</p>
<ul>
<li>前台声明周期</li>
</ul>
<p>在 onResume() 调用与 onPause() 调用之间。</p>
<p>在这段时间，Activity 位于屏幕上的所有其他 Activity 之前，并具有用户输入焦点。 Activity 可频繁转入和转出前台 — 例如，当设备转入休眠状态或出现对话框时，系统会调用 onPause()。 由于此状态可能经常发生转变，因此这两个方法中应采用适度轻量级的代码，以避免因转变速度慢而让用户等待。</p>
<h3 id="实例：旋转屏幕Activity的生命周期变化（带保存状态）"><a href="#实例：旋转屏幕Activity的生命周期变化（带保存状态）" class="headerlink" title="实例：旋转屏幕Activity的生命周期变化（带保存状态）"></a>实例：旋转屏幕Activity的生命周期变化（带保存状态）</h3><p>假设一开始是竖屏状态，旋转后为横屏。</p>
<p>横屏状态下：onCreate() -&gt; onStart() -&gt; onResume()</p>
<p>旋转屏幕：onSavaInstanceState() -&gt; onPause() -&gt; onStop() -&gt; onDestroy() - &gt;onCreate() -&gt; onStart() -&gt; onRestoreInstanceState() -&gt; onResume()</p>
<h2 id="Fragment的生命周期"><a href="#Fragment的生命周期" class="headerlink" title="Fragment的生命周期"></a>Fragment的生命周期</h2><p>管理片段生命周期与管理 Activity 生命周期很相似。和 Activity 一样，片段也以三种状态存在：</p>
<ul>
<li>运行状态</li>
</ul>
<p>片段在运行中的 Activity 中可见。</p>
<ul>
<li>暂停状态</li>
</ul>
<p>另一个 Activity 位于前台并具有焦点，但此片段所在的 Activity 仍然可见（前台 Activity 部分透明，或未覆盖整个屏幕）。</p>
<ul>
<li>停止状态</li>
<li>片段不可见。宿主 Activity 已停止，或片段已从 Activity中移除，但已添加到返回栈。</li>
</ul>
<p>停止片段仍然处于活动状态（系统会保留所有状态和成员信息）。不过，它对用户不再可见，如果 Activity 被终止，它也会被终止。同样与 Activity 一样，假使 Activity 的进程被终止，而需要在重建 Activity 时恢复片段状态，也可以使用 Bundle 保留片段的状态。可以在片段的 onSaveInstanceState() 回调期间保存状态，并可在 onCreate()、onCreateView() 或 onActivityCreated() 期间恢复状态。</p>
<p>Activity 生命周期与片段生命周期之间的最显著差异在于它们在其各自返回栈中的存储方式。 默认情况下，Activity 停止时会被放入由系统管理的 Activity返回栈（以便用户通过返回按钮回退到Activity，任务和返回栈对此做了阐述）。不过，仅当您在移除片段的事务执行期间通过调用 addToBackStack()显式请求保存实例时，系统才会将片段放入由宿主 Activity 管理的返回栈。</p>
<p>在其他方面，管理片段生命周期与管理 Activity 生命周期非常相似。 因此，管理 Activity 生命周期的做法同样适用于片段。</p>
<h3 id="Fragment结合Activity的生命周期一起运行"><a href="#Fragment结合Activity的生命周期一起运行" class="headerlink" title="Fragment结合Activity的生命周期一起运行"></a>Fragment结合Activity的生命周期一起运行</h3><ul>
<li>onAttach()  Fragment和Activity建立关联</li>
<li>onCreate()</li>
<li>onCreateView() 调用它可创建与片段关联的视图层次结构</li>
<li>onActivityCreated() 在 Activity 的 onCreate() 方法已返回时调用</li>
<li>onStart()</li>
<li>onResume()</li>
<li>onPause()</li>
<li>onStop()</li>
<li>onDestroyView() 在移除与片段关联的视图层次结构时调用</li>
<li>onDestroy() </li>
<li>onDetach() 在取消片段与 Activity 的关联时调用</li>
</ul>
<h2 id="Service的生命周期"><a href="#Service的生命周期" class="headerlink" title="Service的生命周期"></a>Service的生命周期</h2><p>服务基本上分为两种形式：</p>
<ul>
<li>启动</li>
</ul>
<p>当应用组件（如 Activity）通过调用 startService() 启动服务时，服务即处于“启动”状态。一旦启动，服务即可在后台无限期运行，即使启动服务的组件已被销毁也不受影响。 已启动的服务通常是执行单一操作，而且不会将结果返回给调用方。例如，它可能通过网络下载或上传文件。 操作完成后，服务会自行停止运行。</p>
<ul>
<li>绑定</li>
</ul>
<p>当应用组件通过调用 bindService() 绑定到服务时，服务即处于“绑定”状态。绑定服务提供了一个客户端-服务器接口，允许组件与服务进行交互、发送请求、获取结果，甚至是利用进程间通信 (IPC) 跨进程执行这些操作。 仅当与另一个应用组件绑定时，绑定服务才会运行。 多个组件可以同时绑定到该服务，但全部取消绑定后，该服务即会被销毁。</p>
<p>虽然本文档是分开概括讨论这两种服务，但是您的服务可以同时以这两种方式运行，也就是说，它既可以是启动服务（以无限期运行），也允许绑定。问题只是在于您是否实现了一组回调方法：onStartCommand()（允许组件启动服务）和 onBind()（允许绑定服务）。</p>
<p>无论应用是处于启动状态还是绑定状态，抑或处于启动并且绑定状态，任何应用组件均可像使用 Activity 那样通过调用 Intent 来使用服务（即使此服务来自另一应用）。 不过，您可以通过清单文件将服务声明为私有服务，并阻止其他应用访问。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android中Activity、Fragment、Service的生命周期&quot;&gt;&lt;a href=&quot;#Android中Activity、Fragment、Service的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Android中Activity
    
    </summary>
    
    
      <category term="Android" scheme="http://linzhs.cm/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统的体系架构</title>
    <link href="http://linzhs.cm/2017/04/21/android-system-architecture/"/>
    <id>http://linzhs.cm/2017/04/21/android-system-architecture/</id>
    <published>2017-04-20T17:13:30.000Z</published>
    <updated>2017-04-20T17:13:30.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android系统的体系架构"><a href="#Android系统的体系架构" class="headerlink" title="Android系统的体系架构"></a>Android系统的体系架构</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>Android 5.0 （API 21）开始，Android开发者官网给出的平台架构层次稍微有些不一样，从原先的四层结构变成五层，更加易懂。Android系统的平台架构从下至上分为：</p>
<p>Linux内核层 -&gt; 硬件抽象层（HAL） -&gt; 原生C/C++层 + Android Runtime层 -&gt; Java API框架层 -&gt; 系统应用程序层</p>
</blockquote>
<h3 id="Linux内核层"><a href="#Linux内核层" class="headerlink" title="Linux内核层"></a>Linux内核层</h3><p>众所周知，Android是基于Linux内核构建的，所以最底层肯定是Linux的内核，Android Runtime也需要依靠Linux内核来执行底层任务，比如线程和内存的管理，当然，这一层还包含了嵌入式的硬件驱动程序，包括蓝牙、WiFi、摄像头等等。</p>
<h3 id="硬件抽象层（Hardware-Abstract-Layout-HAL）"><a href="#硬件抽象层（Hardware-Abstract-Layout-HAL）" class="headerlink" title="硬件抽象层（Hardware Abstract Layout, HAL）"></a>硬件抽象层（Hardware Abstract Layout, HAL）</h3><p>硬件抽象层是位于操作系统内核与硬件电路之间的接口层，其目的在于将硬件抽象化，为了保护硬件厂商的知识产权，它隐藏了特定平台的硬件接口细节，为操作系统提供虚拟硬件平台，使其具有硬件无关性，可在多种平台上进行移植。 从软硬件测试的角度来看，软硬件的测试工作都可分别基于硬件抽象层来完成，使得软硬件测试工作的并行进行成为可能。通俗来讲，就是将控制硬件的动作放在硬件抽象层中。</p>
<h3 id="系统运行库层"><a href="#系统运行库层" class="headerlink" title="系统运行库层"></a>系统运行库层</h3><p>这一层包含两部分，一部分是原生的C/C++库，另一部分是Android Runtime，也就是Android的虚拟机。</p>
<ul>
<li><p>Android Runtime</p>
<p>Android 5.0（API 21）开始，ART（Android Runtime）取代了之前的Dalvik虚拟机。ART 编写为通过执行 DEX 文件在低内存设备上运行多个虚拟机，DEX 文件是一种专为 Android 设计的字节码格式，经过优化，使用的内存很少。编译工具链（例如 Jack）将 Java 源代码编译为 DEX 字节码，使其可在 Android 平台上运行。</p>
</li>
</ul>
<p>ART的部分主要功能包括：</p>
<ul>
<li>预先 (AOT) 和即时 (JIT) 编译</li>
<li>优化的垃圾回收 (GC)</li>
<li>更好的调试支持，包括专用采样分析器、详细的诊断异常和崩溃报告，并且能够设置监视点以监控特定字段</li>
</ul>
<p>Android 还包含一套核心运行时库，可提供 Java API 框架使用的 Java 编程语言大部分功能，包括一些 Java 8 语言功能。</p>
<ul>
<li>原生C/C++库</li>
</ul>
<p>很多Android的系统组件和服务都由C/C++构建，Android也将原生的开发提供给开发者。开发者可以 Android 框架的 Java OpenGL API 访问 OpenGL ES，以支持在应用中绘制和操作 2D 和 3D 图形。如果开发的是需要 C 或 C++ 代码的应用，可以使用 Android NDK 直接从原生代码访问某些原生平台库。</p>
<h3 id="Java-API-框架层"><a href="#Java-API-框架层" class="headerlink" title="Java API 框架层"></a>Java API 框架层</h3><p>这个层提供了用Java编写的API，这些API是Android系统的整个功能集，开发者可以根据这些API来开发不同的App。核心的模块组件和服务如下：</p>
<ul>
<li>View系统。可用以构建应用的UI，包括列表、网格、文本框、按钮甚至可嵌入的网络浏览器</li>
<li>资源管理器，用于访问非代码资源，例如本地化的字符串、图形和布局文件</li>
<li>通知管理器，可让所有应用在状态栏中显示自定义提醒</li>
<li>Activity 管理器，用于管理应用的生命周期，提供常见的导航返回栈</li>
<li>内容提供程序，可让应用访问其他应用（例如“联系人”应用）中的数据或者共享其自己的数据</li>
</ul>
<h3 id="系统应用层"><a href="#系统应用层" class="headerlink" title="系统应用层"></a>系统应用层</h3><p>系统中内置的应用和开发者开发的应用程序，都归属系统的应用层，主要是和用户进行交互，这一层都是用Java来发开的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Android系统的体系架构&quot;&gt;&lt;a href=&quot;#Android系统的体系架构&quot; class=&quot;headerlink&quot; title=&quot;Android系统的体系架构&quot;&gt;&lt;/a&gt;Android系统的体系架构&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot;
    
    </summary>
    
    
      <category term="Android" scheme="http://linzhs.cm/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java随笔 - 内部类和闭包</title>
    <link href="http://linzhs.cm/2017/04/21/java-innerclass/"/>
    <id>http://linzhs.cm/2017/04/21/java-innerclass/</id>
    <published>2017-04-20T17:11:22.000Z</published>
    <updated>2017-04-20T17:11:22.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java随笔-内部类和闭包"><a href="#Java随笔-内部类和闭包" class="headerlink" title="Java随笔 - 内部类和闭包"></a>Java随笔 - 内部类和闭包</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>内部类（inner class），就是类中类，与其对应的就是外部类。接下来将学习内部类的各种形式，内部类和外部类的联系，还Java中的闭包。</p>
</blockquote>
<h3 id="内部类的作用"><a href="#内部类的作用" class="headerlink" title="内部类的作用"></a>内部类的作用</h3><p>每一项技术的诞生都有它的用处，内部类的出现，我们为什么要使用内部类，主要有以下三点：</p>
<ul>
<li>内部类作为外部类的成员，其方法可以访问外部类作用域中的数据，包括私有数据，这个是很重要的一点</li>
<li>内部类可以实现进一步的封装，在Java中，常规类默认是包可见的，或者公有可见，只有内部类可以对同一个包中的其他类不可见，即隐藏起来</li>
<li>当想要定义一个回调函数，又不想编写太多的代码时，使用匿名的内部类可以比较便捷地实现</li>
</ul>
<h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>在普通的类内部放置一个类，外层的我们称之为外部类，在外部类里面的为内部类，相当于内部类成为了外部类的一个成员，成员内部类是包不可见的，成员内部类可以无条件访问外部类的作用域，包括数据和方法，private的也可以。<br>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class OutterClass &#123;//外部类</div><div class="line">	private int intValue = 0;</div><div class="line">	private static int staticValue = 0;</div><div class="line">	public OutterClass(int intValue) &#123;</div><div class="line">		this.intValue = intValue;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	class InnerClass &#123;//内部类</div><div class="line">		int a = intValue;</div><div class="line">		public void output() &#123;</div><div class="line">			System.out.println(intValue);</div><div class="line">			System.out.println(staticValue);</div><div class="line">			</div><div class="line">			intValue++;</div><div class="line">			System.out.println(intValue);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Java中，实现内部类能够访问外部类成员的思路是，内部类的对象总有一个隐式的引用，它指向了创建它的外部类的对象，假设这个引用为outer（实际不是Java的关键字），那么上面例子的内部类可以等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class InnerClass &#123;//内部类</div><div class="line">		int a = outer.intValue;</div><div class="line">		public void output() &#123;</div><div class="line">			System.out.println(outer.intValue);</div><div class="line">			System.out.println(outer.staticValue);</div><div class="line">			</div><div class="line">			outer.intValue++;</div><div class="line">			System.out.println(outer.intValue);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<h3 id="内部类的特殊语法"><a href="#内部类的特殊语法" class="headerlink" title="内部类的特殊语法"></a>内部类的特殊语法</h3><p>Java的语法当中，变量名的命名除了使用下划线、数字、字母外，还可以使用$来命名，但是一般不推荐使用，因为这个美刀字符，只要是用于对内部类的命名，上面的例子中，编译器编译过后，内部类所形成的类名实际为OutterClass$InnerClass。<br>内部类正规的引用外部类的成员是使用如下形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OutterClass.this</div></pre></td></tr></table></figure></p>
<p>这种表达方式中的this限定词很多时候可能是累赘，没什么作用，但是如果内部类中的方法和数据与外部的相同时，作用就很大了，就像在类的构造方法中经常用到的方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(OutterClass.this.intValue);//调用外部类的intValue成员</div></pre></td></tr></table></figure></p>
<p>外部类是没法直接访问内部类的，要访问内部类，就必须在外部类中实例化一个内部类对象，通过这个对象引用到访问内部类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class OutterClass &#123;//外部类</div><div class="line">	private int intValue = 0;</div><div class="line">	private static int staticValue = 0;</div><div class="line">	private InnerClass inner;</div><div class="line">	public OutterClass(int intValue) &#123;</div><div class="line">		this.intValue = intValue;</div><div class="line">		Inner = new InnerClass();//实例化一个内部类对象</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	class InnerClass &#123;//内部类</div><div class="line">		...</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>内部类也是有所限制的，它必须依附于外部类存在的，如果需要创建一个内部类对象，那就必须存在一个外部类对象，通过这个外部类对象来实例化一个内部类对象。创建内部类对象的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OutterClass out = new OutterClass(...);</div><div class="line">OutterClass.InnerClass in = out.new InnerClass();</div></pre></td></tr></table></figure></p>
<h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>有时候会遇到这种情况：我们需要在一个方法当中去回调一个实现了相应操作接口的类的方法，对应创建的对象只使用一次，如果在外部类中内置一个内部类，那么每个外部类对象都会有这个内部类。但是，Java给我们提供一个便捷的方式，让程序员更加“懒惰”，我们可以在方法中定义一个局部的内部类，从而实现该对象只使用一次就被GC回收，例子如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public OutterClass() &#123;</div><div class="line">    class InnerClass &#123;</div><div class="line">        private int i = 0;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    InnerClass in = new InnerClass();</div><div class="line">    System.out.println(in.i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在方法中的局部类，和定义变量一样，不能用private、public等修饰符来声明，它的作用域仅限于这个块中。</p>
<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类比较好理解，就是创建一个没有名字的内部类，这个是非常常见的，举一个Android中按钮点击触发的事件例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">button.setOnClickListener(new View.OnClickListener &#123; </div><div class="line">   @Override</div><div class="line">   public void onClick(View v) &#123;</div><div class="line">       //do something...</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>Java中，只有内部类可以声明为static，若是声明为static的内部类，我们称之为静态内部类。静态内部类的对象不具备对生成它的外部类对象的引用特权，其他的基本是普通内部类一致。静态内部类无法访问外部类的非静态成员。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class OutterClass &#123;//外部类</div><div class="line">    private int intValue = 0;</div><div class="line">    private static int staticValue = 0;</div><div class="line">    static class StaticInnerClass &#123;</div><div class="line">        public int a = staticValue;</div><div class="line">        //public int b = intValue;//error</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class InnerClassTest &#123;</div><div class="line">  public static void main(String[] args)&#123;</div><div class="line">      OutterClass.StaticInnerClass in = new OutterClass.StaticInnerClass();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="闭包（Closure）"><a href="#闭包（Closure）" class="headerlink" title="闭包（Closure）"></a>闭包（Closure）</h3><p>Java没有像C#中的委托机制，但是Java引入了闭包，非显式地支持闭包。Java中的闭包一般和回调关联在一起，可以通过接口和内部类来实现。上面谈到，非静态内部类可以理解为外部类的一个对象引用，内部类可以访问外部类的详细信息，所以可以把非静态内部类当做面向对象领域的闭包。</p>
<p>例子：存在一个类Teacher，表示教师，它有一个成员方法work<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class Teacher &#123;</div><div class="line">    public void work() &#123;</div><div class="line">        //do something...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>存在一个接口Programmable，表示具备编程能力的人，它提供一个方法work<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Programmable &#123;</div><div class="line">    void work();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上两者都提供了work方法，方法的签名是一样的，但是功能不一样。<br>现在有这么一个人，他是老师，教的是编程课，那么我们既要实现Programmable接口，也要继承教师类。现在的问题是实现的这个类只能定义一个work方法，怎么来实现？采用闭包可以有效解决这个问题。</p>
<p>code：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public Man extends Teacher &#123;</div><div class="line">    @Override </div><div class="line">    public void work() &#123;</div><div class="line">        //do something...</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void coding() &#123;</div><div class="line">        //program</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    class Programmer implements Programmabele &#123;</div><div class="line">        @Override</div><div class="line">        public void work() &#123;</div><div class="line">            coding();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java随笔-内部类和闭包&quot;&gt;&lt;a href=&quot;#Java随笔-内部类和闭包&quot; class=&quot;headerlink&quot; title=&quot;Java随笔 - 内部类和闭包&quot;&gt;&lt;/a&gt;Java随笔 - 内部类和闭包&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot;
    
    </summary>
    
    
      <category term="Java" scheme="http://linzhs.cm/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java随笔 - 枚举类</title>
    <link href="http://linzhs.cm/2017/04/21/java-enum/"/>
    <id>http://linzhs.cm/2017/04/21/java-enum/</id>
    <published>2017-04-20T17:10:21.000Z</published>
    <updated>2017-04-20T17:10:21.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java随笔-枚举类"><a href="#Java随笔-枚举类" class="headerlink" title="Java随笔 - 枚举类"></a>Java随笔 - 枚举类</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>枚举类是JDK 5开始引入的，其知识点比较少，又较C/C++中的枚举类型不一样，在这里，枚举以类的形式存在，下面学习枚举类的常见语法和在单例模式（设计模式）中的应用。</p>
</blockquote>
<h3 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h3><p>先看一个典型例子，在C/C++/C#中都是很常见的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">enum Week &#123;</div><div class="line">	Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>所有的枚举类都继承于Enum，Enum有一些比较好用的方法，比如toString()，ordinal()，compareTo()，下面为使用例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">System.out.println(Week.Friday);// print &quot;Friday&quot; 直接输出枚举常量</div><div class="line">Week week = Enum.valueOf(Week.class, &quot;Friday&quot;);//获取指定类和名字的枚举常量</div><div class="line">System.out.println(week);// print &quot;Friday&quot;</div><div class="line">System.out.println(Week.Friday.ordinal());//获取当前枚举常量的位置  print 4</div><div class="line">Week[] values = Week.values();//values()为静态方法，将包含的全部枚举常量以数组的形式返回 </div><div class="line">for (Week w : values) &#123;// print Monday Tuesday Wednesday Thursday Friday Saturday Sunday</div><div class="line">	System.out.print(w + &quot; &quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>枚举强调常量这个概念，可以理解为静态的，不要试图去构造一个枚举对象，这样是不允许的，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Week week = new Week();// error</div></pre></td></tr></table></figure></p>
<p>在比较两个枚举类型的值的时候，永远不需要调用equals方法，虽然有实现，直接用==就可以。</p>
<p>有需要的话，可以在枚举类中添加一些构造器、方法和数据域。当然，其中的构造器只能在构造枚举常量的时候被调用。以下为例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">enum Size &#123;</div><div class="line">	SMALL(&quot;S&quot;), MEDIUM(&quot;M&quot;), LARGE(&quot;L&quot;),EXTRA_LARGE(&quot;XL&quot;);</div><div class="line">	</div><div class="line">	private String abbreviation;</div><div class="line">	</div><div class="line">	private Size(String abbreviation) &#123;</div><div class="line">		this.abbreviation = abbreviation;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public String getAbbreviation() &#123;</div><div class="line">		return abbreviation;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">System.out.println(Size.SMALL.getAbbreviation());</div><div class="line">Size size = Enum.valueOf(Size.class, &quot;SMALL&quot;);//print &quot;S&quot;</div><div class="line">System.out.println(size.equals(Size.SMALL));//true</div><div class="line">System.out.println(size == Size.SMALL);//true</div><div class="line">System.out.println(size == Size.LARGE);//false</div></pre></td></tr></table></figure></p>
<h3 id="单例模式的枚举实现"><a href="#单例模式的枚举实现" class="headerlink" title="单例模式的枚举实现"></a>单例模式的枚举实现</h3><p>用枚举来实现单例模式是最佳方法。它更简洁，不仅可以避免多线程同步问题，自动支持序列化机制，也可以绝对防止多次被实例化。<br>Code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public enum Singleton &#123;</div><div class="line">    INSTANCE;</div><div class="line">    public void whateverMethod() &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java随笔-枚举类&quot;&gt;&lt;a href=&quot;#Java随笔-枚举类&quot; class=&quot;headerlink&quot; title=&quot;Java随笔 - 枚举类&quot;&gt;&lt;/a&gt;Java随笔 - 枚举类&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;head
    
    </summary>
    
    
      <category term="Java" scheme="http://linzhs.cm/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java随笔 - 接口和抽象</title>
    <link href="http://linzhs.cm/2017/04/21/java-interface-abstract/"/>
    <id>http://linzhs.cm/2017/04/21/java-interface-abstract/</id>
    <published>2017-04-20T17:08:54.000Z</published>
    <updated>2017-04-20T17:08:54.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java随笔-接口和抽象类"><a href="#Java随笔-接口和抽象类" class="headerlink" title="Java随笔 - 接口和抽象类"></a>Java随笔 - 接口和抽象类</h2><blockquote>
<p>接口和抽象类有着相似和不同的地方，相似的地方在于都是为了在继承层次中，让上层更加通用的类更好地将数据隔离、封装、抽象出来，不同之处是两者使用的一些特性。</p>
</blockquote>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>在继承的层次中，处在上层的类更具通用性，也就是通用的超类，让此类作为抽象类，抽象类中的通用的方法进行抽象，在类中起到占位的作用，自己不去实现它，而让继承它的之类去实现它。</p>
<p>抽象类的修饰词是abstract，不仅仅可以修饰类，还可以修饰方法。为了提高程序的清晰度，在一个类中，包含一到多个抽象方法的类，其本身必须被声明为抽象类。也就是说，具备一到多个方法的类一定是抽象类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public abstract class Person &#123;</div><div class="line">    public abstract String getDescription();//抽象方法必须为public或者default</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Student extends Person &#123;</div><div class="line">    public String getDescription() &#123;</div><div class="line">        //...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在抽象类中，除了可以拥有抽象方法，还可以有具体的数据和具体方法，子类继承抽象类时，可以不用去重写具体方法。</p>
<p>抽象类中，可以包含具体的数据域和具体方法，还可以不包含抽象方法。也就是说，类即使不包含抽象方法，也可以被声明为抽象类。但是！抽象类是不能被实例化的，下面的例子就是错误的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Person p = new Person();//error</div><div class="line">Person p = new Student();//ok</div></pre></td></tr></table></figure></p>
<p>抽象类可以定义对象变量，但是其只能引用非抽象子类的对象。</p>
<blockquote>
<p>在抽象类中尽量不要包含具体方法，不管是不是抽象的，都应该将通用的域和方法尽量放在super类中。</p>
</blockquote>
<h3 id="拓展抽象类的方式"><a href="#拓展抽象类的方式" class="headerlink" title="拓展抽象类的方式"></a>拓展抽象类的方式</h3><ul>
<li>在抽象中定义部分抽象类方法或者不定义抽象方法，这样子类就必须声明为抽象类，去定义剩余部分的抽象方法或者去定义没有定义的抽象方法</li>
<li>在抽象类中定义全部的抽象方法，这样子类就不是抽象的了</li>
</ul>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口，修饰符为interface，声明方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Comparable&lt;T&gt; &#123;</div><div class="line">    int compareTo(T other);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接口不是类，而是一种特殊的类，其意义在于描述了类的行为，具有什么功能，这些行为和功能往往具备通用性。接口只是“描述”，而不去实现。一个类只能继承一个类，在Java和C#中都是单继承的，但是对于接口来说，一个类可以实现多继承，也就是一个类可以继承多个接口，其含义是一个类可以具备多种通用的行为。</p>
<p>Java库中内置的Comparable接口，也就是上面的例子，对于实现了这个接口的类，都必须是实现comparaTo方法，从而拥有这个方法，而且这个方法必须和接口中声明的一致，包括参数和返回类型。</p>
<p>接口中的所有方法都是public的，所以在接口声明中写不写public修饰符都是一样的。但是！在实现类中，必须有public修饰符。因为在实现的具体类中，若不写明为public，那么编译器会认为此方法为default，也就是默认包可见的，从而引发后面的一系列警告。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Person implements Comparable&lt;Person&gt; &#123;</div><div class="line">    public compareTo(Person other) &#123;</div><div class="line">        return age - other.age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接口可以包含多个方法，但是在设计模式的六大原则中，职责单一原则建议实现接口的职责单一，而不是将所有不同功能的接口都放在一个接口中，最好是一个接口一个方法。</p>
<p>在接口中，是绝对不能有具体的实例域和具体方法或者静态方法的，这个有别于抽象类。提供实例域和方法的实现的任务应该交由实现接口的类来完成。但是，接口可以具备常量，且接口中的域会被自动设置为public static final。接口是没有构造方法的。</p>
<p>因此，我们可以把接口看成是没有实例域的抽象类。</p>
<p>和抽象类一样，接口是不能被实例化的，但是可以声明接口对象变量，去引用实现了这个接口的类的对象，这也体现了类的多态性。</p>
<h3 id="接口的其他特性"><a href="#接口的其他特性" class="headerlink" title="接口的其他特性"></a>接口的其他特性</h3><ul>
<li>静态方法</li>
</ul>
<p>Java8开始，允许在接口中增加静态方法。理论上讲，这是合乎常理的，只是这由位于将接口作为抽象规范的初衷。</p>
<ul>
<li>默认方法</li>
</ul>
<p>可以为接口方法提供一个默认的实现，但必须用default修饰符来标记。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface Comparable&lt;T&gt; &#123;</div><div class="line">    default int compareTo(T other) &#123;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然，添加这个默认的实现意义不大，因为在实现这个接口的同时，这个方法也会被重写，也就是被覆盖。意义不大，还是有些意义的，在过多类似的回调接口实现中，有些没有去实现，那就可以拿默认的来用。</p>
<h3 id="接口的默认方法冲突"><a href="#接口的默认方法冲突" class="headerlink" title="接口的默认方法冲突"></a>接口的默认方法冲突</h3><p>接口的默认方法出现冲突的情况是这样的：先是在一个接口中将一个方法定义为默认方法，然后又在超类或者另一个接口中定义了同样的方法。</p>
<p>Java为解决此问题，指定了如下规则：</p>
<ul>
<li>超类优先。如果超类提供了一个具体的方法，同名而且有相同参数类型的默认方法都会被忽略。</li>
<li>接口冲突。如果一个超接口提供了一个默认方法，另一个接口提供了一个同名而且参数类型（无论是否是默认参数）相同的方法，拿就必须覆盖这个方法来解决冲突。</li>
</ul>
<blockquote>
<p>如果两个接口都没有为共享方法提供默认的实现，实现类可以选择两者都实现，也可以选择干脆都不实现。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java随笔-接口和抽象类&quot;&gt;&lt;a href=&quot;#Java随笔-接口和抽象类&quot; class=&quot;headerlink&quot; title=&quot;Java随笔 - 接口和抽象类&quot;&gt;&lt;/a&gt;Java随笔 - 接口和抽象类&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;接口和抽象类有着相
    
    </summary>
    
    
      <category term="Java" scheme="http://linzhs.cm/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java随笔 - 对象克隆</title>
    <link href="http://linzhs.cm/2017/04/18/java-note-object-copy/"/>
    <id>http://linzhs.cm/2017/04/18/java-note-object-copy/</id>
    <published>2017-04-17T16:48:32.000Z</published>
    <updated>2017-04-17T16:48:32.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java随笔-对象克隆"><a href="#Java随笔-对象克隆" class="headerlink" title="Java随笔 - 对象克隆"></a>Java随笔 - 对象克隆</h1><blockquote>
<p>本文总结Java对象的浅复制和深复制，以及Clonable接口。</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对象在传递的时候，会进行对象复制。对象的复制，可以分为浅复制和深复制。</p>
<h2 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h2><p>在下面的例子中，可以实现对象的复制，origin和copy对象变量引用同一个内存区域，copy调用raiseSalary方法可以修改origin对象所引用的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Employee &#123;</div><div class="line">    private double salary;</div><div class="line">    </div><div class="line">    &#123;</div><div class="line">        salary = 0.0;    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public double getSalary() &#123;</div><div class="line">        return this.salary;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void raiseSalary(int t) &#123;</div><div class="line">        this.salary = salary * t;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Employee origin = new Employee();</div><div class="line">Employee copy = origin;</div><div class="line">copy.raiseSalary(10);</div></pre></td></tr></table></figure></p>
<p>在这次的复制过程中，实现的细节是：Object这个Java的万类祖先有个protect的clone方法，可以在相同类的对象上做拷贝。</p>
<p>但是，在整个复制的过程中，复制是有限制的，也就是不完全的，所以我们称之为浅复制，浅克隆，浅拷贝。Object这个超类在实现clone这个方法的时候，并不知道子孙类到底是什么，所以在复制的时候也就有了局限性，若需要复制的内容是数值或者其他基本类型，那没什么问题，直接复制即可；若是复制的内容是另一对象的引用呢？那clone复制的新内存区域仍然和原对象共享着一些信息。</p>
<p>浅复制有什么影响吗？我们来举两个例子。</p>
<ul>
<li>例子1<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Employee &#123;</div><div class="line">    private String name;</div><div class="line">    private double salary;</div><div class="line">    </div><div class="line">    &#123;</div><div class="line">        name = &quot;&quot;;</div><div class="line">        salary = 0.0;    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public double getSalary() &#123;</div><div class="line">        return this.salary;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void raiseSalary(int t) &#123;</div><div class="line">        this.salary = salary * t;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">Employee origin = new Employee();</div><div class="line">Employee copy = origin;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在例子1中，我们在Employee中新增String类型的name变量，还是像之前的那样进行拷贝操作。拷贝之后，原对象和克隆对象的name指向了同一块区域，String是不可变的，也就是指向了常量池。</p>
<p>对于不可变对象的拷贝，其实是安全的，没什么影响，拷贝与否没什么影响，因为不管拷贝与否，不可变对象都是同一块内存，并不会因为拷贝了就另外分配一块内存。所以对于不可变对象，浅复制是安全的，可以安全的共享信息。</p>
<ul>
<li>例子2<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class Employee &#123;</div><div class="line">    private String name;</div><div class="line">    private double salary;</div><div class="line">    private Date hireDay;</div><div class="line">    </div><div class="line">    &#123;</div><div class="line">        name = &quot;&quot;;</div><div class="line">        salary = 0.0;    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public double getSalary() &#123;</div><div class="line">        return this.salary;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void raiseSalary(int t) &#123;</div><div class="line">        this.salary = salary * t;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">Employee origin = new Employee();</div><div class="line">Employee copy = origin;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在新的例子中，我们新增了可变对象Date，这个时候不完全的拷贝，是有影响的。原本复制的用意是让克隆对象有单独的内存来管理自己的数据，但是由于浅复制导致原对象和克隆对象都指向了同一个可变的对象，那么任一对象进行修改，那就是灾难级别的，所以这时候我们需要深度复制。</p>
<h2 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h2><p>通常，在复制对象的时候会考虑下面三个选项：</p>
<ul>
<li>默认的clone方法是否能满足要求；</li>
<li>是否可以在可变的子对象上调用clone方法来修补默认的clone方法；</li>
<li>是不是不应该使用clone方法</li>
</ul>
<p>对于第三个选项，其实是默认的，对于前两个选项，类必须：</p>
<ul>
<li>实现Cloneable接口</li>
<li>重新定义clone方法，并制定为public访问修饰符</li>
</ul>
<p>在Object类中制定了clone方法为protect，但是在新的Java语法规则中，已经变得宽松了，可以将clone方法重写成public的方法。</p>
<p>要建立深度复制来复制对象中另一个对象，那么就要实行Cloneable接口、重写clone方法，在clone方法里来完成这些复制，如下例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class Employee implements Cloneable &#123;</div><div class="line">    private String name;</div><div class="line">    private double salary;</div><div class="line">    private Date hireDay;</div><div class="line">    </div><div class="line">    &#123;</div><div class="line">        name = &quot;&quot;;</div><div class="line">        salary = 0.0;    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public double getSalary() &#123;</div><div class="line">        return this.salary;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void raiseSalary(int t) &#123;</div><div class="line">        this.salary = salary * t;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public Employee clone() throws CloneNotSupportedException &#123;</div><div class="line">        Employee cloned = (Employee)super.clone();</div><div class="line">        cloned.hireDay = (Date)hireDay.clone();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">Employee origin = new Employee();</div><div class="line">Employee copy = origin;</div></pre></td></tr></table></figure></p>
<p>在新的clone实现里，指定了throws CloneNotSupportedException异常，其用意在于要实现Cloneable接口，否则就不支持深度拷贝，从而抛出异常。</p>
<p>在重写clone方法的时候，首先应该要调用超类的clone方法来完成浅复制，然后才去定制自己需要完成的深度复制。</p>
<blockquote>
<p>在重写clone方法的时候，我们返回的类型是Employee，而不是原本自带的Object，与super类有别，这个是Java5后的特性，为clone指定正确的返回类型，这就是协变返回类型。</p>
</blockquote>
<p>标记为Clone的类，在执行克隆方法的时候是内存二进制克隆，比new一个对象性能更好，但是直接在内存中拷贝，构造方法并不会被执行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java随笔-对象克隆&quot;&gt;&lt;a href=&quot;#Java随笔-对象克隆&quot; class=&quot;headerlink&quot; title=&quot;Java随笔 - 对象克隆&quot;&gt;&lt;/a&gt;Java随笔 - 对象克隆&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文总结Java对象的浅复制和深复
    
    </summary>
    
    
      <category term="Java" scheme="http://linzhs.cm/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android中的动画和图形绘制</title>
    <link href="http://linzhs.cm/2017/03/25/Android%E4%B8%AD%E7%9A%84Animation/"/>
    <id>http://linzhs.cm/2017/03/25/Android中的Animation/</id>
    <published>2017-03-25T06:29:28.131Z</published>
    <updated>2017-03-25T06:29:28.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android中的动画和图形绘制"><a href="#Android中的动画和图形绘制" class="headerlink" title="Android中的动画和图形绘制"></a>Android中的动画和图形绘制</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Android框架中提供了比较丰富的动画UI和2D、3D图形绘制API，包括底层的OpenGL和封装好的Animation。</p>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>Android框架提供了两种动画模式，分别是属性动画（property animation）和视图动画（view animation）。Android官方比较推荐属性动画，它比较灵活，也具备更多的功能。除此之外，还可以利用drawable动画，来加载绘制的资源，连续播放每一帧。</p>
<ul>
<li><p>属性动画(Property Animation)</p>
<p>  在Android 3.0 （即API 11）之后，Android加入了属性动画，功能很强大。属性动画允许你通过修改任意的属性值来控制动画，包括未渲染到屏幕上的。属性动画也是可拓展的，可以让你自定义动画的属性类型。</p>
</li>
</ul>
<ul>
<li><p>视图动画(View Animation)</p>
<p>  视图动画是比较老的模式了，在Android 3.0之后，集成了3.0之前的补间动画（Tween）和帧动画（Frame），只能用于浏览。视图动画比较简单，也提供了能足够的能力来满足应用程序的需求。</p>
</li>
<li><p>可绘制动画(Drawable Animation)</p>
<p>  在Android3.0之后出现了这一概念，其实功能和帧动画一毛一样。</p>
</li>
</ul>
<h2 id="2D和3D图形"><a href="#2D和3D图形" class="headerlink" title="2D和3D图形"></a>2D和3D图形</h2><p>在Android的框架里，除了提高了丰富的2D图形绘制之外，还内置了3D绘图引擎，可以根据不同的需求来设计自己的应用程序。</p>
<ul>
<li><p>Canvas和Drawanles</p>
<p>  Android提供了一组View，用于提供各种各样的用户界面的一般功能部件。我们可以扩展这些小部件来修改它们的样式和行为。此外，也可以使用包含在各种绘图方式做自定义2D渲染Canvas类或创建Drawable的事情对象，如纹理按钮或帧动画。</p>
</li>
<li><p>硬件加速</p>
<p>  Android3.0开始，可以用硬件来加速Canvas API的图形绘制，从而提升其性能。</p>
</li>
<li><p>OpenGL</p>
<p>  Android中内置了OpenGL的3D图形绘制嵌入式版本，也就是OpenGL ES，可以通过NDK和C/C++相结合开发，其具备平台独立性。对于游戏开发来说，OpenGL是很重要的。</p>
</li>
</ul>
<h2 id="视图动画（View-Animation）"><a href="#视图动画（View-Animation）" class="headerlink" title="视图动画（View Animation）"></a>视图动画（View Animation）</h2><p>作为最早出现的动画模式，视图动画集成了Android3.0之前的补间动画和帧动画，由于帧动画和Drawable动画很类似，所以在这一小节只学习Tween动画。</p>
<p>Tween主要用于显示淡入淡出（alpha）、缩放（scale）、旋转（rotate）、移动（translate）等效果，这些操作可以通过XML和Android代码的动画集（Animation Set）来实现。在XML中定义动画集，就像是在XML定义布局一样，简洁，可读性、复用性也强，</p>
<p>下面通过在XML定义动画集的例子来学习Tween动画的旋转、缩放、移动、淡入淡出效果。</p>
<p>File Location:</p>
<pre><code>/res/anim/anim_alpla.xml
/res/anim/anim_scale.xml
/res/anim/rotate_scale.xml
/res/anim/translate_scale.xml
</code></pre><p>XML和Java代码实现：</p>
<p>anim_alpha.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:shareInterpolator=&quot;false&quot;</div><div class="line">    android:fillAfter=&quot;true&quot;</div><div class="line">    android:fillBefore=&quot;true&quot; &gt;</div><div class="line">    &lt;!--</div><div class="line">        shareInterpolator 分享插值器，这里静止</div><div class="line">        fillAfter和fillBefore两者同时设置，最终只显示fillAfter的效果</div><div class="line">    --&gt;</div><div class="line"></div><div class="line">    &lt;!--</div><div class="line">        fromAlpha:Float.起始动画时的不透明度，0.0表示透明，1.0表示不透明</div><div class="line">        toAlpha:Float.结束动画时的不透明度，0.0表示透明，1.0表示不透明</div><div class="line">     --&gt;</div><div class="line">    &lt;!-- 透明度从1.0变化到0.1，且动画结束后保留最后一帧的效果 --&gt;</div><div class="line">    &lt;alpha</div><div class="line">        android:fromAlpha=&quot;1.0&quot;</div><div class="line">        android:toAlpha=&quot;0.1&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure></p>
<p>anim_scale.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line"></div><div class="line">    &lt;!--</div><div class="line">        fromXScale &amp; fromYScale : float 伸缩起始时坐标</div><div class="line">        toXScale &amp; toYScale : float 伸缩结束时坐标</div><div class="line">        pivotX &amp; pivotY : float 当对象伸缩的时候X &amp; Y坐标保持不变 这里未使用</div><div class="line">    --&gt;</div><div class="line">    &lt;!-- 从(0.1, 0.1)到(1.0, 1.0) --&gt;</div><div class="line">    &lt;scale</div><div class="line">        android:fromXScale=&quot;0.1&quot;</div><div class="line">        android:fromYScale=&quot;0.1&quot;</div><div class="line">        android:toXScale=&quot;1.0&quot;</div><div class="line">        android:toYScale=&quot;1.0&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure></p>
<p>anim_rotate.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line"></div><div class="line">    &lt;!--</div><div class="line">        fromDegrees &amp; toDegrees : float 动画开始和结束时的角度</div><div class="line">        pivotX &amp; pivotY：float or percentage 用Float（如(x,y)=(5,5)）代表中心为整个布局的左上角(5,5)，</div><div class="line">        用百分比(如(x,y)=(50%，50%))代表中心为该控件的中心，用百分比(如(x,y)=(50%p，50%p))代表中心为该控件的父控件的中心</div><div class="line">    --&gt;</div><div class="line"></div><div class="line">    &lt;rotate</div><div class="line">        android:fromDegrees=&quot;0&quot;</div><div class="line">        android:pivotX=&quot;50%&quot;</div><div class="line">        android:pivotY=&quot;50%&quot;</div><div class="line">        android:toDegrees=&quot;720&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure></p>
<p>anim_translate.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line"></div><div class="line">    &lt;!--</div><div class="line">        fromXDelta &amp; toXDelta : 位移开始和结束时x的位置。</div><div class="line">        fromYDelta &amp; toYDelta : 位移开始和结束时y的位置。</div><div class="line">    --&gt;</div><div class="line">    &lt;!-- 从（0，0）位移到（100，100）--&gt;</div><div class="line">    &lt;translate</div><div class="line">        android:fromXDelta=&quot;0&quot;</div><div class="line">        android:fromYDelta=&quot;0&quot;</div><div class="line">        android:toXDelta=&quot;100&quot;</div><div class="line">        android:toYDelta=&quot;100&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure></p>
<p>Animation.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">public void onClick(View v) &#123;</div><div class="line">        switch (v.getId()) &#123;</div><div class="line">            case R.id.button_alpha_xml:</div><div class="line">                //AnimationUtils.loadAnimation()方法返回Animation对象，所以alphaAnimation为Animation</div><div class="line">                alphaAnimation = AnimationUtils.loadAnimation(this, R.anim.anim_alpha);</div><div class="line">                alphaAnimation.setDuration(1500);//设置动画时间为1.5ms</div><div class="line">                imageView.startAnimation(alphaAnimation);//启动动画</div><div class="line">                break;</div><div class="line">            case R.id.button_alpha_code:</div><div class="line">                //AlphaAnimation(float fromAlpha,float toAlpha)</div><div class="line">                //fromAlpha:起始动画时的不透明度，0.0表示透明，1.0表示不透明</div><div class="line">                //toAlpha:结束动画时的不透明度，0.0表示透明，1.0表示不透明</div><div class="line">                //透明度从0.1——&gt;1.0</div><div class="line">                alphaAnimation = new AlphaAnimation(0.1f, 1.0f);</div><div class="line">                alphaAnimation.setDuration(1500);</div><div class="line">                imageView.startAnimation(alphaAnimation);</div><div class="line">                break;</div><div class="line">            case R.id.button_scale_xml:</div><div class="line">                scaleAnimation = AnimationUtils.loadAnimation(this, R.anim.anim_scale);</div><div class="line">                scaleAnimation.setDuration(3000);</div><div class="line">                imageView.startAnimation(scaleAnimation);</div><div class="line">                break;</div><div class="line">            case R.id.button_scale__code:</div><div class="line">                //ScaleAnimation(float fromX, float toX, float fromY, float toY)</div><div class="line">                //另外还有pivotXType、pivotYType：伸缩模式，</div><div class="line">                //pivotXValue、pivotYValue伸缩动画相对于x,y 坐标的开始位置</div><div class="line">                scaleAnimation = new ScaleAnimation(1.0f, 0.1f, 1.0f, 0.1f);</div><div class="line">                scaleAnimation.setDuration(3000);</div><div class="line">                imageView.startAnimation(scaleAnimation);</div><div class="line">                break;</div><div class="line">            case R.id.button_rotate_xml:</div><div class="line">                rotateAnimation = AnimationUtils.loadAnimation(this, R.anim.anim_rorate);</div><div class="line">                rotateAnimation.setDuration(3000);</div><div class="line">                imageView.startAnimation(rotateAnimation);</div><div class="line">                break;</div><div class="line">            case R.id.button_rotate__code:</div><div class="line">                //RotateAnimation(float fromDegrees, float toDegrees, int pivotXType, float pivotXValue,int pivotYType, float pivotYValue)</div><div class="line">                //pivotXType、pivotYType:中心点类型，主要有Animation.ABSOLUTE、Animation.RELATIVE_TO_PARENT、Animation.RELATIVE_TO_SELF</div><div class="line">                //pivotXValue、pivotYValue:根据pivotType决定旋转效果</div><div class="line">                rotateAnimation = new RotateAnimation(0, 720, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);</div><div class="line">                rotateAnimation.setDuration(3000);</div><div class="line">                rotateAnimation.setFillAfter(true);//设置动画结束时是否停留在最后一帧</div><div class="line">                imageView.startAnimation(rotateAnimation);</div><div class="line">                break;</div><div class="line">            case R.id.button_translate_xml:</div><div class="line">                translateAnimation = AnimationUtils.loadAnimation(this, R.anim.anim_translate);</div><div class="line">                translateAnimation.setFillAfter(true);</div><div class="line">                translateAnimation.setDuration(3000);</div><div class="line">                imageView.startAnimation(translateAnimation);</div><div class="line">                break;</div><div class="line">            case R.id.button_translate__code:</div><div class="line">                //TranslateAnimation(float fromXDelta, float toXDelta, float fromYDelta, float toYDelta)</div><div class="line">                translateAnimation = new TranslateAnimation(0, 100, 0, 100);</div><div class="line">                translateAnimation.setDuration(3000);</div><div class="line">                translateAnimation.setFillAfter(true);</div><div class="line">                imageView.startAnimation(translateAnimation);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>组合使用</p>
<p>xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:fillAfter=&quot;true&quot;</div><div class="line">    android:duration=&quot;3000&quot; &gt;</div><div class="line"></div><div class="line">    &lt;alpha</div><div class="line">        android:fromAlpha=&quot;1.0&quot;</div><div class="line">        android:toAlpha=&quot;0.1&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;rotate</div><div class="line">        android:fromDegrees=&quot;0&quot;</div><div class="line">        android:pivotX=&quot;50%&quot;</div><div class="line">        android:pivotY=&quot;50%&quot;</div><div class="line">        android:toDegrees=&quot;720&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;scale</div><div class="line">        android:fromXScale=&quot;0.1&quot;</div><div class="line">        android:fromYScale=&quot;0.1&quot;</div><div class="line">        android:toXScale=&quot;1.0&quot;</div><div class="line">        android:toYScale=&quot;1.0&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;translate</div><div class="line">        android:fillAfter=&quot;true&quot;</div><div class="line">        android:fromXDelta=&quot;0&quot;</div><div class="line">        android:fromYDelta=&quot;0&quot;</div><div class="line">        android:toXDelta=&quot;100&quot;</div><div class="line">        android:toYDelta=&quot;100&quot; /&gt;</div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure></p>
<p>java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public void onClick(View v) &#123;</div><div class="line">        switch (v.getId()) &#123;</div><div class="line">            //Mutiple Animation实现方法一</div><div class="line">            case R.id.btn_mutiple_anim_one:</div><div class="line">                animationSet = new AnimationSet(true);</div><div class="line">                Animation alphaAnimation = AnimationUtils.loadAnimation(getActivity(), R.anim.anim_alpha);</div><div class="line">                Animation scaleAnimation = AnimationUtils.loadAnimation(getActivity(), R.anim.anim_scale);</div><div class="line">                Animation rotateAnimation = AnimationUtils.loadAnimation(getActivity(), R.anim.anim_rotate);</div><div class="line">                Animation translateAnimation = AnimationUtils.loadAnimation(getActivity(), R.anim.anim_translate);</div><div class="line">                animationSet.addAnimation(alphaAnimation);</div><div class="line">                animationSet.addAnimation(scaleAnimation);</div><div class="line">                animationSet.addAnimation(rotateAnimation);</div><div class="line">                animationSet.addAnimation(translateAnimation);</div><div class="line">                imageView.startAnimation(animationSet);</div><div class="line">                break;</div><div class="line">            //Mutiple Animation实现方法二</div><div class="line">            case R.id.btn_mutiple_anim_two:</div><div class="line">                Animation mutipleAnimation = AnimationUtils.loadAnimation(getActivity(), R.anim.anim_mutiple);</div><div class="line">                imageView.startAnimation(mutipleAnimation);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="帧动画"><a href="#帧动画" class="headerlink" title="帧动画"></a>帧动画</h2><p>帧动画，包括Frame Animation和Drawable Animation，可以通过连续加载资源实现连续动画，类似于GIF等，就像在放电影。和Tween Animation一样，帧动画也可在XML和Java代码中实现。</p>
<p>下面为简单的例子，预先在res/drawable目录放一些图片，然后在该目录下创建文件连续动画文件：<br>/res/drawable/fruit_animlist.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:oneshot=&quot;true&quot;&gt;</div><div class="line"></div><div class="line">    &lt;item android:drawable=&quot;@drawable/apple_pic&quot; android:duration=&quot;200&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/banana_pic&quot; android:duration=&quot;200&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/cherry_pic&quot; android:duration=&quot;200&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/grape_pic&quot; android:duration=&quot;200&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/mango_pic&quot; android:duration=&quot;200&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/orange_pic&quot; android:duration=&quot;200&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/pineapple_pic&quot; android:duration=&quot;200&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/animation-list&gt;</div></pre></td></tr></table></figure></p>
<p>java code<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public void onClick(View v) &#123;</div><div class="line">    switch (v.getId()) &#123;</div><div class="line">        case R.id.button_anim_list_xml:</div><div class="line">                imageView.setImageResource(R.drawable.fruit_animlist);//设置动画集</div><div class="line">                AnimationDrawable animationDrawable = (AnimationDrawable)imageView.getDrawable();</div><div class="line">                animationDrawable.start();</div><div class="line">                break;</div><div class="line">        case R.id.button_anim_list_code:</div><div class="line">            AnimationDrawable anim = new AnimationDrawable();</div><div class="line">            for (int i = 1; i &lt; 10; ++i) &#123;</div><div class="line">                int id = getResources().getIdentifier(&quot;fruit_&quot; + i, &quot;drawable&quot;, getPackageName());</div><div class="line">                Drawable drawable = getResources().getDrawable(id);</div><div class="line">                anim.addFrame(drawable, 200);</div><div class="line">            &#125;</div><div class="line">            anim.setOneShot(false);</div><div class="line">            imageView.setImageDrawable(anim);</div><div class="line">            anim.start();</div><div class="line">            //anim.stop() anim.isRunning()</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            break;    </div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在较大型的帧动画显示中，会出现卡顿的情况，这是View和OOM的原因，可以使用双缓冲的surfaceView来实现。</p>
<h2 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h2><p>属性动画是Android3.0后引入的，是一个强大的框架，可以让你绘制几乎任何东西。无论有没有显示在屏幕上，属性动画可以随着时间去修改属性的值来控制动画。</p>
<p>属性动画相关类：</p>
<table>
<thead>
<tr>
<th>类名</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>ValueAnimation</td>
<td>属性动画主要的计时器，也计算动画后的属性的值，动画的执行类</td>
</tr>
<tr>
<td>ObjectAnimator</td>
<td>ValueAnimator的一个子类，允许你设置一个目标对象和对象的属性进行动画，动画的执行类</td>
</tr>
<tr>
<td>AnimatorSet</td>
<td>提供组织动画的结构，使它们能相关联得运行，用于控制一组动画的执行</td>
</tr>
<tr>
<td>AnimatorInflater</td>
<td>用户加载属性动画的xml文件</td>
</tr>
<tr>
<td>Evaluators</td>
<td>属性动画计算器，告诉了属性动画系统如何计算给出属性的值</td>
</tr>
<tr>
<td>Interpolators</td>
<td>动画插入器，定义动画的变化率</td>
</tr>
</tbody>
</table>
<p>类之间的关系：<br><img src="http://images2015.cnblogs.com/blog/950883/201608/950883-20160820155327312-1227516581.png" alt="iamge"></p>
<p>接下来用几个例子来学习一下怎么使用属性动画，注意，==xml文件必须放在/res/animator中==。</p>
<ul>
<li>ObjectAnimation（用属性动画实现视图动画的淡入淡出效果，缩放、移动、旋转等类似）</li>
</ul>
<p>alpha_anim.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;objectAnimator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:duration=&quot;500&quot;</div><div class="line">    android:propertyName=&quot;alpha&quot;</div><div class="line">    android:repeatCount=&quot;1&quot;</div><div class="line">    android:repeatMode=&quot;reverse&quot;</div><div class="line">    android:startOffset=&quot;200&quot;</div><div class="line">    android:valueFrom=&quot;0.0&quot;</div><div class="line">    android:valueTo=&quot;1.0&quot;</div><div class="line">    android:valueType=&quot;floatType&quot;&gt;</div><div class="line"></div><div class="line">    &lt;!--</div><div class="line">        duration 表示动画执行的时间</div><div class="line">        propertyName 表示修改的物件的哪个属性值，这里是透明度</div><div class="line">        valueFrom 表示从哪个状态值开始动画</div><div class="line">        valueTo 表示到哪个状态值结束动画</div><div class="line">        valueType 类型估值，主要用于设置动画操作属性的值</div><div class="line">        repeatCount 动画重复的计数，动画将会执行该值+1次</div><div class="line">        repeatMode 动画重复的模式，reverse为反向，当第偶次执行时，动画方向会相反。restart为重新执行，方向不变</div><div class="line">        startOffset， 动画多次执行的间隔时间，如果只执行一次，执行前会暂停这段时间，单位毫秒</div><div class="line">        interpolator 指定动画插入器</div><div class="line">    --&gt;</div><div class="line"></div><div class="line">&lt;/objectAnimator&gt;</div></pre></td></tr></table></figure></p>
<p>对应Java code<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//ImageView预先设置好图片</div><div class="line">//xml实现</div><div class="line"></div><div class="line">//ofFloat()，ofInt()，ofObject()，ofArgb()，ofPropertyValuesHolder()这几个方法</div><div class="line">//都是设置动画作用的元素、作用的属性、动画开始、结束、以及中间的任意个属性值</div><div class="line">//ofFloat(Object target, String propertyName, float... values)</div><div class="line">Animator anim = AnimatorInflater.loadAnimator(this, R.animator.property_animation);</div><div class="line">anim.setTarget(imageView);</div><div class="line">anim.start();</div><div class="line"></div><div class="line">//java code</div><div class="line">ObjectAnimator alphaAnimation = ObjectAnimator.ofFloat(imageView, &quot;alpha&quot;, 0f, 1f);</div><div class="line">alphaAnimation.setDuration(500);</div><div class="line">alphaAnimation.setRepeatCount(0);</div><div class="line">alphaAnimation.setRepeatMode(ValueAnimator.REVERSE);</div><div class="line">alphaAnimation.setStartDelay(200);</div><div class="line">alphaAnimation.setInterpolator(new AccelerateDecelerateInterpolator());</div><div class="line">alphaAnimation.start();</div></pre></td></tr></table></figure></p>
<p>scale_anim.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;objectAnimator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">　　android:duration=&quot;500&quot;</div><div class="line">　　android:propertyName=&quot;scaleX&quot;</div><div class="line">　　android:repeatCount=&quot;1&quot;</div><div class="line">　　android:repeatMode=&quot;reverse&quot;</div><div class="line">　　android:valueFrom=&quot;1.0&quot;</div><div class="line">　　android:valueTo=&quot;1.5&quot;</div><div class="line">　　android:valueType=&quot;floatType&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>java code<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator scaleXAnimator = ObjectAnimator.ofFloat(imageView, &quot;scaleX&quot;, 1f, 1.5f);</div><div class="line">   scaleXAnimator.setDuration(500);</div><div class="line">   scaleXAnimator.setRepeatCount(1);</div><div class="line">   scaleXAnimator.setRepeatMode(ValueAnimator.REVERSE);</div><div class="line">   scaleXAnimator.start();</div></pre></td></tr></table></figure></p>
<p>rotate_anim.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;objectAnimator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:duration=&quot;500&quot;</div><div class="line">    android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;</div><div class="line">    android:propertyName=&quot;rotation&quot;</div><div class="line">    android:repeatCount=&quot;1&quot;</div><div class="line">    android:repeatMode=&quot;reverse&quot;</div><div class="line">    android:valueFrom=&quot;0&quot;</div><div class="line">    android:valueTo=&quot;360&quot;</div><div class="line">    android:valueType=&quot;floatType&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>java code<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(imageView, &quot;rotation&quot;, 0f, 360f);</div><div class="line">    objectAnimator.setDuration(500);</div><div class="line">    objectAnimator.setRepeatCount(1);</div><div class="line">    objectAnimator.setRepeatMode(ValueAnimator.REVERSE);</div><div class="line">    objectAnimator.start();</div></pre></td></tr></table></figure></p>
<p>translate_anim.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;objectAnimator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:duration=&quot;500&quot;</div><div class="line">    android:propertyName=&quot;translationX&quot;</div><div class="line">    android:repeatCount=&quot;1&quot;</div><div class="line">    android:repeatMode=&quot;reverse&quot;</div><div class="line">    android:valueFrom=&quot;0&quot;</div><div class="line">    android:valueTo=&quot;100&quot;</div><div class="line">    android:valueType=&quot;floatType&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>java code<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(imageView, &quot;translationX&quot;, 0f, 100f);</div><div class="line">    objectAnimator.setDuration(500);</div><div class="line">    objectAnimator.setRepeatCount(1);</div><div class="line">    objectAnimator.setRepeatMode(ValueAnimator.REVERSE);</div><div class="line">    objectAnimator.start();</div></pre></td></tr></table></figure></p>
<ul>
<li>Animation（组合动画）</li>
</ul>
<p>anim_set.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:ordering=&quot;together&quot;&gt;</div><div class="line">    &lt;objectAnimator</div><div class="line">        android:duration=&quot;500&quot;</div><div class="line">        android:propertyName=&quot;scaleX&quot;</div><div class="line">        android:repeatCount=&quot;1&quot;</div><div class="line">        android:repeatMode=&quot;reverse&quot;</div><div class="line">        android:valueFrom=&quot;1.0&quot;</div><div class="line">        android:valueTo=&quot;1.5&quot;</div><div class="line">        android:valueType=&quot;floatType&quot; /&gt;</div><div class="line">    &lt;objectAnimator</div><div class="line">        android:duration=&quot;500&quot;</div><div class="line">        android:propertyName=&quot;scaleY&quot;</div><div class="line">        android:repeatCount=&quot;1&quot;</div><div class="line">        android:repeatMode=&quot;reverse&quot;</div><div class="line">        android:valueFrom=&quot;1.0&quot;</div><div class="line">        android:valueTo=&quot;1.5&quot;</div><div class="line">        android:valueType=&quot;floatType&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure></p>
<p>java code<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//加载动画</div><div class="line">Animator anim = AnimatorInflater.loadAnimator(this, R.animator.animator_scale);</div><div class="line">      anim.setTarget(imageView);</div><div class="line">      anim.start();</div><div class="line">      </div><div class="line">//纯代码实现</div><div class="line">AnimatorSet animatorSet = new AnimatorSet();</div><div class="line"></div><div class="line">    ObjectAnimator scaleXAnimator = ObjectAnimator.ofFloat(imageView, &quot;scaleX&quot;, 1f, 1.5f);</div><div class="line">    scaleXAnimator.setDuration(500);</div><div class="line">    scaleXAnimator.setRepeatCount(1);</div><div class="line">    scaleXAnimator.setRepeatMode(ValueAnimator.REVERSE);</div><div class="line">    scaleXAnimator.start();</div><div class="line"></div><div class="line">    ObjectAnimator scaleYAnimator = ObjectAnimator.ofFloat(imageView, &quot;scaleY&quot;, 1f, 1.5f);</div><div class="line">    scaleYAnimator.setDuration(500);</div><div class="line">    scaleYAnimator.setRepeatCount(1);</div><div class="line">    scaleYAnimator.setRepeatMode(ValueAnimator.REVERSE);</div><div class="line"></div><div class="line">    animatorSet.playTogether(scaleXAnimator, scaleYAnimator);</div><div class="line">    animatorSet.start();</div></pre></td></tr></table></figure></p>
<h2 id="视图动画和属性动画的区别"><a href="#视图动画和属性动画的区别" class="headerlink" title="视图动画和属性动画的区别"></a>视图动画和属性动画的区别</h2><p>在视图动画中，止提供了唯一的View动画对象，如果要完成非View对象，那就玩自己去完成这部分带吗。在View视图中，其仅仅提供了一些功能，比如旋转、缩放等，但没有实现背景颜色这些，是有一定的局限性的。</p>
<p>视图动画只是修改了被画的东西，而不是自己本身。</p>
<p>属性动画把这些限制的缺点都去除了，使动画更加健壮，动画更加丰富。</p>
<p>视图动画的实现只需要少量的代码和时间，所以如果是小型的动画，可以用视图动画来完成。Android还保留着view动画，也是有它的用处。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android中的动画和图形绘制&quot;&gt;&lt;a href=&quot;#Android中的动画和图形绘制&quot; class=&quot;headerlink&quot; title=&quot;Android中的动画和图形绘制&quot;&gt;&lt;/a&gt;Android中的动画和图形绘制&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a hr
    
    </summary>
    
    
      <category term="DataStructure&amp;Algorithm" scheme="http://linzhs.cm/tags/DataStructure-Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法理论学习 -- 队列</title>
    <link href="http://linzhs.cm/2017/03/25/queue/"/>
    <id>http://linzhs.cm/2017/03/25/queue/</id>
    <published>2017-03-25T06:26:51.208Z</published>
    <updated>2017-03-25T06:26:51.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>队列(Queue)是一种先进先出(FIFO)的数据结构，编程中可通过使用数组或者链表来实现。</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><pre><code>enqueue        入队，向队列尾部添加一个元素
dequeue        出队，在队列头部移除一个元素
isEmpty        检查队列是否为空
size        查看队列大小
</code></pre><h3 id="Coding时刻"><a href="#Coding时刻" class="headerlink" title="Coding时刻"></a>Coding时刻</h3><ul>
<li><p>使用链表实现队列</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public class Queue&lt;T&gt; &#123;</div><div class="line"></div><div class="line">    private Node first;//指向队列中最早添加的结点</div><div class="line">    private Node last;//指向队列中最近添加的结点</div><div class="line">    private int N;</div><div class="line">    private class Node &#123;//结点类，只在内部使用</div><div class="line">        T item;</div><div class="line">        Node next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean isEmpty() &#123;</div><div class="line">        return first == null;</div><div class="line">        //return N == 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int size() &#123;</div><div class="line">        return N;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void enqueue(T item) &#123;</div><div class="line">        Node oldlast = last;</div><div class="line">        last = new Node();</div><div class="line">        last.item = item;</div><div class="line">        last.next = null;</div><div class="line">        if (isEmpty() == true) first = last;</div><div class="line">        else oldlast.next = last;</div><div class="line">        N++; </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Item dequeue() &#123;</div><div class="line">        Item item = first.item;</div><div class="line">        first = first.next;</div><div class="line">        if (isEmpty()) last = null;</div><div class="line">        N--;</div><div class="line">        return item;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实现两个栈实现队列</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Solution&lt;T&gt; &#123;</div><div class="line"></div><div class="line">    private static Stack&lt;T&gt; stack1 = new Stack&lt;&gt;();//入队</div><div class="line">    private static Stack&lt;T&gt; stack2 = new Stack&lt;&gt;();//出队</div><div class="line"></div><div class="line">    public void enqueue(T element) &#123;</div><div class="line">        stack1.push(element);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public T dequeue() &#123;</div><div class="line">        if (stack2.isEmpty() == true) &#123;//出队，将stack1中的元素弹出，并且在stack2中入栈</div><div class="line">            while (stack1.isEmpty() == false) &#123;</div><div class="line">                T data = stack1.pop();</div><div class="line">                stack2.push(data);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (stack2.isEmpty() == true) &#123;</div><div class="line">            throw new Exception(&quot;queue is empty.&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return stack2.pop();        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="常见应用"><a href="#常见应用" class="headerlink" title="常见应用"></a>常见应用</h3><p>普通队列在现实计算机当中应用非常广泛，比如播放器的播放列表，数据流对象，异步数据传输结构(文件IO，管道通信，套接字等)，<br>多线程中的阻塞队列，打印机队列，消息队列等等。</p>
<h2 id="队列的常见衍生版本"><a href="#队列的常见衍生版本" class="headerlink" title="队列的常见衍生版本"></a>队列的常见衍生版本</h2><h3 id="1-循环队列"><a href="#1-循环队列" class="headerlink" title="1.循环队列"></a>1.循环队列</h3><p>在普通队列的基础上，将队列的头部和尾部相连接，就构成了循环队列这种数据结构。循环队列可以充分利用结构的空间，克服<br>队列的“假溢出”这种现象。循环队列可以通过数据和链表来实现。<br>    循环队列的一些基本的判断条件和性质：</p>
<pre><code>初始化条件为：队头指针是front，队尾是rear，队列的最大长度为QueueSize
1.队列为空                      rear == front
2.队列满                        (rear + 1) % QueueSize == front
3.队列的长度                    n = (rear - front + 1) % QueueSize
4.入队后rear指向                (rear + 1) % QueueSize
5.出队后front指向               (front + 1) % QueueSize
</code></pre><h3 id="2-双端队列"><a href="#2-双端队列" class="headerlink" title="2.双端队列"></a>2.双端队列</h3><p>双端队列是一种同时具有队列和栈的性质的一种数据结构，在队列的两头都可以进行插入和删除的操作，同时也可以对双端<br>队列做一些限制。</p>
<pre><code>输入受限的双端队列是指只能从队列一端输入，但可以从两端输出的双端队列；
输出受限的双端队列是指只能从队列一端输出，但可以从两端输入的双端队列；
如果双端队列允许从一端输入，从一端输出，则是普通的队列，如果双端队列只允许从一端输入和输出则是栈，
因此说双端队列同时具有队列和栈两种数据结构的性质。
</code></pre><h3 id="3-优先队列-堆-Heap"><a href="#3-优先队列-堆-Heap" class="headerlink" title="3.优先队列(堆, Heap)"></a>3.优先队列(堆, Heap)</h3><p>堆也是队列，但强调的是“<a href="">优先</a>”二字，每个在队列中取出的元素都具备最高优先权，若是最大堆，则每次取出必定是当前堆中<br>最大的元素，同理，若是最小堆而取出元素为最小。<br>堆有着广泛的应用，比如抢占式优先级的系统等。<br>堆还有着各种衍生结构，这里就不在详细说明，有关堆的知识，将专门开一篇文章来了解。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文所述的队列知识比较简单，队列在数据结构中确实算是比较简单的，但是应用却是非常广泛。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;队列-Queue&quot;&gt;&lt;a href=&quot;#队列-Queue&quot; class=&quot;headerlink&quot; title=&quot;队列(Queue)&quot;&gt;&lt;/a&gt;队列(Queue)&lt;/h2&gt;&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="DataStructure&amp;Algorithm" scheme="http://linzhs.cm/tags/DataStructure-Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法理论学习 -- 栈</title>
    <link href="http://linzhs.cm/2017/03/25/stack/"/>
    <id>http://linzhs.cm/2017/03/25/stack/</id>
    <published>2017-03-25T06:25:40.600Z</published>
    <updated>2017-03-25T06:25:40.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈 (Stack)"></a>栈 (Stack)</h1><h2 id="1-栈的概念"><a href="#1-栈的概念" class="headerlink" title="1. 栈的概念"></a>1. 栈的概念</h2><p>栈是一种先进后出(First in last off, FILO/LIFO)线性数据结构。很多人叫栈为堆栈，但是堆和栈是不同的数据结构。</p>
<h2 id="2-栈的实现"><a href="#2-栈的实现" class="headerlink" title="2. 栈的实现"></a>2. 栈的实现</h2><p>栈可以用数组和链表来实现。栈的基本操作有入栈、出栈、查看栈顶、判空等。</p>
<h2 id="3-栈的常见应用"><a href="#3-栈的常见应用" class="headerlink" title="3. 栈的常见应用"></a>3. 栈的常见应用</h2><p>栈的应用很广泛，比如编译器中的词法分析器、Java虚拟机、软件中的撤销操作、<br>浏览器中的回退操作、编译器中的函数调用实现、表达式的计算等。<a href="http://www.cnblogs.com/yangecnu/p/Introduction-Stack-and-Queue.html" target="_blank" rel="external">相关介绍深度好文推荐。</a></p>
<h3 id="3-1-线程栈"><a href="#3-1-线程栈" class="headerlink" title="3.1 线程栈"></a>3.1 线程栈</h3><p>线程栈是操作系统分配的一块内存区域。通常CPU上有一个特殊的称之为堆指针的寄存器。</p>
<h3 id="3-2-Object-C和OpenGL中的“绘图上下文”"><a href="#3-2-Object-C和OpenGL中的“绘图上下文”" class="headerlink" title="3.2 Object-C和OpenGL中的“绘图上下文”"></a>3.2 Object-C和OpenGL中的“绘图上下文”</h3><h3 id="3-3-用户按下键盘过滤无效按键"><a href="#3-3-用户按下键盘过滤无效按键" class="headerlink" title="3.3 用户按下键盘过滤无效按键"></a>3.3 用户按下键盘过滤无效按键</h3><h3 id="3-4-算术表达式的计算-此文重点"><a href="#3-4-算术表达式的计算-此文重点" class="headerlink" title="3.4 算术表达式的计算(此文重点)"></a>3.4 算术表达式的计算(<a href="">此文重点</a>)</h3><h2 id="编程中算术表达式计算"><a href="#编程中算术表达式计算" class="headerlink" title="编程中算术表达式计算"></a>编程中算术表达式计算</h2><p>在此主要介绍栈在编程语言中的一大用处。<br>编程语言中，算术表达式有前缀、中缀、后缀之分，他们都是对算术表达式的编程语言表达、记忆方式。</p>
<h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><pre><code>前缀表达式: - * + 3 4 5 6
中缀表达式: (3 + 4) * 5 - 6
后缀表达式: 3 4 + 5 * 6 -
</code></pre><p>如上面例子所示，前中后缀表达式各不相同，其中很容易发现，中缀表达式是人在数学中所常用，且习惯的一种。<br>算术表达式中，主要由算术运算符和操作数组成，前中后缀表达式也是由此来区分的，也导致了表示的顺序不一样。</p>
<h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><pre><code>前缀表达式：算术运算符在前，操作数在后，不包含括号; 为纪念波兰数学家、此表达式发明者Jan Lukasiewicz，此表达式也成为&quot;波兰表达式&quot;；
中缀表达式：算术运算符在操作数中间，相比前后缀表达式，多了表示优先级的括号；
后缀表达式：算术运算符在后，操作数在前，正好与前缀相反，所以也成为&quot;逆波兰表达式&quot;。
</code></pre><h4 id="传统算术表达式的运算规则"><a href="#传统算术表达式的运算规则" class="headerlink" title="传统算术表达式的运算规则"></a>传统算术表达式的运算规则</h4><p>中缀表达式是人类最容易理解的和分析的表达方式，回忆我们对中缀表达式的运算规则：</p>
<pre><code>1.在有括号的情况下，括号优先级最高，优先计算括号内的内容；
2.在无括号的情况下，按运算符优先级进行先后计算，先乘除，后加减；
3.在相同优先级的情况下，从左到右计算。
</code></pre><h4 id="各表达式的优缺点"><a href="#各表达式的优缺点" class="headerlink" title="各表达式的优缺点"></a>各表达式的优缺点</h4><ul>
<li><p>在中缀表达式的计算当中，需要不断遍历找出表达式中的括号和优先级较高的运算符，并且考虑操作出现的先后，这对于<br>人来说是简而易举的，但是对于计算机这种一根筋，只能处理0和1的机器来说，显然太复杂了，就算是实现了，时间复杂度<br>也是很恐怖的，毕竟运算符和操作数不可能总是只有几个，这时候出现的前缀和后缀表达式就很有用处了，也是专门为计算机<br>设计的。</p>
</li>
<li><p>在前缀和后缀表达式中，计算顺序不必随着运算符和括号不断变换，而是从左到右或是从右到左顺序遍历一次，不需要考虑<br>括号对运算的影响，再辅之的数据结构(Stack)，可完美完成计算，大大降低了计算的时间复杂度，也符合计算机的工作方式。<br>前缀和后缀表达式大大提高了计算机计算的性能，但对于人来说是不易理解的，特别是对于没有编程基础的人来说，所以在<br>输入和输出表达式给计算机计算的时候需要进行表达式转换，中缀(输入) -&gt; 前缀/后缀(计算) -&gt; 结果(输出)。</p>
</li>
</ul>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>1.中缀表达式 -&gt; 后缀表达式 [ 例子：a + b * c - (d + e) ]</p>
<pre><code>人工转换：
    1.给中缀表达式的所有运算加上括号    ( (a + (b * c)) - (d + e) )
    2.将运算符放到括号后面        ( (a (b c)*)+ (de)+ )-
    3.去除括号            a b c * + d e + -

计算机转换(用栈辅助)：
    1.建立运算符栈(大小合适，这里只存储运算符)；
    2.从左到右遍历中缀表达式：
        如果遇到操作数，则直接输出；
        如果遇到运算符，则与栈顶的运算符比较优先级：
            若栈为空，或者栈顶的运算符的优先级低于当前的运算符，则将当前的运算符入栈；
            若栈顶运算符的优先级不低于(高于或相同)当前的运算符，则将栈顶的运算符输出，直到出现上一种情况为止(即为：栈为
            空，或者栈顶的运算符的优先级低于当前的运算符)。
        如果遇到括号：
            若为 &quot;(&quot; ，则直接入栈；
            若为 &quot;)&quot; ，记录，弹出所有运算符，直到在栈中找到&quot;(&quot;，才同时把 &quot;()&quot; 删除。
</code></pre><p>计算机转换模拟 [ 例子：a + b * c - (d + e) ]</p>
<pre><code>输出终端                    运算符栈(栈底 -&gt; 栈顶)
a            |    
a            |    +
ab            |    +
ab            |    +*
abc            |    +*
abc*                |    +
abc*+                |    
abc*+                |    -
abc*+                |    -(
abc*+                |    -(+
abc*+d                |    -(+
abc*+de                |    -(+
abc*+de+            |    -(
abc*+de+            |    -
abc*+de+-            |
</code></pre><p>2.中缀表达式 -&gt; 前缀表达式 [ 例子：a + b * c - (d + e) ]</p>
<pre><code>人工转换：
    1.给中缀表达式的所有运算加上括号    ( (a + (b * c)) - (d + e) )
    2.将运算符放到括a号前面        ( -(+(a *(bc)) +(de) )
    3.去除括号                - + a * b c + d e

计算机转换(用栈辅助):
    1.建立运算符栈和输出栈(大小合适)，其中输出栈用于存储输出数据，完成遍历后出栈的元素顺序即为前缀表达式；
    2.从右向左遍历中缀表达式:
        如果遇到操作数，则直接输出;
        如果遇到运算符，则与栈顶的运算符比较优先级：
            若栈为空，或者栈顶的运算符的优先级低于当前的运算符，则将当前的运算符入栈；
            若栈顶运算符的优先级不低于(高于或相同)当前的运算符，则将栈顶的运算符输出，直到出现上一种情况为止(即为：栈为
            空，或者栈顶的运算符的优先级低于当前的运算符)。
        如果遇到括号：
            若为 &quot;)&quot; ，则直接入栈；
            若为 &quot;(&quot; ，记录，弹出所有运算符，直到在栈中找到&quot;)&quot;，才同时把 &quot;()&quot; 删除。
</code></pre><p>计算机转换模拟 [ 例子：a + b * c - (d + e) ]</p>
<pre><code>输出栈(栈底 -&gt; 栈顶)        运算符栈(栈底 -&gt; 栈顶)
            |    )
e            |    
e            |    )+
ed+            |    
ed+            |    -
ed+c                |    -    
ed+c                |    -*
ed+cb            |    -
ed+cb*            |    -
ed+cb*            |    -+
ed+cb*a            |    -+
ed+cb*a+        |    -
ed+cb*a+-        |    

所以，输出的前缀表达式为-+a*bc+de。
</code></pre><p>3.构建表达式树</p>
<pre><code>下面将表达式和二叉树的知识结合，将后缀表达式转换为二叉树 [ 例子: a b c * + d e + - ]
    1.建立栈，大小为操作数个数，这里为5；
    2.将操作数从左到右入栈，若遇到操作符，则将前面两个元素弹出，并用当前栈顶指向形成的二叉树的根节点；
    3.最终合并二叉树。
演示：
    1. a b c
    2. a         |
            |
           / \
          b   c
    3.                    +
                /   \
                a    *
                    / \
                   b   c
    4.                                  +                d e
                            /   \
                            a        *
                                / \
                               b   c
    5.                                                +            +
                                        /   \           / \
                                        a        *        d   e
                                            / \
                                           b   c
    6.                                                            -
                                                        /    \
                                                       /      \        
                                                      /        \
                                                      +        +
                                                    /   \       / \     
                                                    a    *    d   e    
                                                        / \           
                                                       b   c       
</code></pre><h2 id="Coding时刻"><a href="#Coding时刻" class="headerlink" title="Coding时刻"></a>Coding时刻</h2><ul>
<li>栈的数组实现</li>
</ul>
<p>接下来来实现栈，这里先使用Java级数组来实现，下面再使用链表来搭建栈结构及其相关操作。</p>
<p>下面为要实现的操作方法API：</p>
<blockquote>
<p>Stack<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class Stack&lt;T&gt; &#123;</div><div class="line">    public Stack();</div><div class="line">    public void push(T item);</div><div class="line">    public boolean isEmpty();</div><div class="line">    public int size();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>在写出最终的实现代码之前，我们必须考虑应用数组或者其他形式来实现栈这种数据结构怎么样才能让其功能和性能最优。下面为重点考虑的几点：</p>
<blockquote>
<ol>
<li><p>支持泛型。原因要使栈所支持的数据类型更加广泛通用，而不是需要String的时候写一遍栈的实现，再需要Integer类型的时候又重新写一遍针对Integer的实现。</p>
</li>
<li><p>支持数组大小自动调节。对于数组来说，没法动态调节大小是一大缺点，随机查找是它的优势，若存入有效的元素过多导致数组容纳不下，或者存入有效元素很少（有可能为空）且数组大小较大，这些情况在实际应用当中都是非常不合理的，所以我们需要实现数组大小的动态调节。这里采用流行的调节方法，在数组容纳不下的时候将大小调节为原先的2倍，若数组的有效元素为数组的大小的1/4时将大小调节为原先的1/2。</p>
</li>
<li><p>避免对象游离现象。Java的垃圾回收策略是回收所有无法被访问的对象的内存。在我们实现的栈当前，每一个pop弹出栈顶元素，栈顶指针向栈底移动一位（栈元素足够），但是实际这个被弹出的元素还存留在数组当前，也就是相应的占用这部分内存，GC无法回收。避免对象游离的办法其实很简单，在每次pop的时候将弹出的元素空间置为空。</p>
</li>
<li><p>支持迭代。支持foreach迭代，可以使代码更加整洁。迭代器接口还需要实现remove方法，这个在实现的时候可以不处理，也可以抛出UnsupportedOperationException异常，在实现next方法时候栈为空，则可不处理或者抛出NoSuchElementException。</p>
</li>
</ol>
</blockquote>
<p>解决完以上考虑的问题，即可构建出一个不错的栈结构，具体代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">import java.util.Iterator;//Java迭代器接口所属包</div><div class="line"></div><div class="line">public class Stack&lt;T&gt; implements Iterable&lt;T&gt; &#123;</div><div class="line">    private T[] arr;</div><div class="line">    private int len;</div><div class="line"></div><div class="line">    public Stack() &#123;//默认构造器</div><div class="line">        arr = (T)new Object[1];//Java中不支持泛型对象数组 这里采用强制类型转换办法</div><div class="line">        len = 0;//默认元素数量</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void push(T item) &#123;//入栈</div><div class="line">        if (arr.len == len) </div><div class="line">            resize(2 * arr.length);</div><div class="line">        arr[len++] = item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public T pop() &#123;//出栈</div><div class="line">        T t = arr[--len];</div><div class="line">        arr[len] = null;//避免对象游离</div><div class="line">        if (len &gt; 0 &amp;&amp; len == arr.length / 4)</div><div class="line">            resize(arr.length / 2);</div><div class="line">        return t;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean isEmpty() &#123;//检查栈是否为空</div><div class="line">        return len == 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int size() &#123;//查看栈大小</div><div class="line">        return len;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void resize(int max) &#123;//重新分配数组大小</div><div class="line">        T[] t = (T[])new Object[max];</div><div class="line">        for (int i = 0; i &lt; len; i++) &#123;</div><div class="line">            t[i] = arr[i];</div><div class="line">        &#125;</div><div class="line">        arr = t;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Iterator&lt;T&gt; iterator() &#123;</div><div class="line">        return new ReverseArrayIterator();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class ReverseArrayIterator implements Iterator&lt;T&gt; &#123;//内部类，实现迭代器接口</div><div class="line">        //支持先进后出迭代</div><div class="line">        private int i = len;</div><div class="line">        public boolean hasNext() &#123; return i &gt; 0; &#125;</div><div class="line">        public T next() &#123; return arr[--i]; &#125;</div><div class="line">        public void remove &#123; &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>栈的链表实现</li>
</ul>
<p>相比数组来实现栈，链表的优势在于可以很方便的插入删除元素，长度也不会受限，但是它的缺点是随机访问的能力变差了很多，所示访问的结点在末尾，那就等于每次都要遍历一次链表，效率是比较低的。这里在pop出元素的时候，Java程序员无需关心结点成为孤儿后会不会导致内存占用，GC会帮你完成收尾工作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public class Stack&lt;T&gt; &#123;</div><div class="line">    </div><div class="line">    private Node first;</div><div class="line">    private int N;</div><div class="line">    </div><div class="line">    private class Node &#123;</div><div class="line">        public T item;</div><div class="line">        public Node next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public  Stack() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean isEmpty() &#123;</div><div class="line">        return first == null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int size() &#123;</div><div class="line">        return N;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void push(T item) &#123;</div><div class="line">        Node oldfirst = first;</div><div class="line">        first = new Node();</div><div class="line">        first.item = item;</div><div class="line">        first.next = oldfirst;</div><div class="line">        N++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Item pop() &#123;</div><div class="line">        T item = first.item;</div><div class="line">        first = first.next;</div><div class="line">        N--;</div><div class="line">        return item;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>Dijkstra算法 - 双栈算法表达式求值</li>
</ul>
<p>使用两个栈来实现中缀表达式的求值，这里考虑的是理想情况，将所有运算都加上括号，输入为字符串的形式，实现加减乘除开方操作。基本的思路：</p>
<blockquote>
<ol>
<li><p>将操作数压入操作数栈</p>
</li>
<li><p>将操作符压入操作符栈</p>
</li>
<li><p>忽略左括号</p>
</li>
<li><p>遇到右括号时，弹出一个运算符，弹出运算所需的操作数，并将运算完的结果压入操作数栈</p>
</li>
</ol>
</blockquote>
<p>具体代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class DijkstraTwoStack &#123;</div><div class="line">    </div><div class="line">    private Stack&lt;Character&gt; ops = new Stack&lt;&gt;();</div><div class="line">    private Stack&lt;Double&gt; vals = new Stack&lt;&gt;();</div><div class="line"></div><div class="line">    public DijkstraTwoStack &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static int cal(String expr) &#123;</div><div class="line">        if (expr == null || expr.length &lt;= 1) return 0;</div><div class="line">        for (char c : expr) &#123;</div><div class="line">            if (c.equals(&apos;(&apos;)) ;</div><div class="line">            else if (c.equals(&apos;+&apos;) || c.equals(&apos;-&apos;) || c.equals(&apos;*&apos;) || c.equals(&apos;/&apos;) || c.equals(&apos;s&apos;))//用s表示开方 </div><div class="line">                ops.push(c);</div><div class="line">            else if (c.equals(&apos;)&apos;)) &#123;</div><div class="line">                char op = ops.pop();</div><div class="line">                double v = vals.pop();</div><div class="line">                if (op.equals(&apos;+&apos;)) v = vals.pop() + v;</div><div class="line">                else if (op.equals(&apos;-&apos;)) v = vals.pop() - v;</div><div class="line">                else if (op.equals(&apos;*&apos;)) v = vals.pop() * v;</div><div class="line">                else if (op.equals(&apos;/&apos;)) v = vals.pop() / v;</div><div class="line">                else if (op.equals(&apos;s&apos;)) v = Math.sqrt(v);</div><div class="line">                vals.push(v);</div><div class="line">            &#125; else &#123;</div><div class="line">                vals.push(Double.parseDouble(c));//操作数字符转换为double类型入栈</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文以栈为中心，主要介绍了栈的应用及算术表达式在编程语言中的表达形式。栈在大数据结构中用处很广，在其他数据结构中也能作为很好<br>的辅助，比如迭代版的二叉树遍历、深度优先搜索和广度优先搜索等等。学好栈和队列的时候是算法设计的一大基础，务必要扎实学好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;栈-Stack&quot;&gt;&lt;a href=&quot;#栈-Stack&quot; class=&quot;headerlink&quot; title=&quot;栈 (Stack)&quot;&gt;&lt;/a&gt;栈 (Stack)&lt;/h1&gt;&lt;h2 id=&quot;1-栈的概念&quot;&gt;&lt;a href=&quot;#1-栈的概念&quot; class=&quot;headerli
    
    </summary>
    
    
      <category term="DataStructure&amp;Algorithm" scheme="http://linzhs.cm/tags/DataStructure-Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Java中方法(函数)参数的传递</title>
    <link href="http://linzhs.cm/2017/03/22/JavaFuncParamCall/"/>
    <id>http://linzhs.cm/2017/03/22/JavaFuncParamCall/</id>
    <published>2017-03-22T12:05:45.114Z</published>
    <updated>2017-03-22T12:05:45.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java中方法-函数-参数的传递"><a href="#Java中方法-函数-参数的传递" class="headerlink" title="Java中方法(函数)参数的传递"></a>Java中方法(函数)参数的传递</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在程序设计语言中，按值调用（call by value）表示方法接收的是调用者提供的值，而按引用调用（call by reference）表示方法接收的是调用者提供的变量地址（指针）。一个方法可以修改传递引用所对应的变量值，但是不能修改传递值调用所对应的变量值。</p>
<p>在Java程序设计语言中，总是采用<a href="">按值调用</a>。也就是说，方法得到的是所有参数值的一个拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul>
<li><p>例子1<br>用一个方法试图将一个参数值增加到3倍</p>
<pre><code>public static void tripleValue(int x) { // 无法实现
    x = x * 3;
}

public static void main(String[] args) {
    int intValue = 1;
    tripleValue(intValue); 
    System.out.println(intValue); // doubleValue = 1
}
</code></pre></li>
</ul>
<p>说明：在main方法中，我们定义一个变量intValue，其值为1，再调用tripleValue方法，将x传入，完成函数调用后在console上打印x的值，结果还是为原来的值，并未改变。tripleValue方法被调用整个过程运行的步骤如下：</p>
<pre><code>1. x被初始化，且其值为调用者传递参数doubleValue的一个拷贝，即 x = 10
2. 运算x = x * 3 ,即 x * 3 = 30 ，30赋值给x，x = 30 ，x为intValue的一个拷贝，x变了，但是intValue却未曾改变
3. 方法运行结束，释放x
</code></pre><ul>
<li><p>例子2<br>用一个方法实现将一个员工的工资提高2倍</p>
<pre><code>public static void tripleSalary(Employee e) { // 可以实现
    e.raiseSalary(200); //e的salary提高200%
}

public static void main(String... args) {
    Employee harry = new Employee(...);
    tripleSalary(harry);
    System.out.println(harry.salary);
}
</code></pre></li>
</ul>
<p>说明：在main方法中，我们实例化一个Employee对象harry，再调用tripleSalary方法来提高员工的工资，将harry传入，完成函数调用后在console上打印harry的工资，结果工资真的提高的两倍。tripleSalary方法被调用整个过程运行的步骤如下：</p>
<pre><code>1. e被初始化，并且为harry的值的拷贝，这里是一个对象的引用
2. e和harry同时引用一个Employee对象，所以e提高了工资相当于提高了harry的工资
3. 方法运行结束，释放e
</code></pre><ul>
<li><p>例子3<br>很多程序员认为Java中对对象采用的是引用传递，实际上，这样理解是错误的。由于这种误解具有一定的普遍性，所以下面采用一个反例方法来说明，该方法是交换两个员工的对象</p>
<pre><code>public static void swap(Employee x, Employee y) { //无法实现
    Employee e = x;
    x = y;
    y = e;
}

public static void main(String[] args) {
    Employee a = new Employee(&quot;Alice&quot;, ...);
    Employee b = new Employee(&quot;Bob&quot;, ...);
    swap(a, b);
}
</code></pre></li>
</ul>
<p>说明：在main方法中，实例化了两个员工对象，分别是Alice和Bob，然后传递给swap方法。x和y拷贝了a和b，也就是引用了a和b对象，在swap方法内部将x和y进行交换，确实是可以的，交换完成后x引用Bob，y引用Alice，但是，重点是，a还是引用Alice，b还是引用Bob，并没有改变。最后，swap方法结束，x和y也别GC回收。所以，Java中对对象的传递是值传递而不是引用调用，此操作也就是白费了力气。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们首先说明、强调了Java中方法的参数传递不同于其他语言，总是对值的传递而不是引用调用，再用三个例子来说明，下面用3点来总结一下Java中方法参数的使用：</p>
<ul>
<li>一个方法不能修改一个基本数据类型的参数（即数值型或者布尔型）</li>
<li>一个方法可以修改一个对象参数的状态</li>
<li>一个方法不能让对象参数引用一个新的对象</li>
</ul>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p> <a href="">Java核心技术 卷I 基础知识</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java中方法-函数-参数的传递&quot;&gt;&lt;a href=&quot;#Java中方法-函数-参数的传递&quot; class=&quot;headerlink&quot; title=&quot;Java中方法(函数)参数的传递&quot;&gt;&lt;/a&gt;Java中方法(函数)参数的传递&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a hr
    
    </summary>
    
    
      <category term="Java" scheme="http://linzhs.cm/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CentOS-7个人静态博客Hexo搭建（适合新手）</title>
    <link href="http://linzhs.cm/2017/03/11/HowToBuildHexoBlog/"/>
    <id>http://linzhs.cm/2017/03/11/HowToBuildHexoBlog/</id>
    <published>2017-03-10T19:03:42.989Z</published>
    <updated>2017-03-10T19:03:42.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CentOS-7个人静态博客Hexo搭建（适合新手）"><a href="#CentOS-7个人静态博客Hexo搭建（适合新手）" class="headerlink" title="CentOS-7个人静态博客Hexo搭建（适合新手）"></a>CentOS-7个人静态博客Hexo搭建（适合新手）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近，借助网上强大的博客资源，自己在个人服务器上搭建了hexo静态博客。在整个搭建的过程中间学到了很多，虽然过程并不是一帆风顺。现写下自己的经验，来与大家分享，希望能够起到作用。</p>
<h2 id="个人服务器和域名准备"><a href="#个人服务器和域名准备" class="headerlink" title="个人服务器和域名准备"></a>个人服务器和域名准备</h2><p>（本文操作基于个人服务器和GitHub）这里的个人服务器是指虚拟服务器（VPS），一般需要购买。现在国内比较有名的VPS供应商是<a href="https://www.aliyun.com/" target="_blank" rel="external">阿里云</a>和<a href="https://www.qcloud.com/" target="_blank" rel="external">腾讯云</a>。国外的服务器可以考虑AWS，现在支持12月免费体验，当然也可以选择搬瓦</p>
<p>工这些便宜实用的，国外的服务器还可以在上面部署ShadowSocks/SSR实现科学上网。<br>只有服务器没有域名和相应的解析操作，那在浏览器上访问博客服务器只能用IP，那是何等的尴尬。可以在国内或者国外的域名申请服务商购买，本人无实际购买经验，在这里就先不推荐了。DNS解析可以用DNSPOD，还不错。</p>
<p>本博主为学生，所以干脆利落地选择了腾讯的学生云，1月1元起飞，域名1年1元起飞。</p>
<h2 id="个人博客开源平台对比"><a href="#个人博客开源平台对比" class="headerlink" title="个人博客开源平台对比"></a>个人博客开源平台对比</h2><ul>
<li>WordPress: 动态博客基于php、MySQL，必须有VPS支持，功能很强大，可通过浏览器访问数据库进行博客后台管理，但平台的插件安装和博客迁移比较麻烦。</li>
<li>Jekyll: 静态博客，可托管到GitHub，功能比较强大，但是所采用的liquid语法对程序员不太友好。</li>
<li>Octopress: 基于Jekyll的静态网站生成引擎。</li>
<li>Hexo: 基于Node.js的静态博客，比较热门，其免费、方便、速度快、可托管到GitHub。</li>
</ul>
<h2 id="系统服务器配置"><a href="#系统服务器配置" class="headerlink" title="系统服务器配置"></a>系统服务器配置</h2><p>本文搭建的博客基于如何系统服务器配置：</p>
<blockquote>
<p>  系统版本：CentOS-7.2-x64</p>
<p>  USER: root</p>
<p>  Firewall: stop</p>
<p>  SeLinux: stop</p>
</blockquote>
<h2 id="建站所需服务支持"><a href="#建站所需服务支持" class="headerlink" title="建站所需服务支持"></a>建站所需服务支持</h2><blockquote>
<p>  Nginx 网页服务器</p>
<p>  Node.js 环境(JavaScript)</p>
<p>  Hexo博客平台</p>
<p>  Git (非必须)</p>
</blockquote>
<h2 id="依赖服务安装"><a href="#依赖服务安装" class="headerlink" title="依赖服务安装"></a>依赖服务安装</h2><ul>
<li><p>Nginx安装</p>
<pre><code>[root@ ~#] yum -y install nginx
</code></pre></li>
<li><p>Git安装</p>
<pre><code>[root@ ~#] yum install -y git
[root@ ~#] git config --global user.name &quot;linzh&quot;
</code></pre><ul>
<li>Node.js环境搭建</li>
</ul>
<p>可以在<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>官网下载binary package编译安装，这种方式需要安装gcc等编译器。本文使用nvm的方式安装</p>
<p><a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>的最新版本可以在GitHub上参看，附有安装教程（English version）,当前安装版本为v0.33.1。</p>
<p>下面的安装方法二选一(注意默认的安装路径为当前用户的home目录)</p>
<p>   [root@ ~#] curl -o- <a href="https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh" target="_blank" rel="external">https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh</a> | bash #二选一</p>
<p>   [root@ ~#] wget -qO- <a href="https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh" target="_blank" rel="external">https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh</a> | bash #二选一</p>
<p>   [root@ ~#] source ~/.bashrc #使配置信息生效</p>
</li>
</ul>
<p>安装好nvm后查看当前可用的版本，并选取最新的版本安装(当前使用的版本为v6.10.0)</p>
<pre><code>[root@ ~#] nvm ls-remote #查看可用版本
[root@ ~#] nvm install v6.10.0 #安装最新版本
[root@ ~#] nvm alias default v6.10.0 #将v6.10.0设置为默认版本
[root@ ~#] nvm use default
</code></pre><ul>
<li>Hexo平台搭建</li>
</ul>
<p>这里使用npm安装hexo客户端和服务端</p>
<pre><code>[root@ ~#] npm install -g hexo-cli #g -&gt; global
[root@ ~#] npm install -g hexo-server
</code></pre><p>若用npm安装速度很慢的话，可以考虑更换npm镜像为淘宝镜像</p>
<pre><code>[root@ ~#] npm install -g cnpm --registry=https://registry.npm.taobao.org
</code></pre><h2 id="初次体验"><a href="#初次体验" class="headerlink" title="初次体验"></a>初次体验</h2><ul>
<li><p>初始化hexo环境 </p>
<pre><code>[root@ ~#] hexo init hexo_blog  # 在当前目录下建立hexo博客目录   
[root@ ~#] cd hexo_blog     
[root@ ~#] npm install
</code></pre><p>完成后会生成hexo相关文件，其中_config.yml为配置文件，具体配置可参考<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">hexo官方文档</a>。这里建议设置default_layout为draft，这样默认生成文章在Draft里，确认后再发布到Public。</p>
</li>
<li><p>发布文章</p>
<pre><code>[root@ ~#] hexo new hello_post      #新建文章    
[root@ ~#] vim ~/hexo_blog/source/_drafts/hello_post.md #编辑文章内容     
[root@ hexo_blog#] hexo publish hello_post      #发布文章，hello_post.md会从_drafts目录移动到_post目录        
</code></pre></li>
<li><p>运行服务<br>启动服务器，默认起在4000端口，成功后访问<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 预览效果</p>
<pre><code>[root@ ~#] hexo server
</code></pre></li>
</ul>
<h2 id="托管部署"><a href="#托管部署" class="headerlink" title="托管部署"></a>托管部署</h2><p>这里我们将博客的文件托管到<a href="https://github.com/" target="_blank" rel="external">GitHub</a>，国内现在可以考虑托管到<a href="https://git.oschina.net/" target="_blank" rel="external">码云</a>上，听名字就很霸气！</p>
<ul>
<li>新建 Repository</li>
</ul>
<p>托管代码需要一个仓库（如何新建仓库，请自行search，此处省略数字），仓库名为hexo_repo（仓库名可以根据自己的爱好取，注意接下来的步骤需要对应此名称）</p>
<ul>
<li>配置hexo部署方式</li>
</ul>
<p>进入服务器的hexo博客主目录，编辑_config.yml文件，修改deploy项。这里的$username需要换成你的GitHub的账户</p>
<pre><code>deploy:
  type: git
  repo: https://github.com/$username/hexo_repo.git
  branch: master
</code></pre><ul>
<li><p>安装hexo一键git推送插件</p>
<pre><code>[root@ hexo_blog#] npm install hexo-deployer-git --save
</code></pre></li>
<li><p>部署</p>
<pre><code>[root@ hexo_blog#] hexo -g  # 也可以使用全称 hexo -generate
[root@ hexo_blog#] hexo -d  # 也可以使用全称 hexo -deploy
</code></pre><p>输入命令后会提示输入GitHub的账号密码，输入完成后即已将代码提交到GitHub上了。</p>
</li>
</ul>
<h2 id="自动化部署发布"><a href="#自动化部署发布" class="headerlink" title="自动化部署发布"></a>自动化部署发布</h2><p>每次发布博文都要经过创建文章，推送GitHub托管代码，hexo生成发布，挺麻烦的，现在来实现一键自动化。<br>自动化的思路：编写一个脚本，该脚本执行的时候生成博客静态文件，通过hexo deploy实现自动提交到GitHub，然后通过本地更新代码，对关联的空分支进行git push操作，触发git的post-receive钩子，从而将静态文件同步到/var/www/hexo目录，而该目录正是Nginx将80端口转发到本地的路径（反向代理）。</p>
<ul>
<li><p>在服务器上建立hexo博客git仓库</p>
<p>  [root@ ~#] git init –bare ~/hexo_bare</p>
</li>
<li><p>创建git hooks</p>
</li>
</ul>
<p>这里使用git的post-receive钩子，当本地绑定仓库执行git push后触发。</p>
<pre><code>[root@ ~#] vim ~/hexo_bare/hooks/post-receive
</code></pre><p>post-receive文件具体内容(注意$USER):</p>
<pre><code>#!/bin/bash

git --work-tree=/var/www/hexo --git-dir=/home/$USER/hexo_bare checkout -f
</code></pre><ul>
<li><p>将空仓库关联到主仓库</p>
<pre><code>[root@ ~#] git clone https://github.com/$username/hexo_repo.git ~/hexo_static 
[root@ ~#] cd ~/hexo_static
[root@ ~#] git remote add live ~/hexo_bare   
</code></pre></li>
<li><p>创建自动化脚本</p>
<p>  [root@ ~#] vim ~/hexo_blog/hexo_git_deploy.sh</p>
</li>
</ul>
<p>脚本内容如下</p>
<pre><code>#!/bin/bash

hexo clean
hexo generate 
hexo deploy

( cd ~/hexo_static ; git pull ; git push live master)
</code></pre><ul>
<li>配置Nginx反向代理</li>
</ul>
<p>修改/var/www/html目录的权限，此目录默认为Nginx的请求映射目录</p>
<pre><code>[root@ ~#] chown -R $USER:$USER /var/www/hexo
[root@ ~#] chmod -R 755 /var/www/hexo
</code></pre><p>编辑Nginx配置文件(当前使用的系统为centos7.2，nginx和系统版本不一，配置文件的位置可能也不一)</p>
<pre><code>[root@ ~#] cp /ect/nginx/nginx.conf /ect/nginx/nginx.conf.bak  #备份
[root@ ~#] vim /ect/nginx/nginx.conf  #编辑
</code></pre><p>找到server块，内容大致如下</p>
<pre><code>server {
    listen       80 default_server;
    listen       [::]:80 default_server;
    server_name  _;
    root         /var/www/hexo;

    # Load configuration files for the default server block.
    include /etc/nginx/default.d/*.conf;

    #反向代理重点配置部分
    location / {
            root /var/www/hexo;
            index index.html index.htm;
    }

    error_page 404 /404.html;
        location = /40x.html {
    }

    error_page 500 502 503 504 /50x.html;
        location = /50x.html {
    }
}
</code></pre><p>编辑好Nginx配置文件后重启Nginx服务</p>
<pre><code>[root@ ~#] systemctl restart nginx
</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此，hexo静态博客的基本搭建已经完成，我们总结一下发布文章或者更新文章的流程</p>
<pre><code>$ hexo new my-post
$ vim ~/hexo_blog/source/_draft/my-post.md
$ hexo publish my-post
$ hexo generate
$ hexo server
$  ~/hexo_blog/hexo_git_deploy.sh
</code></pre><p>新建文章 -&gt; 编辑文章 -&gt; 发布文件 -&gt; 生成静态博客文件 -&gt; 预览 –&gt; 修改 –&gt; 最终发布</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>美化hexo</li>
</ul>
<p>hexo官方和好心网友提供了丰富的网页主题和评论、数据统计、监控等插件，可参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo官方支持文档</a>.<br>本文借鉴了好心网友的<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="external">indigo</a>,沉浸式设计，还不错。</p>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p>这是博主第一次写博客，好激动，但很多借鉴了网友的博文，如果有侵权问题，麻烦通知删除，谢谢！</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.jianshu.com/p/70f3cfae1ef4" target="_blank" rel="external">使用Hexo搭建个人静态博客</a></p>
<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo官方文档</a></p>
<p><a href="http://blog.csdn.net/lnxfei/article/details/43900271" target="_blank" rel="external">wordpress-jekyll-octopress-hexo四博客引擎比较</a></p>
<p><a href="http://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="external">Markdown——入门指南</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CentOS-7个人静态博客Hexo搭建（适合新手）&quot;&gt;&lt;a href=&quot;#CentOS-7个人静态博客Hexo搭建（适合新手）&quot; class=&quot;headerlink&quot; title=&quot;CentOS-7个人静态博客Hexo搭建（适合新手）&quot;&gt;&lt;/a&gt;CentOS-7
    
    </summary>
    
    
      <category term="hexo" scheme="http://linzhs.cm/tags/hexo/"/>
    
  </entry>
  
</feed>
