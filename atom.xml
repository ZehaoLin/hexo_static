<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Linzh&#39;s Blog</title>
  <subtitle>Waking Dream</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://linzhs.cm/"/>
  <updated>2017-03-10T19:00:06.997Z</updated>
  <id>http://linzhs.cm/</id>
  
  <author>
    <name>Linzh</name>
    <email>lzh_547590520@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS-7个人静态博客Hexo搭建（适合新手）</title>
    <link href="http://linzhs.cm/2017/03/11/HowToBuildHexoBlog/"/>
    <id>http://linzhs.cm/2017/03/11/HowToBuildHexoBlog/</id>
    <published>2017-03-10T19:00:07.010Z</published>
    <updated>2017-03-10T19:00:06.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CentOS-7个人静态博客Hexo搭建（适合新手）"><a href="#CentOS-7个人静态博客Hexo搭建（适合新手）" class="headerlink" title="CentOS-7个人静态博客Hexo搭建（适合新手）"></a>CentOS-7个人静态博客Hexo搭建（适合新手）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近，借助网上强大的博客资源，自己在个人服务器上搭建了hexo静态博客。在整个搭建的过程中间学到了很多，虽然过程并不是一帆风顺。现写下自己的经验，来与大家分享，希望能够起到作用。</p>
<h2 id="个人服务器和域名准备"><a href="#个人服务器和域名准备" class="headerlink" title="个人服务器和域名准备"></a>个人服务器和域名准备</h2><p>（本文操作基于个人服务器和GitHub）这里的个人服务器是指虚拟服务器（VPS），一般需要购买。现在国内比较有名的VPS供应商是<a href="https://www.aliyun.com/" target="_blank" rel="external">阿里云</a>和<a href="https://www.qcloud.com/" target="_blank" rel="external">腾讯云</a>。国外的服务器可以考虑AWS，现在支持12月免费体验，当然也可以选择搬瓦</p>
<p>工这些便宜实用的，国外的服务器还可以在上面部署ShadowSocks/SSR实现科学上网。<br>只有服务器没有域名和相应的解析操作，那在浏览器上访问博客服务器只能用IP，那是何等的尴尬。可以在国内或者国外的域名申请服务商购买，本人无实际购买经验，在这里就先不推荐了。DNS解析可以用DNSPOD，还不错。</p>
<p>本博主为学生，所以干脆利落地选择了腾讯的学生云，1月1元起飞，域名1年1元起飞。</p>
<h2 id="个人博客开源平台对比"><a href="#个人博客开源平台对比" class="headerlink" title="个人博客开源平台对比"></a>个人博客开源平台对比</h2><ul>
<li>WordPress: 动态博客基于php、MySQL，必须有VPS支持，功能很强大，可通过浏览器访问数据库进行博客后台管理，但平台的插件安装和博客迁移比较麻烦。</li>
<li>Jekyll: 静态博客，可托管到GitHub，功能比较强大，但是所采用的liquid语法对程序员不太友好。</li>
<li>Octopress: 基于Jekyll的静态网站生成引擎。</li>
<li>Hexo: 基于Node.js的静态博客，比较热门，其免费、方便、速度快、可托管到GitHub。</li>
</ul>
<h2 id="系统服务器配置"><a href="#系统服务器配置" class="headerlink" title="系统服务器配置"></a>系统服务器配置</h2><p>本文搭建的博客基于如何系统服务器配置：</p>
<blockquote>
<p>  系统版本：CentOS-7.2-x64</p>
<p>  USER: root</p>
<p>  Firewall: stop</p>
<p>  SeLinux: stop</p>
</blockquote>
<h2 id="建站所需服务支持"><a href="#建站所需服务支持" class="headerlink" title="建站所需服务支持"></a>建站所需服务支持</h2><blockquote>
<p>  Nginx 网页服务器</p>
<p>  Node.js 环境(JavaScript)</p>
<p>  Hexo博客平台</p>
<p>  Git (非必须)</p>
</blockquote>
<h2 id="依赖服务安装"><a href="#依赖服务安装" class="headerlink" title="依赖服务安装"></a>依赖服务安装</h2><ul>
<li><p>Nginx安装</p>
<pre><code>[root@ ~#] yum -y install nginx
</code></pre></li>
<li><p>Git安装</p>
<pre><code>[root@ ~#] yum install -y git
[root@ ~#] git config --global user.name &quot;linzh&quot;
</code></pre><ul>
<li>Node.js环境搭建</li>
</ul>
<p>可以在<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>官网下载binary package编译安装，这种方式需要安装gcc等编译器。本文使用nvm的方式安装</p>
<p><a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>的最新版本可以在GitHub上参看，附有安装教程（English version）,当前安装版本为v0.33.1。</p>
<p>下面的安装方法二选一(注意默认的安装路径为当前用户的home目录)</p>
<p>   [root@ ~#] curl -o- <a href="https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh" target="_blank" rel="external">https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh</a> | bash #二选一</p>
<p>   [root@ ~#] wget -qO- <a href="https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh" target="_blank" rel="external">https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh</a> | bash #二选一</p>
<p>   [root@ ~#] source ~/.bashrc #使配置信息生效</p>
</li>
</ul>
<p>安装好nvm后查看当前可用的版本，并选取最新的版本安装(当前使用的版本为v6.10.0)</p>
<pre><code>[root@ ~#] nvm ls-remote #查看可用版本
[root@ ~#] nvm install v6.10.0 #安装最新版本
[root@ ~#] nvm alias default v6.10.0 #将v6.10.0设置为默认版本
[root@ ~#] nvm use default
</code></pre><ul>
<li>Hexo平台搭建</li>
</ul>
<p>这里使用npm安装hexo客户端和服务端</p>
<pre><code>[root@ ~#] npm install -g hexo-cli #g -&gt; global
[root@ ~#] npm install -g hexo-server
</code></pre><p>若用npm安装速度很慢的话，可以考虑更换npm镜像为淘宝镜像</p>
<pre><code>[root@ ~#] npm install -g cnpm --registry=https://registry.npm.taobao.org
</code></pre><h2 id="初次体验"><a href="#初次体验" class="headerlink" title="初次体验"></a>初次体验</h2><ul>
<li><p>初始化hexo环境 </p>
<pre><code>[root@ ~#] hexo init hexo_blog  # 在当前目录下建立hexo博客目录   
[root@ ~#] cd hexo_blog     
[root@ ~#] npm install
</code></pre><p>完成后会生成hexo相关文件，其中_config.yml为配置文件，具体配置可参考<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">hexo官方文档</a>。这里建议设置default_layout为draft，这样默认生成文章在Draft里，确认后再发布到Public。</p>
</li>
<li><p>发布文章</p>
<pre><code>[root@ ~#] hexo new hello_post      #新建文章    
[root@ ~#] vim ~/hexo_blog/source/_drafts/hello_post.md #编辑文章内容     
[root@ hexo_blog#] hexo publish hello_post      #发布文章，hello_post.md会从_drafts目录移动到_post目录        
</code></pre></li>
<li><p>运行服务<br>启动服务器，默认起在4000端口，成功后访问<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 预览效果</p>
<pre><code>[root@ ~#] hexo server
</code></pre></li>
</ul>
<h2 id="托管部署"><a href="#托管部署" class="headerlink" title="托管部署"></a>托管部署</h2><p>这里我们将博客的文件托管到<a href="https://github.com/" target="_blank" rel="external">GitHub</a>，国内现在可以考虑托管到<a href="https://git.oschina.net/" target="_blank" rel="external">码云</a>上，听名字就很霸气！</p>
<ul>
<li>新建 Repository</li>
</ul>
<p>托管代码需要一个仓库（如何新建仓库，请自行search，此处省略数字），仓库名为hexo_repo（仓库名可以根据自己的爱好取，注意接下来的步骤需要对应此名称）</p>
<ul>
<li>配置hexo部署方式</li>
</ul>
<p>进入服务器的hexo博客主目录，编辑_config.yml文件，修改deploy项。这里的$username需要换成你的GitHub的账户</p>
<pre><code>deploy:
  type: git
  repo: https://github.com/$username/hexo_repo.git
  branch: master
</code></pre><ul>
<li><p>安装hexo一键git推送插件</p>
<pre><code>[root@ hexo_blog#] npm install hexo-deployer-git --save
</code></pre></li>
<li><p>部署</p>
<pre><code>[root@ hexo_blog#] hexo -g  # 也可以使用全称 hexo -generate
[root@ hexo_blog#] hexo -d  # 也可以使用全称 hexo -deploy
</code></pre><p>输入命令后会提示输入GitHub的账号密码，输入完成后即已将代码提交到GitHub上了。</p>
</li>
</ul>
<h2 id="自动化部署发布"><a href="#自动化部署发布" class="headerlink" title="自动化部署发布"></a>自动化部署发布</h2><p>每次发布博文都要经过创建文章，推送GitHub托管代码，hexo生成发布，挺麻烦的，现在来实现一键自动化。<br>自动化的思路：编写一个脚本，该脚本执行的时候生成博客静态文件，通过hexo deploy实现自动提交到GitHub，然后通过本地更新代码，对关联的空分支进行git push操作，触发git的post-receive钩子，从而将静态文件同步到/var/www/hexo目录，而该目录正是Nginx将80端口转发到本地的路径（反向代理）。</p>
<ul>
<li><p>在服务器上建立hexo博客git仓库</p>
<p>  [root@ ~#] git init –bare ~/hexo_bare</p>
</li>
<li><p>创建git hooks</p>
</li>
</ul>
<p>这里使用git的post-receive钩子，当本地绑定仓库执行git push后触发。</p>
<pre><code>[root@ ~#] vim ~/hexo_bare/hooks/post-receive
</code></pre><p>post-receive文件具体内容(注意$USER):</p>
<pre><code>#!/bin/bash

git --work-tree=/var/www/hexo --git-dir=/home/$USER/hexo_bare checkout -f
</code></pre><ul>
<li><p>将空仓库关联到主仓库</p>
<pre><code>[root@ ~#] git clone https://github.com/$username/hexo_repo.git ~/hexo_static 
[root@ ~#] cd ~/hexo_static
[root@ ~#] git remote add live ~/hexo_bare   
</code></pre></li>
<li><p>创建自动化脚本</p>
<p>  [root@ ~#] vim ~/hexo_blog/hexo_git_deploy.sh</p>
</li>
</ul>
<p>脚本内容如下</p>
<pre><code>#!/bin/bash

hexo clean
hexo generate 
hexo deploy

( cd ~/hexo_static ; git pull ; git push live master)
</code></pre><ul>
<li>配置Nginx反向代理</li>
</ul>
<p>修改/var/www/html目录的权限，此目录默认为Nginx的请求映射目录</p>
<pre><code>[root@ ~#] chown -R $USER:$USER /var/www/hexo
[root@ ~#] chmod -R 755 /var/www/hexo
</code></pre><p>编辑Nginx配置文件(当前使用的系统为centos7.2，nginx和系统版本不一，配置文件的位置可能也不一)</p>
<pre><code>[root@ ~#] cp /ect/nginx/nginx.conf /ect/nginx/nginx.conf.bak  #备份
[root@ ~#] vim /ect/nginx/nginx.conf  #编辑
</code></pre><p>找到server块，内容大致如下</p>
<pre><code>server {
    listen       80 default_server;
    listen       [::]:80 default_server;
    server_name  _;
    root         /var/www/hexo;

    # Load configuration files for the default server block.
    include /etc/nginx/default.d/*.conf;

    #反向代理重点配置部分
    location / {
            root /var/www/hexo;
            index index.html index.htm;
    }

    error_page 404 /404.html;
        location = /40x.html {
    }

    error_page 500 502 503 504 /50x.html;
        location = /50x.html {
    }
}
</code></pre><p>编辑好Nginx配置文件后重启Nginx服务</p>
<pre><code>[root@ ~#] systemctl restart nginx
</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此，hexo静态博客的基本搭建已经完成，我们总结一下发布文章或者更新文章的流程</p>
<pre><code>$ hexo new my-post
$ vim ~/hexo_blog/source/_draft/my-post.md
$ hexo publish my-post
$ hexo generate
$ hexo server
$  ~/hexo_blog/hexo_git_deploy.sh
</code></pre><p>新建文章 -&gt; 编辑文章 -&gt; 发布文件 -&gt; 生成静态博客文件 -&gt; 预览 –&gt; 修改 –&gt; 最终发布</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>美化hexo</li>
</ul>
<p>hexo官方和好心网友提供了丰富的网页主题和评论、数据统计、监控等插件，可参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo官方支持文档</a>.<br>本文借鉴了好心网友的<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="external">indigo</a>,沉浸式设计，还不错。</p>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p>这是博主第一次写博客，好激动，但很多借鉴了网友的博文，如果有侵权问题，麻烦通知删除，谢谢！</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.jianshu.com/p/70f3cfae1ef4" target="_blank" rel="external">使用Hexo搭建个人静态博客</a></p>
<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo官方文档</a></p>
<p><a href="http://blog.csdn.net/lnxfei/article/details/43900271" target="_blank" rel="external">wordpress-jekyll-octopress-hexo四博客引擎比较</a></p>
<p><a href="http://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="external">Markdown——入门指南</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CentOS-7个人静态博客Hexo搭建（适合新手）&quot;&gt;&lt;a href=&quot;#CentOS-7个人静态博客Hexo搭建（适合新手）&quot; class=&quot;headerlink&quot; title=&quot;CentOS-7个人静态博客Hexo搭建（适合新手）&quot;&gt;&lt;/a&gt;CentOS-7
    
    </summary>
    
    
  </entry>
  
</feed>
