[{"title":"","date":"2017-03-10T18:53:42.157Z","path":"2017/03/11/HowToBuildHexoBlog/","text":"CentOS-7个人静态博客Hexo搭建（适合新手）前言最近，借助网上强大的博客资源，自己在个人服务器上搭建了hexo静态博客。在整个搭建的过程中间学到了很多，虽然过程并不是一帆风顺。现写下自己的经验，来与大家分享，希望能够起到作用。 个人服务器和域名准备（本文操作基于个人服务器和GitHub）这里的个人服务器是指虚拟服务器（VPS），一般需要购买。现在国内比较有名的VPS供应商是阿里云和腾讯云。国外的服务器可以考虑AWS，现在支持12月免费体验，当然也可以选择搬瓦 工这些便宜实用的，国外的服务器还可以在上面部署ShadowSocks/SSR实现科学上网。只有服务器没有域名和相应的解析操作，那在浏览器上访问博客服务器只能用IP，那是何等的尴尬。可以在国内或者国外的域名申请服务商购买，本人无实际购买经验，在这里就先不推荐了。DNS解析可以用DNSPOD，还不错。 本博主为学生，所以干脆利落地选择了腾讯的学生云，1月1元起飞，域名1年1元起飞。 个人博客开源平台对比 WordPress: 动态博客基于php、MySQL，必须有VPS支持，功能很强大，可通过浏览器访问数据库进行博客后台管理，但平台的插件安装和博客迁移比较麻烦。 Jekyll: 静态博客，可托管到GitHub，功能比较强大，但是所采用的liquid语法对程序员不太友好。 Octopress: 基于Jekyll的静态网站生成引擎。 Hexo: 基于Node.js的静态博客，比较热门，其免费、方便、速度快、可托管到GitHub。 系统服务器配置本文搭建的博客基于如何系统服务器配置： 系统版本：CentOS-7.2-x64 USER: root Firewall: stop SeLinux: stop 建站所需服务支持 Nginx 网页服务器 Node.js 环境(JavaScript) Hexo博客平台 Git (非必须) 依赖服务安装 Nginx安装 [root@ ~#] yum -y install nginx Git安装 [root@ ~#] yum install -y git [root@ ~#] git config --global user.name &quot;linzh&quot; Node.js环境搭建 可以在Node.js官网下载binary package编译安装，这种方式需要安装gcc等编译器。本文使用nvm的方式安装 nvm的最新版本可以在GitHub上参看，附有安装教程（English version）,当前安装版本为v0.33.1。 下面的安装方法二选一(注意默认的安装路径为当前用户的home目录) [root@ ~#] curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash #二选一 [root@ ~#] wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash #二选一 [root@ ~#] source ~/.bashrc #使配置信息生效 安装好nvm后查看当前可用的版本，并选取最新的版本安装(当前使用的版本为v6.10.0) [root@ ~#] nvm ls-remote #查看可用版本 [root@ ~#] nvm install v6.10.0 #安装最新版本 [root@ ~#] nvm alias default v6.10.0 #将v6.10.0设置为默认版本 [root@ ~#] nvm use default Hexo平台搭建 这里使用npm安装hexo客户端和服务端 [root@ ~#] npm install -g hexo-cli #g -&gt; global [root@ ~#] npm install -g hexo-server 若用npm安装速度很慢的话，可以考虑更换npm镜像为淘宝镜像 [root@ ~#] npm install -g cnpm --registry=https://registry.npm.taobao.org 初次体验 初始化hexo环境 [root@ ~#] hexo init hexo_blog # 在当前目录下建立hexo博客目录 [root@ ~#] cd hexo_blog [root@ ~#] npm install 完成后会生成hexo相关文件，其中_config.yml为配置文件，具体配置可参考hexo官方文档。这里建议设置default_layout为draft，这样默认生成文章在Draft里，确认后再发布到Public。 发布文章 [root@ ~#] hexo new hello_post #新建文章 [root@ ~#] vim ~/hexo_blog/source/_drafts/hello_post.md #编辑文章内容 [root@ hexo_blog#] hexo publish hello_post #发布文章，hello_post.md会从_drafts目录移动到_post目录 运行服务启动服务器，默认起在4000端口，成功后访问http://localhost:4000 预览效果 [root@ ~#] hexo server 托管部署这里我们将博客的文件托管到GitHub，国内现在可以考虑托管到码云上，听名字就很霸气！ 新建 Repository 托管代码需要一个仓库（如何新建仓库，请自行search，此处省略数字），仓库名为hexo_repo（仓库名可以根据自己的爱好取，注意接下来的步骤需要对应此名称） 配置hexo部署方式 进入服务器的hexo博客主目录，编辑_config.yml文件，修改deploy项。这里的$username需要换成你的GitHub的账户 deploy: type: git repo: https://github.com/$username/hexo_repo.git branch: master 安装hexo一键git推送插件 [root@ hexo_blog#] npm install hexo-deployer-git --save 部署 [root@ hexo_blog#] hexo -g # 也可以使用全称 hexo -generate [root@ hexo_blog#] hexo -d # 也可以使用全称 hexo -deploy 输入命令后会提示输入GitHub的账号密码，输入完成后即已将代码提交到GitHub上了。 自动化部署发布每次发布博文都要经过创建文章，推送GitHub托管代码，hexo生成发布，挺麻烦的，现在来实现一键自动化。自动化的思路：编写一个脚本，该脚本执行的时候生成博客静态文件，通过hexo deploy实现自动提交到GitHub，然后通过本地更新代码，对关联的空分支进行git push操作，触发git的post-receive钩子，从而将静态文件同步到/var/www/hexo目录，而该目录正是Nginx将80端口转发到本地的路径（反向代理）。 在服务器上建立hexo博客git仓库 [root@ ~#] git init –bare ~/hexo_bare 创建git hooks 这里使用git的post-receive钩子，当本地绑定仓库执行git push后触发。 [root@ ~#] vim ~/hexo_bare/hooks/post-receive post-receive文件具体内容(注意$USER): #!/bin/bash git --work-tree=/var/www/hexo --git-dir=/home/$USER/hexo_bare checkout -f 将空仓库关联到主仓库 [root@ ~#] git clone https://github.com/$username/hexo_repo.git ~/hexo_static [root@ ~#] cd ~/hexo_static [root@ ~#] git remote add live ~/hexo_bare 创建自动化脚本 [root@ ~#] vim ~/hexo_blog/hexo_git_deploy.sh 脚本内容如下 #!/bin/bash hexo clean hexo generate hexo deploy ( cd ~/hexo_static ; git pull ; git push live master) 配置Nginx反向代理 修改/var/www/html目录的权限，此目录默认为Nginx的请求映射目录 [root@ ~#] chown -R $USER:$USER /var/www/hexo [root@ ~#] chmod -R 755 /var/www/hexo 编辑Nginx配置文件(当前使用的系统为centos7.2，nginx和系统版本不一，配置文件的位置可能也不一) [root@ ~#] cp /ect/nginx/nginx.conf /ect/nginx/nginx.conf.bak #备份 [root@ ~#] vim /ect/nginx/nginx.conf #编辑 找到server块，内容大致如下 server { listen 80 default_server; listen [::]:80 default_server; server_name _; root /var/www/hexo; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; #反向代理重点配置部分 location / { root /var/www/hexo; index index.html index.htm; } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } } 编辑好Nginx配置文件后重启Nginx服务 [root@ ~#] systemctl restart nginx 总结到此，hexo静态博客的基本搭建已经完成，我们总结一下发布文章或者更新文章的流程 $ hexo new my-post $ vim ~/hexo_blog/source/_draft/my-post.md $ hexo publish my-post $ hexo generate $ hexo server $ ~/hexo_blog/hexo_git_deploy.sh 新建文章 -&gt; 编辑文章 -&gt; 发布文件 -&gt; 生成静态博客文件 -&gt; 预览 –&gt; 修改 –&gt; 最终发布 其他 美化hexo hexo官方和好心网友提供了丰富的网页主题和评论、数据统计、监控等插件，可参考hexo官方支持文档.本文借鉴了好心网友的indigo,沉浸式设计，还不错。 重点这是博主第一次写博客，好激动，但很多借鉴了网友的博文，如果有侵权问题，麻烦通知删除，谢谢！ 参考文章使用Hexo搭建个人静态博客 hexo官方文档 wordpress-jekyll-octopress-hexo四博客引擎比较 Markdown——入门指南","tags":[]}]